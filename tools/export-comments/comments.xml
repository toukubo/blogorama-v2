<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dsq="http://www.disqus.com/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wp="http://wordpress.org/export/1.0/">
  <channel>
    <item>
      <title>How I lost my right foot!</title>
      <link>http://ghost-nerd.azurewebsites.net/howilostmyrightfoot</link>
      <dsq:thread_identifier>2</dsq:thread_identifier>
      <wp:post_date_gmt>2006-04-03 20:38:09</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>I don't particularly mind dealing with bugs as long as they are interesting to fix and you learn something along the way. I was not always so well disposed towards them though. It is only after reading <a href="http://www.amazon.com/exec/obidos/tg/detail/-/0735608865?v=glance"><em>Debugging Applications</em></a><strong>by <a href="http://www.wintellect.com/TechnicalBioDetail.aspx?Tech=4"><em>John Robbins</em></a></strong>that I realized how much fun fixing bugs can be 8-)! There are bugs that you feel good about when you fix 'em because it required you to use your "amazing ingenuity" and "extensive knowledge" of how stuff works under the hood and then there are bugs that make you feel rotten because the darn thing won't get reproduced on your box!</p>

<p>Those are the nastiest kind of bugs to get stuck with because you know it is there somewhere and there isn't a single thing that you can do about it! I had to deal with a bug like that the other day the root cause for which in the end turned out to be a fairly silly little programming error. "If you can shoot yourself in the foot with 'C', you can blow your whole leg off with C++" reminisced the wise old man while helping himself up the handicap ramp seated on his wheelchair. I know he said this because I was right there behind him when he said it with a big smoking hole in my right foot. Here's what happened.</p>

<p>Ours is an ambitious little web application that seeks to do a whole lot of things all by itself using pretty much every single technology that mankind has managed to come up with till about 5 minutes back. One of the things that it jauntily goes about doing every now and then is to call a little <a href="http://en.wikipedia.org/wiki/ISAPI">Internet Server API</a> (ISAPI) extension on the web server whenever somebody logs off. When a user happens to crash out of a web session however (as can happen for instance when lightning strikes the user's computer and does not give her a chance to cleanly exit the browser and shut the computer down) that little notification does not ever reach the ISAPI extension and the web server remains tragically unaware of the user's untimely end. After twiddling thumbs for some time though the ISAPI extension runs out of patience and just ends that user's session. Now, here's the important part - as part of the processing where it terminates that non-responsive user's session, it turns on a little boolean member in a little C++ class to register the fact that that session has been aborted (as opposed to cleanly logging off).</p>

<p>All the session information is stored in a <a href="http://en.wikipedia.org/wiki/Standard_Template_Library">Standard Template Library</a> <code>list&lt;&gt;</code> object and this is what the session object looks like:</p>

<pre><code>class CSession
{
public:
    bool    m_bAbnormalLogOff; // this tells me whether
                               // this session ended abnormally
    int     haplessInt;
    float   haplessFloat;

public:
    CSession()
    {
        //
        // initialize everything
        //
        m_bAbnormalLogOff = false;
        haplessInt = 0;
        haplessFloat = 0.0f;
    }

    CSession( const CSession&amp; s1 )
    {
        haplessInt = s1.haplessInt;
        haplessFloat = s1.haplessFloat;
    }
};
</code></pre>

<p>Now, can you spot the error in this code? The error is of course that <code>m_bAbnormalLogOff</code> is not initialized in the copy constructor. Why is that a bad thing? Please look at the following code and try predicting what the output will be:</p>

<pre><code>list&lt;CSession&gt; listOfSessions;

//
// create an abnormal session and push
// it onto the list
//
CSession badSession;
badSession.m_bAbnormalLogOff = true;
listOfSessions.push_back( badSession );

//
// now pop it off the list and push
// a normal session object
//
listOfSessions.pop_front();
CSession goodSession;    // now m_bAbnormalLogOff would be "false"
listOfSession.push_back( goodSession );

cout&lt;&lt;goodSession.m_bAbnormalLogOff&lt;&lt;endl;
</code></pre>

<p>If you said that it would print <code>0</code> (zero), then wouldn't you be surprised if I told you that the actual output on Microsoft's C++ compiler (the one they give free with <a href="http://msdn.microsoft.com/vstudio/express/visualc/">Visual C++ Express Edition 2005</a>) is <code>1</code>? Well, fact is, it prints <code>1</code> and this is the nasty little bug that troubled us no end! Here's my take on what is most likely happening in this case:</p>

<ul>
<li>When the first <code>CSession</code> object gets pushed on to the <code>list&lt;&gt;</code> it allocates some space for it and keeps it there. The point to note here is that <code>list&lt;&gt;</code> classes maintain their own copies of the objects that they are tracking and routines like <code>list&lt;&gt;::push_back</code> invoke the object's copy constructor for creating the copy. This is the reason why it is important that classes that you plan to store in STL containers implement the copy constructor and the assignment operator.</li>
<li>When this object gets popped off the <code>list&lt;&gt;</code> and is replaced by another <code>CSession</code> object, the new instance, instead of occupying fresh memory space just sits nice and snug in the space that the previous <code>CSession</code> object had occupied. As before <code>list&lt;&gt;::push_back</code> dutifully invokes <code>CSession::CSession( const CSession&amp; s1 )</code> for creating the object copy.</li>
<li>Since we forgot to copy the value for <code>m_bAbnormalLogOff</code> from <code>s1</code> in the copy constructor it automatically assumes whatever value is currently stored in that location.</li>
<li>Given that we initialized <code>m_bAbnormalLogOff</code> with the value <code>true</code> for <code>badSession</code>,<code>goodSession</code> continues to use the same value!</li>
</ul>

<p>The fallout of this little beauty is that every once in a while the system would report sessions where the user had logged off legitimately as having been aborted. Invariably this would always happen for 2 or 3 sessions that immediately followed a session that got aborted!</p>]]>
      </content:encoded>
      <wp:comment>
        <wp:comment_id>12</wp:comment_id>
        <wp:comment_author>Aravind</wp:comment_author>
        <wp:comment_author_email></wp:comment_author_email>
        <wp:comment_date_gmt>2006-04-04 07:17:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Dude, This stuff is a lil bit too geeky for me. Btw, the &amp;quot;correct&amp;quot; saying should be &amp;quot;The geek shall inherit the earth&amp;quot; - its a play on &amp;quot;Meek&amp;quot;... anyways, yeah, UI is really not ur cuppa tea.  Why in God's name r u using frames? makes the whole thing look pretty bulky.
but yeah, good enthu man, keep it flowing, these things take time to settle down.]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>15</wp:comment_id>
        <wp:comment_author>Ranju. V</wp:comment_author>
        <wp:comment_author_email></wp:comment_author_email>
        <wp:comment_date_gmt>2006-04-04 10:02:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[hey,

it ain't that geeky dude.. shouldn't be all that difficult for a former geek :)..

and the quote is a play on the play on the original quote!

dude, what's wrong with frames?  what's uncool about them? bulky?

thanks for ze commento!]]>
        </wp:comment_content>
      </wp:comment>
    </item>
    <item>
      <title>Dumb terrorists</title>
      <link>http://ghost-nerd.azurewebsites.net/dumbterrorists</link>
      <dsq:thread_identifier>3</dsq:thread_identifier>
      <wp:post_date_gmt>2006-06-12 05:31:19</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>Terrorists must be some of the dumbest people on the planet to believe that terror can somehow further their cause. I wonder if in all of history there has ever been a case where terror resulted in something positive for the terrorists. End of day such acts only contribute to fuelling a vicious cycle of hatred. The fundamental problem is that humans have a capacity for evil! That might sound naï¿½ve but is nevertheless true I think. There's an apothegm by <a href="http://en.wikipedia.org/wiki/Friedrich_Nietzsche">Friedrich Nietzsche</a> that goes like -</p>

<blockquote>
  <p>In individuals, insanity is rare; but in groups, parties, nations and epochs, it is the rule.</p>
</blockquote>

<p>What this would mean is that acts of terror are perpetrated by terrorist groups (which tend to be insane by nature given that they are <em>groups</em> of people) that are led by sober, cold and essentially evil individuals who do the thinking and the planning; who cleverly exploit and misdirect restless energy in disgruntled youths; who know the exact words and notions that will appeal to them and even lend an illusion of grandeur to what they are doing.</p>

<p>I have always suspected that there exists a suicidal streak in humans as a species. This is perhaps just one of the ways in which that instinct has manifested itself.</p>

<blockquote>
  <p><a href="http://www.iht.com/articles/2006/07/12/asia/web.0712india.php">http://www.iht.com/articles/2006/07/12/asia/web.0712india.php</a></p>
</blockquote>]]>
      </content:encoded>
      <wp:comment>
        <wp:comment_id>23</wp:comment_id>
        <wp:comment_author>Sandhya</wp:comment_author>
        <wp:comment_author_email></wp:comment_author_email>
        <wp:comment_date_gmt>2006-06-17 03:57:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[I completely agree with you Rajsekar. This is so true! There not going to achieve anything nor go any where..  ]]>
        </wp:comment_content>
      </wp:comment>
    </item>
    <item>
      <title>Centering elements on a canvas in WPF</title>
      <link>http://ghost-nerd.azurewebsites.net/centeringelementsonacanvasinwp</link>
      <dsq:thread_identifier>4</dsq:thread_identifier>
      <wp:post_date_gmt>2009-02-26 06:12:04</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>While I was fiddling around with WPF in general I noticed that when I dropped inane little circles and boxes onto a canvas I'd never be able to center it inside the containing canvas just right. If you try the following XAML in the excellent <a href="http://www.kaxaml.com/">Kaxaml</a> tool for instance:</p>

<pre><code>&lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Width="300"
        Height="300"
        Title="Centered?"&gt;
  &lt;Grid&gt;  
    &lt;Canvas Background="Black" Width="300" Height="300"&gt;
      &lt;Ellipse Width="50"
               Height="50"
               Canvas.Left="125"
               Canvas.Top="125"
               Fill="LightGray"
               x:Name="ellipse" /&gt;
    &lt;/Canvas&gt;
  &lt;/Grid&gt;
&lt;/Window&gt;
</code></pre>

<p>Here's what you see:</p>

<p><img src="http://blogorama.nerdworks.in/images/center1.png" alt="Off center" /></p>

<p>Clearly the ellipse is not positioned in the center of the containing canvas even though the point <code>(125,125)</code> should in fact have done so. If however you set the value <code>None</code> for the <code>WindowStyle</code> attribute of the <code>Window</code> tag like so (note the code in bold):</p>

<pre><code>&lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Width="300"
        Height="300"
        Title="Centered?"
        WindowStyle="None"&gt;
  &lt;Grid&gt;  
    &lt;Canvas Background="Black" Width="300" Height="300"&gt;
      &lt;Ellipse Width="50"
               Height="50"
               Canvas.Left="125"
               Canvas.Top="125"
               Fill="LightGray"
               x:Name="ellipse" /&gt;
    &lt;/Canvas&gt;
  &lt;/Grid&gt;
&lt;/Window&gt;
</code></pre>

<p>Then here's what you get (you'll have to hit <code>Alt+F4</code> to close this window):</p>

<p><img src="http://blogorama.nerdworks.in/images/center2.png" alt="Centered but no title bar" /></p>

<p>As you can probably tell, the circle seems nicely centered now. The problem therefore is the title bar. In the first XAML code snippet above I had given a dimension of <code>300x300</code> for the canvas. Accounting for the height of the title bar, this causes the canvas to actually extend beyond the window border which of course, gets clipped by the OS. In order to trim the canvas to size I decided to put it inside a dock panel and remove the explicit width/height specification. Here's what I came up with:</p>

<pre><code>&lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Width="300"
        Height="300"
        Title="Centered?"&gt;
  &lt;DockPanel&gt;  
    &lt;Canvas Background="Black"&gt;
      &lt;Ellipse Width="50"
               Height="50"
               Canvas.Left="125"
               Canvas.Top="125"
               Fill="LightGray"
               x:Name="ellipse" /&gt;
    &lt;/Canvas&gt;
  &lt;/DockPanel&gt;
&lt;/Window&gt;
</code></pre>

<p>This produced a window that looked like this:</p>

<p><img src="http://blogorama.nerdworks.in/images/center3.png" alt="Again off center" /></p>

<p>Again, not quite in the center of the client area. The issue here is of course that now, the canvas size is not <code>300x300</code> which means the point <code>(125,125)</code> should not be the top left co-ordinate of the ellipse if we want it centered. Here's a little XAML that shows you the real dimensions of the canvas.</p>

<pre><code>&lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Width="300"
        Height="300"
        Title="Centered?"&gt;
  &lt;DockPanel&gt;  
    &lt;Canvas Background="Black" x:Name="canvas"&gt;
      &lt;Ellipse Width="50"
               Height="50"
               Canvas.Left="125"
               Canvas.Top="125"
               Fill="LightGray"
               x:Name="ellipse" /&gt;
      &lt;TextBlock Text="{Binding ElementName=canvas, Path=ActualWidth}"
                 Canvas.Left="10"
                 Canvas.Top="10"
                 Foreground="White"/&gt;
      &lt;TextBlock Text=", "
                 Canvas.Left="30"
                 Canvas.Top="10"
                 Foreground="White"/&gt;
      &lt;TextBlock Text="{Binding ElementName=canvas, Path=ActualHeight}"
                 Canvas.Left="38"
                 Canvas.Top="10"
                 Foreground="White"/&gt;
    &lt;/Canvas&gt;
  &lt;/DockPanel&gt;
&lt;/Window&gt;
</code></pre>

<p>Here's what the window that this produces looks like:</p>

<p><img src="http://blogorama.nerdworks.in/images/center4.png" alt="Actual dimensions of the canvas" /></p>

<p>The correct top-left co-ordinate to center the ellipse therefore is <code>(121,108)</code>. The straightforwad solution seems to be to just handle it in code and be done with it. For example, the following code in the window class's constructor manages to do the job:</p>

<pre><code>this.Loaded += (sender, e) =&gt;
{
    Canvas.SetLeft(ellipse, (canvas.ActualWidth - ellipse.ActualWidth) / 2);
    Canvas.SetTop(ellipse, (canvas.ActualHeight - ellipse.ActualHeight) / 2);
};
</code></pre>

<p>But this isn't quite the WPF way of doing things and besides if you resized the window the ellipse would again be off center and you'd need to write more code to handle the window resize events and re-layout the ellipse in response. Ideally, these sort of things should be handled using the WPF binding system. At first I figured this should be really easy to do with XAML like this:</p>

<pre><code>&lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Width="300"
        Height="300"
        Title="Centered?"&gt;
  &lt;DockPanel&gt;  
    &lt;Canvas Background="Black" x:Name="canvas"&gt;
      &lt;Ellipse Width="50"
               Height="50"
               Canvas.Left="{Binding ElementName=canvas, Path=((ActualWidth - 50)/2)}"
               Canvas.Top="{Binding ElementName=canvas, Path=((ActualHeight - 50)/2)}"
               Fill="LightGray"
               x:Name="ellipse" /&gt;
    &lt;/Canvas&gt;
  &lt;/DockPanel&gt;
&lt;/Window&gt;
</code></pre>

<p>Here's what this produced:</p>

<p><img src="http://blogorama.nerdworks.in/images/center5.png" alt="Passing expressions to binding path does not work" /></p>

<p>As it turns out one cannot use expressions for the value of the <code>Path</code> attribute of the <code>Binding</code> markup extension! Some folks over at <a href="http://www.blendables.com/">blendables.com</a> have however solved this problem by developing a custom WPF markup extension that allows the specification of expressions. You can get it <a href="http://www.blendables.com/files/folders/essentials_documentation/entry148.aspx">here</a>. But this seemed a bit extreme given the circumstances. The alternative as it happens is to use multi-binding with a custom value converter. First we write a class that implements <code>IMultiValueConverter</code> like so:</p>

<pre><code>public class HalfValueConverter : IMultiValueConverter
{
    #region IMultiValueConverter Members

    public object Convert(object[] values,
                          Type targetType,
                          object parameter,
                          CultureInfo culture)
    {
        if (values == null || values.Length &lt; 2)
        {
            throw new ArgumentException(
                "HalfValueConverter expects 2 double values to be passed" +
                " in this order -&gt; totalWidth, width",
                "values");
        }

        double totalWidth = (double)values[0];
        double width = (double)values[1];
        return (object)((totalWidth - width) / 2);
    }

    public object[] ConvertBack(object value,
                                Type[] targetTypes,
                                object parameter,
                                CultureInfo culture)
    {
        throw new NotImplementedException();
    }

    #endregion
}
</code></pre>

<p>And then we use the following XAML (you cannot do this in Kaxaml because it does not support writing code-behind) to get the job done!</p>

<pre><code>&lt;Window x:Class="CenterWin.Window1"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Centered?"
        Height="300"
        Width="300"
        Background="Black"
        xmlns:local="clr-namespace:CenterWin"&gt;
    &lt;DockPanel&gt;
        &lt;DockPanel.Resources&gt;
            &lt;local:HalfValueConverter x:Key="HalfValue" /&gt;
        &lt;/DockPanel.Resources&gt;
        &lt;Canvas x:Name="canvas"&gt;
            &lt;Ellipse Width="50"
                     Height="50"
                     Fill="LightGray"
                     x:Name="ellipse"&gt;
                &lt;Canvas.Left&gt;
                    &lt;MultiBinding Converter="{StaticResource HalfValue}"&gt;
                        &lt;Binding ElementName="canvas" Path="ActualWidth" /&gt;
                        &lt;Binding ElementName="ellipse" Path="ActualWidth" /&gt;
                    &lt;/MultiBinding&gt;
                &lt;/Canvas.Left&gt;
                &lt;Canvas.Top&gt;
                    &lt;MultiBinding Converter="{StaticResource HalfValue}"&gt;
                        &lt;Binding ElementName="canvas" Path="ActualHeight" /&gt;
                        &lt;Binding ElementName="ellipse" Path="ActualHeight" /&gt;
                    &lt;/MultiBinding&gt;
                &lt;/Canvas.Top&gt;
            &lt;/Ellipse&gt;
        &lt;/Canvas&gt;
    &lt;/DockPanel&gt;
&lt;/Window&gt;
</code></pre>

<p>That's it! Now you can resize to your heart's content and the WPF binding system will take care of all the updates. Here's a screenshot of the window after resizing it a bit.</p>

<p><img src="http://blogorama.nerdworks.in/images/center6.png" alt="Nicely centered!" /></p>]]>
      </content:encoded>
      <wp:comment>
        <wp:comment_id>84</wp:comment_id>
        <wp:comment_author>Moby Disk</wp:comment_author>
        <wp:comment_author_email>miscorder1@mobydisk.com</wp:comment_author_email>
        <wp:comment_date_gmt>2009-06-29 05:41:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[An easier way is to put a Grid inside the Canvas, since Grid allows you to place things relatively or centered.

The only trick is that you must either specify the dimensions of the Grid, or you must do this:

&lt;Canvas Width=... Height=... x:Name=&quot;ParentCanvas&quot;&gt;

   &lt;!-- Place absolutely positioned items here --&gt;

   &lt;Grid
      Width=&quot;{Binding ElementName=ParentCanvas, Path=ActualWidth}
      Height=&quot;{Binding ElementName=ParentCanvas, Path=ActualHeight}&quot;&gt;

      &lt;!-- Place centered items here --&gt;
   &lt;/Grid&gt;
&lt;/Canvas&gt;

Sometimes I do this the other way around, with the Canvas in the Grid.  This is so common to me I'm almost going to call it a WPF Pattern.]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>91</wp:comment_id>
        <wp:comment_author>Junior Mayhe</wp:comment_author>
        <wp:comment_author_email>mayhe.jr@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2009-08-28 08:28:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[I have a Canvas, and a nested Grid.

To center this grid on canvas I had to deal with screen resolution and grid size.

private void grid1_Loaded(object sender, RoutedEventArgs e)
        {
            Grid g = sender as Grid;
            double newX = g.ActualWidth &gt; SystemParameters.PrimaryScreenWidth ? SystemParameters.PrimaryScreenWidth : g.ActualWidth;
            double newY = g.ActualHeight &gt; SystemParameters.PrimaryScreenHeight ? SystemParameters.PrimaryScreenHeight : g.ActualHeight;
            
            Canvas.SetTop(g, newY);
            Canvas.SetLeft(g, newX );
        }]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>92</wp:comment_id>
        <wp:comment_author>Junior Mayhe</wp:comment_author>
        <wp:comment_author_email>mayhe.jr@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2009-08-28 09:29:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Errata:

Canvas.SetLeft(g, (SystemParameters.PrimaryScreenWidth - g.Width) / 2);
            Canvas.SetTop(g, (SystemParameters.PrimaryScreenHeight - g.Height) / 2);]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>93</wp:comment_id>
        <wp:comment_author>UKToot</wp:comment_author>
        <wp:comment_author_email>andy@bowitsolutions.co.uk</wp:comment_author_email>
        <wp:comment_date_gmt>2010-01-22 00:54:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Now that is a great piece of code.  Well done &amp; thanks very much for sharing.  Genius.]]>
        </wp:comment_content>
      </wp:comment>
    </item>
    <item>
      <title>Ultimate list of developer/power user tools</title>
      <link>http://ghost-nerd.azurewebsites.net/ultimatelistofdeveloperpowerus</link>
      <dsq:thread_identifier>5</dsq:thread_identifier>
      <wp:post_date_gmt>2006-08-11 12:57:24</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>Find <em>Scott Hanselman's 2006 Ultimate Developer and Power Users Tool List for Windows</em> here:</p>

<blockquote>
  <p><a href="http://www.hanselman.com/tools">http://www.hanselman.com/tools</a></p>
</blockquote>

<p>Who is Scott Hanselman eh? Err.. I don't really know but the tools that he lists I know (well, some of them at least)! From his top 10 life/work changing utilities I am already using 5 (<a href="http://notepad-plus.sourceforge.net/">Notepad++</a>, <a href="http://www.aisto.com/roeder/dotnet/">Lutz's Reflector for .NET</a>, <a href="http://desktop.google.com/">Google Desktop</a>, <a href="http://www.sysinternals.com/Utilities/ZoomIt.html">ZoomIt</a> and various other <a href="http://www.sysinternals.com/">Sysinternals</a> tools) and I am going to give his other suggestions a try as they sound like they're going to be equally super cool!</p>

<p>Put simply these are tools that you cannot afford to leave home without!</p>]]>
      </content:encoded>
    </item>
    <item>
      <title>JavaScript function throttling and debouncing</title>
      <link>http://ghost-nerd.azurewebsites.net/javascriptfunctionthrottlingan</link>
      <dsq:thread_identifier>6</dsq:thread_identifier>
      <wp:post_date_gmt>2011-01-15 01:14:33</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p><a href="http://benalman.com/">Ben Alman</a> has written up a useful little <a href="http://jquery.com/">jQuery</a> plugin for addressing situations where a JavaScript function in your web page is getting called a tad too frequently and you want to reduce the frequency to more manageable levels. He talks about the plugin over <a href="http://benalman.com/projects/jquery-throttle-debounce-plugin/">here</a>. I figured it'd be fun to produce my own (possibly naive) implementations of the idea just for kicks and generally talk about it here (you might want to use Ben Alman's implementation for production code though - this article simply talks about one possible implementation of the idea). First, what exactly do we mean by <em>throttling</em> and <em>debouncing</em>?</p>

<h3 id="throttling">Throttling</h3>

<p>Imagine a scenario where you have an event handler written for some event that tends to get raised a bit too often. Handlers for the mouse move and the window scroll events are good examples. Imagine that you need to do something heavyweight from these handlers - like making an <a href="http://en.wikipedia.org/wiki/Ajax_(programming)">AJAX</a> call. In this case, you probably do not really need to make that big expensive AJAX call <strong>every single time</strong> the event is fired. Things would probably work just as fine if the function was called, say, no more than 3 times a second. Here's where function throttling helps. The idea is to basically build a thin wrapper function that can moderate calls to your actual routine by providing an intercepting routine that rations invocations based on call frequency. Here's one way how you might implement the throttling routine:</p>

<pre><code>//
// Throttle calls to "callback" routine and ensure that it
// is not invoked any more often than "delay" milliseconds.
//
function throttle(delay, callback) {
    var previousCall = new Date().getTime();
    return function() {
        var time = new Date().getTime();

        //
        // if "delay" milliseconds have expired since
        // the previous call then propagate this call to
        // "callback"
        //
        if ((time - previousCall) &gt;= delay) {
            previousCall = time;
            callback.apply(null, arguments);
        }
    };
}
</code></pre>

<p>And here's how you might choose to use the function from a web page to register a handler for the window's scroll event and make sure that it is not invoked more than once every 300 milliseconds.</p>

<pre><code>window.onscroll = throttle(300, function() {
    //
    // Big expensive AJAX call here
    //
});
</code></pre>

<p>Or if you are a jQuery kind of person then you might do it this way:</p>

<pre><code>$(window).scroll(throttle(300, function() {
    //
    // Big expensive AJAX call here
    //
}));
</code></pre>

<p>Now one thing that you might have noted about this implementation is that it is a bit lossy - in that the data that is passed to the event handler tends to go wherever it is that ignored data like to go whenever the wrapper routine decides to not propagate the call to the actual routine. In this case the scroll position information is lost. In most cases, this is of no significance and you're probably quite happy knowing the current scroll position when the throttled call does take place. But if you happen to have some weird requirement where no piece of data can be lost and would like the data from the intermediary calls to be accumulated and passed to the callback, well, then, here's another version of throttle that does exactly that. This implementation simply accumulates all the data and makes it available to the target routine via a property called "data" in the "this" object of the final callback routine.</p>

<pre><code>//
// Throttle calls to "callback" routine and ensure that it
// is not invoked any more often than "delay" milliseconds.
// Accumulates all data passed to the callback routine during
// calls that are not passed on to "callback" and then hands
// it off to "callback" via a property called "data" on the
// context object for that call.  "data" is a (possibly jagged)
// 2 dimensional array containing the data accumulated during
// all the calls to the throttled function since the previous
// expiration of "delay" milliseconds.
//
function throttle(delay, callback, accumulateData) {
    var previousCall = null;
    var theData = [];
    return function () {
        var time = new Date().getTime();

        //
        // accumulate arguments in case caller is interested
        // in that data
        //
        if (accumulateData) {
            var arr = [];
            for (var i = 0; i &lt; arguments.length; ++i)
                arr.push(arguments[i]);
            theData.push(arr);
        }
        if (!previousCall ||
            (time - previousCall) &gt;= delay) {
            previousCall = time;
            callback.apply((accumulateData) ? { data: theData} : null, arguments);
            theData = []; // clear the data array
        }
    };
}
</code></pre>

<p>In case you happen to be that one other person on the internet who I hear has an interest in Common Lisp <em>and</em> JavaScript at the same time, then maybe you'd appreciate a Common Lisp version of the throttling routine (the version that ignores data passed to the routine during intermediary calls that are not propagated to the actual callback).</p>

<pre><code>;;
;; throttles invocations to routine identified by "callback"
;; so that it is invoked no more frequently than "delay" interval;
;; "delay" is interpreted as being a measure of "internal-time-units-per-second"
;; units;
;;
(defun throttle (delay callback)
    (let ((previousCall nil))
        #'(lambda (&amp;rest p)
            (if (or (not previousCall)
                    (&gt;= (- (get-internal-real-time) previousCall) delay))
                (progn
                    (setf previousCall (get-internal-real-time))
                    (apply callback p))))))
</code></pre>

<h3 id="debouncing">Debouncing</h3>

<p>Debouncing is also a technique for managing the frequency of calls that a routine receives. The difference between <em>debouncing</em> and call <em>throttling</em> might seem a bit subtle at first, but it really isn't. While <em>throttling</em> is about simply restricting the frequency of calls that a function receives to a fixed time interval, i.e. ensuring that the target function is not invoked more often than the specified delay, <em>debouncing</em> is about coalescing multiple calls that happen on a given routine so that repeated calls that occur before the expiration of a specific time duration are ignored. OK, that sounds confusing to me and I just wrote it. Let's take a sample scenario.</p>

<p>Imagine that you're writing some kind of online collaboration app and you want to provide a multi-user whiteboard feature of some sort that'll let multiple participants doodle on the whiteboard simultaneously for some reason. Now, a couple of approaches immediately spring to mind:</p>

<ul>
<li>Capture mouse co-ordinates as the lines are being drawn and broadcast them to all the participants. This approach provides instant feedback of the doodling process as it takes place but results in an exponential number of network packets being transmitted between participants and could also result in overloading the server with requests. Clearly, this is not going to scale.</li>
<li>Wait for complete line segments to be drawn before transmitting the path co-ordinates to everybody. Admittedly, this approach is a pretty decent one and something that users are quite likely to find as being an acceptable compromise. Having said that however, I think we can do better! The doodling process usually involves little breaks as lines are being drawn - I might draw a path and then pause a bit before deciding where to head off next. Wouldn't it be great if we could leverage those "pauses" to quickly dispatch the co-ordinates to everybody? That's exactly what <em>debouncing</em> allows you to do.</li>
</ul>

<p>Debouncing is the process of translating multiple calls to a function that occur during a given time period to a single call (so far this is exactly the same as call <em>throttling</em>) with the added caveat that the receipt of a new call to the function before the expiration of the specified delay results in a resetting of the time to wait before a call to the actual routine can be propagated next. For instance, if the established delay is 250ms, then every call to the debounced routine before the expiration of 250ms results in a fresh wait being initiated for another 250ms. Once 250ms expire, a single call is made to the actual routine. Here's a sample implementation:</p>

<pre><code>//
// Debounce calls to "callback" routine so that multiple calls
// made to the event handler before the expiration of "delay" are
// coalesced into a single call to "callback". Also causes the
// wait period to be reset upon receipt of a call to the
// debounced routine.
//
function debounce(delay, callback) {
    var timeout = null;
    return function () {
        //
        // if a timeout has been registered before then
        // cancel it so that we can setup a fresh timeout
        //
        if (timeout) {
            clearTimeout(timeout);
        }
        var args = arguments;
        timeout = setTimeout(function () {
            callback.apply(null, args);
            timeout = null;
        }, delay);
    };
}
</code></pre>

<p>You might use this routine like so to debounce the mouse move event handler:</p>

<pre><code>window.mousemove = debounce(250, function() {
    //
    // Big expensive AJAX call here
    //
});
</code></pre>

<p>As before, this should work just as well if you're into jQuery:</p>

<pre><code>$(window).mousemove(debounce(250, function(event) {
    //
    // Big expensive AJAX call here
    //
}));
</code></pre>

<p>Just as with throttling, the implementation given above results in the data that was passed to the event handler during calls that end up getting ignored being lost. In case you need access to all the data when the call is finally propagated to the target routine, then you might want to go with the following version of debounce:</p>

<pre><code>//
// Debounce calls to "callback" routine so that multiple calls
// made to the event handler before the expiration of "delay" are
// coalesced into a single call to "callback". Also causes the
// wait period to be reset upon receipt of a call to the
// debounced routine. Accumulates all data passed to the callback
// routine during calls that are not passed on to "callback" and
// then hands it off to "callback" via a property called "data"
// on the context object for that call.  "data" is a (possibly
// jagged) 2 dimensional array containing the data accumulated
// during all the calls to the debounced function since the
// previous expiration of "delay" milliseconds.
//
function debounce(delay, callback, accumulateData) {
    var timeout = null;
    var theData = [];
    return function () {
        //
        // accumulate arguments in case caller is interested
        // in that data
        //
        if (accumulateData) {
            var arr = [];
            for (var i = 0; i &lt; arguments.length; ++i)
                arr.push(arguments[i]);
            theData.push(arr);
        }

        //
        // if a timeout has been registered before then
        // cancel it so that we can setup a fresh timeout
        //
        if (timeout) {
            clearTimeout(timeout);
        }
        var args = arguments;
        timeout = setTimeout(function () {
            callback.apply((accumulateData) ? { data: theData } : null, args);
            theData = []; // clear the data array
            timeout = null;
        }, delay);
    };
}
</code></pre>

<p>And here's an example showing how you might use this version of debounce for handling the mouse move event (assume that <code>print</code> is a function that logs data to a console of some kind):</p>

<pre><code>$(window).mousemove(debounce(250, function (event) {
    print("Mouse moved: ");
    for (var i = 0; i &lt; this.data.length; ++i) {
        print("(" + this.data[i][0].pageX + ", " + this.data[i][0].pageY + ")");
    }
}, true));
</code></pre>

<p>What makes the implementation somewhat straightforward is the judicious use of <a href="http://blogorama.nerdworks.in/entry-JavaScriptclosuresactlikeimpli.aspx">JavaScript closures</a>. In both the implementations, closures allow us to track local state on a per function basis across multiple calls without having to resort to global variables and such. Pretty neat in my opinion!</p>]]>
      </content:encoded>
    </item>
    <item>
      <title>Enabling JSONP calls on ASP.NET MVC</title>
      <link>http://ghost-nerd.azurewebsites.net/enablingjsonpcallsonaspnetmvc</link>
      <dsq:thread_identifier>7</dsq:thread_identifier>
      <wp:post_date_gmt>2009-09-19 08:45:09</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p><a href="http://en.wikipedia.org/wiki/Json#JSONP">JSONP</a> is the technique of making cross-domain HTTP requests via JavaScript circumventing browser security restictions on requests that return data in the JSON format. By cross-domain, we refer to the practice of making HTTP requests on URLs that refer to resources residing on a domain other than the one from where the page being viewed/executed was loaded from. You'll find a good description of what JSONP is all about <a href="http://www.developria.com/2009/03/what-in-the-heck-is-jsonp-and.html">here</a>. Briefly, the technique exploits a browser back-door where the <code>SRC</code> attribute on a <code>SCRIPT</code> tag is allowed to be a "foreign" URL and the browser will download the code and evaluate it. But then again, this is perhaps not so much a <em>back-door</em> as a <em>feature</em> that allows you to build mash-ups by composing code that draws on functionality hosted on different servers. If this were not allowed then something like the <a href="http://en.wikipedia.org/wiki/Content_delivery_network">Content Delivery Networks (CDN)</a> would just not work. In fact this blog that you're reading right now loads the <a href="http://jquery.com/">jQuery</a> JavaScript library via the <a href="http://code.google.com/intl/hr/apis/ajaxlibs/">Google CDN</a>.</p>

<p>Here's an example of this in practice - I've loaded up the 5 most "<a href="http://www.flickr.com/services/api/flickr.interestingness.getList.html">interesting</a>" photos uploaded on <a href="http://www.flickr.com/">Flickr</a> in the last day or so below:</p>

<script>  
function waitForDocumentReady(callback) {  
    var id = setInterval(function() {
        if(document.readyState !== "complete") {
            return;
        }

        clearInterval(id);
        callback(jQuery);
    }, 500);
}
</script>

<script>  
waitForDocumentReady(function() {  
        //
        // Flickr REST url
        //
        var url = "ht" + "tp://api.flickr.com/services/rest/?";

        //
        // My Flickr API key
        //
        var api_key = "bf3b5784792dcda75692837db1b6b0e5";

        //
        // build a flicker url from a photo object
        //
        function buildPhotoUrl(photo) {
            return "ht" + "tp://farm" + photo.farm + ".static.flickr.com/" + photo.server + "/" + photo.id + "_" + photo.secret + "_t.jpg";
        }

        //
        // get interesting photos
        //
        function getInterestingPhotos() {
            //
            // build the URL
            //
            var call = url + "method=flickr.interestingness.getList&api_key=" + api_key + "&per_page=5&page=1&format=json&jsoncallback=?";

            //
            // make the ajax call
            //
            $.getJSON(call, function(rsp) {
                if (rsp.stat != "ok") {
                    //
                    // something went wrong!
                    //
                    $("#interesting_photos").append("<label style=\"color:red; font-style:italic\">Whoops!  It didn't work!" +
                        "  This is embarrassing!  Here's what Flickr had to say about this - " +
                        rsp.message + "</label>");
                }
                else {
                    //
                    // build the html
                    //
                    var html = "";
                    $.each(rsp.photos.photo, function() {
                        var photo = this;
                        html += "<span><img style='display: inline;' src=\"" + buildPhotoUrl(photo) + "\" title=\"" +
                                photo.title + "\" alt=\"" + photo.title + "\" /></span>&nbsp;";
                    });

                    //
                    // append this to the div
                    //
                    $("#interesting_photos").append(html);
                }
            });
        }

        //
        // get the photos
        //
        $(getInterestingPhotos);
});
</script>

<div id="interesting_photos"></div>

<p>And here's the code that accomplishes this with a little <a href="http://jquery.com/">jQuery</a> magic:</p>

<pre><code>//
// Flickr REST url
//
var url = "http://api.flickr.com/services/rest/?";

//
// My Flickr API key
//
var api_key = "&lt;&lt;your flickr api key here&gt;&gt;";

//
// build a flicker url from a photo object
//
function buildPhotoUrl(photo) {
    return "http://farm" + photo.farm +
           ".static.flickr.com/" + photo.server + "/" +
           photo.id + "_" + photo.secret + "_t.jpg";
}

//
// get interesting photos
//
function getInterestingPhotos() {
    //
    // build the URL
    //
    var call = url + "method=flickr.interestingness.getList&amp;api_key=" +
               api_key +
               "&amp;per_page=5&amp;page=1&amp;format=json&amp;jsoncallback=?";

    //
    // make the ajax call
    //
    $.getJSON(call, function(rsp) {
        if (rsp.stat != "ok") {
            //
            // something went wrong!
            //
            $("#interesting_photos").append(
                "&lt;label style=\"color:red\"&gt;Whoops!  It didn't work!" +
                "  This is embarrassing!  Here's what Flickr had to " +
                " say about this - " + rsp.message + "&lt;/label&gt;");
        }
        else {
            //
            // build the html
            //
            var html = "";
            $.each(rsp.photos.photo, function() {
                var photo = this;
                html += "&lt;span&gt;&lt;img src=\"" + buildPhotoUrl(photo) +
                        "\" title=\"" + photo.title + "\" alt=\"" +
                        photo.title + "\" /&gt;&lt;/span&gt; ";
            });

            //
            // append this to the div
            //
            $("#interesting_photos").append(html);
        }
    });
}

//
// get the photos
//
$(getInterestingPhotos);
</code></pre>

<p>The basic idea is to dynamically add a <code>SCRIPT</code> tag to the DOM where the <code>SRC</code> attribute is pointing to the external URL where the data that we want resides. Upon encountering a new <code>SCRIPT</code> node, the browser immediately starts loading the code and evaluating it (and also freezes pretty much everything else in the browser while it is doing this!). If we can have the external resource render a call to a function that we define (or to a well-known function name) in the script that it produces then we can effectively have a callback routine invoked when the data is received from the foreign domain. The function to be called when the script dynamically loads is usually passed in as a query string parameter in the <code>GET</code> request or can be a function name that is mandated by the 3rd party site. Flickr for example defaults to rendering a call to a function called <code>jsonFlickrApi</code> but allows you to override this by passing a different name via the <code>jsoncallback</code> query string parameter.</p>

<p><strong>jQuery</strong> has direct support for JSONP in that if you include a <code>callback=?</code> parameter in the AJAX URL for the <a href="http://docs.jquery.com/Ajax/jQuery.getJSON#urldatacallback"><code>getJSON</code></a> call then it will replace the <code>?</code> with a dynamically generated global JavaScript function name that it also defines. The word <code>callback</code> can be replaced with anything else as we did above by using <code>jsoncallback</code>. All the grunt work of dynamically adding <code>SCRIPT</code> tags to the DOM is done by jQuery.</p>

<p>Now, imagine that you designed your own little REST based service using ASP.NET MVC and have opted to provide JSON as one of the data output formats and wish to support JSONP requests. This basically means that you simply need to wrap your JSON output in a call to a user-supplied or a standard JavaScript function. So instead of rendering something like this out to the client:</p>

<pre><code>{
    photos : [
        photo : {
            id : 232992,
            secret : "bAC980980c09c08a0ef"
        }
    ],
    page : 1,
    total : 500,
    photosPerPage : 10
}
</code></pre>

<p>You want to render something like this:</p>

<pre><code>callback({
    photos : [
        photo : {
            id : 232992,
            secret : "bAC980980c09c08a0ef"
        }
    ],
    page : 1,
    total : 500,
    photosPerPage : 10
});
</code></pre>

<p>Where <code>callback</code> is the name of the JavaScript function defined by the client that needs to be invoked when the script is evaluated by the browser. If you wanted your ASP.NET MVC controllers to support this, how would you do it? The first approach I took was to simply define a custom <a href="http://msdn.microsoft.com/en-us/library/system.web.mvc.actionresult.aspx"><code>ActionResult</code></a> class that would produce the correct script. Here's what this looks like:</p>

<pre><code>/// &lt;summary&gt;
/// Renders result as JSON and also wraps the JSON in a call
/// to the callback function specified in "JsonpResult.Callback".
/// &lt;/summary&gt;
public class JsonpResult : JsonResult
{
    /// &lt;summary&gt;
    /// Gets or sets the javascript callback function that is
    /// to be invoked in the resulting script output.
    /// &lt;/summary&gt;
    /// &lt;value&gt;The callback function name.&lt;/value&gt;
    public string Callback { get; set; }

    /// &lt;summary&gt;
    /// Enables processing of the result of an action method by a
    /// custom type that inherits from
    /// &lt;see cref="T:System.Web.Mvc.ActionResult"/&gt;.
    /// &lt;/summary&gt;
    /// &lt;param name="context"&gt;The context within which the
    /// result is executed.&lt;/param&gt;
    public override void ExecuteResult(ControllerContext context)
    {
        if (context == null)
            throw new ArgumentNullException("context");

        HttpResponseBase response = context.HttpContext.Response;
        if (!String.IsNullOrEmpty(ContentType))
            response.ContentType = ContentType;
        else
            response.ContentType = "application/javascript";

        if (ContentEncoding != null)
            response.ContentEncoding = ContentEncoding;

        if (Callback == null || Callback.Length == 0)
        {
            Callback = context.HttpContext.
              Request.QueryString["callback"];
        }

        if (Data != null)
        {
            // The JavaScriptSerializer type was marked as obsolete
            // prior to .NET Framework 3.5 SP1 
#pragma warning disable 0618
            JavaScriptSerializer serializer = 
                 new JavaScriptSerializer();
            string ser = serializer.Serialize(Data);
            response.Write(Callback + "(" + ser + ");");
#pragma warning restore 0618
        }
    }
}
</code></pre>

<p>Now you can simply return a <code>JsonpResult</code> (note the p before the "R" in "Result") from your action methods instead of <code>JsonResult</code> and everything should just work. Client's would indicate that this is a JSONP request by appending a query string parameter called <code>callback</code> to the request with the name of a JavaScript function that is to be called. I wasn't however, entirely happy with this situation as this would mean that I'd have to go and change the return type of <em>all</em> my action methods to return a <code>JsonpResult</code> instead of a <code>JsonResult</code>. And also update the code that instantiated <code>JsonResult</code>. I wanted a less disruptive solution if you will.</p>

<p>It is precisely for scenarios such as this that the ASP.NET MVC framework includes extension points in the form of <a href="http://msdn.microsoft.com/en-us/library/dd410209.aspx">action filters</a>. Action filters are basically hooks that you can define to intercept and enhance request processing in various ways. ASP.NET MVC allows you to define filters that get called <em>before</em> and/or <em>after</em> the action method is invoked and also <em>before</em> and/or <em>after</em> the <code>ExecuteResult</code> method on the <code>ActionResult</code> is invoked. Action filters are defined as .NET custom attribute classes that inherit from <a href="http://msdn.microsoft.com/en-us/library/system.web.mvc.actionfilterattribute.aspx">ActionFilterAttribute</a>. <code>ActionFilterAttribute</code> defines 4 virtual methods that you can override to hook into the request processing pipeline at the right juncture. The <code>OnActionExecuted</code> method for instance is invoked immediately <em>after</em> the action method has been invoked and gives you a chance to further process the returned result. This would perfectly suit our purpose here where we wish to conditionally supplant the <code>JsonResult</code> object being returned from the action method with a <code>JsonpResult</code> instead. Here's what I came up with:</p>

<pre><code>public class JsonpFilterAttribute : ActionFilterAttribute
{
    public override void OnActionExecuted(
            ActionExecutedContext filterContext)
    {
        if(filterContext == null)
            throw new ArgumentNullException("filterContext");

        //
        // see if this request included a "callback" querystring
        // parameter
        //
        string callback = filterContext.HttpContext.
                  Request.QueryString["callback"];
        if (callback != null &amp;&amp; callback.Length &gt; 0)
        {
            //
            // ensure that the result is a "JsonResult"
            //
            JsonResult result = filterContext.Result as JsonResult;
            if (result == null)
            {
                throw new InvalidOperationException(
                    "JsonpFilterAttribute must be applied only " +
                    "on controllers and actions that return a " +
                    "JsonResult object.");
            }

            filterContext.Result = new JsonpResult
            {
                ContentEncoding = result.ContentEncoding,
                ContentType = result.ContentType,
                Data = result.Data,
                Callback = callback
            };
        }
    }
}
</code></pre>

<p>As is perhaps self-evident, we simply check if the query string included a parameter called <code>callback</code> and if it did, then we supplant the <code>Result</code> object in <code>filterContext</code> with a new <code>JsonpResult</code> instance. This approach allows us to enable JSONP processing on a controller or an action method by simply tagging on the <code>JsonpFilter</code> attribute. If I wanted all of my methods in the controller to support JSONP then, I can do this:</p>

<pre><code>[JsonpFilter]
public class DoofusController : Controller
{
    //
    // all your action methods here
    //
}
</code></pre>

<p>Or if I wanted it to work with only a specific action method then I'd do this:</p>

<pre><code>public class DoofusController : Controller
{
    [JsonpFilter]
    public JsonResult DoTheThing(string data, string moreData)
    {
        return new JsonResult
        {
            Data = FetchSomeData(data, moreData)
        };
    }
}
</code></pre>

<p>ASP.NET MVC is kind of cool eh?! :-P</p>]]>
      </content:encoded>
      <wp:comment>
        <wp:comment_id>95</wp:comment_id>
        <wp:comment_author>lau&apos;</wp:comment_author>
        <wp:comment_author_email>williethewimp@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2010-02-09 03:00:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks a lot!
I was getting confused with all this JSON and JSONP thing and it helped clarify it.
I tested your code and it works great.]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>96</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2010-02-09 03:22:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks for pointing out the typo lau.  I've fixed it now.]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>97</wp:comment_id>
        <wp:comment_author>Yuval Kaplan</wp:comment_author>
        <wp:comment_author_email>yuvalkn@orange.net.il</wp:comment_author_email>
        <wp:comment_date_gmt>2010-03-25 06:43:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks for making this issue so clear and simple. 
It is truly the correct JSONP solution for MVC.
Lots of posts on JSNOP seem to over complicate the issue while you have given a great solution through a very simple example.
Well done!]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>98</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2010-03-25 07:26:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Glad you liked it Yuval!  Thanks for the comment.]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>100</wp:comment_id>
        <wp:comment_author>jim tollan</wp:comment_author>
        <wp:comment_author_email>jimibt@dsl.pipex.com</wp:comment_author_email>
        <wp:comment_date_gmt>2010-04-23 01:51:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Ranju,

thank you for this timely post. i've been looking for a way to leverage mvc functionality from a php site that needs to utilise lookup data from it's sister site. this approach was one that i had imagined i'd like to do but didn't have the technical details on how to implement it.

perfect, thank you...

jim ]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>101</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2010-04-23 05:54:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[You're welcome Jim.  Thanks for your comment!]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>102</wp:comment_id>
        <wp:comment_author>Phil Derksen</wp:comment_author>
        <wp:comment_author_email>pderksen@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2010-05-08 09:45:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Great post. Helped a ton trying to do a JSON API cross-domain in an app.

I'm using ASP.NET MVC 2, so I had to add one thing to the JsonpFilterAttribute code to get it to work: JsonRequestBehavior = JsonRequestBehavior.AllowGet (see below)

filterContext.Result = new JsonpResult
{
	JsonRequestBehavior = JsonRequestBehavior.AllowGet,
	ContentEncoding = result.ContentEncoding,
	ContentType = result.ContentType,
	Data = result.Data,
	Callback = callback
};

Thanks!
Phil Derksen

http://philderksen.com]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>103</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2010-05-08 09:53:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks for the tip on the pixie dust needed to make it work with ASP.NET MVC2 Phil!]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>104</wp:comment_id>
        <wp:comment_author>Luke</wp:comment_author>
        <wp:comment_author_email></wp:comment_author_email>
        <wp:comment_date_gmt>2010-05-10 06:52:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[That code is extremely useful.  Thanks for sharing!]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>105</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2010-05-10 06:56:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks for your comment Luke!]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>111</wp:comment_id>
        <wp:comment_author>Dave</wp:comment_author>
        <wp:comment_author_email>djudd@rogers.com</wp:comment_author_email>
        <wp:comment_date_gmt>2010-11-12 15:26:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks so much for the post! Very helpful, and it worked like a charm out of the box.  Wonder why the MVC team hasn't thought to put something this in the official codebase.  Have you approached them?]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>112</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2010-11-13 02:14:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks for your comment Dave! No I haven't approached the MVC team with this. But it does make sense - maybe I'll give it a shot.]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>118</wp:comment_id>
        <wp:comment_author>Bart Burkhardt</wp:comment_author>
        <wp:comment_author_email>bart.burkhardt@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2011-03-12 08:03:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Great post, one thing though,

JSONP returns javascript so the content-type should be application/javascript

Webkit complains if you use json as return type.

Thanks]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>119</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2011-03-13 01:17:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[You're absolutely right Bart. Have fixed the post now. Thanks!]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>131</wp:comment_id>
        <wp:comment_author>Mike Pelton</wp:comment_author>
        <wp:comment_author_email>Mike@PollyTiles.co.uk</wp:comment_author_email>
        <wp:comment_date_gmt>2011-05-03 03:52:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[I spent much of my day trying to get this whole JSONP and MVC 3 scenario to work - if I'd seen your post at 9:00am I could have been on the beach by 9:30!! Many thanks, Mike]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>132</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2011-05-03 04:16:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Hehe.. You're welcome Mike!]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>171</wp:comment_id>
        <wp:comment_author>Chris Marisic</wp:comment_author>
        <wp:comment_author_email>chris@marisic.com</wp:comment_author_email>
        <wp:comment_date_gmt>2011-11-02 05:51:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Just ran head first into the same origin policy today, with your JSONP filter was able to clear that hurdle in minutes!

Thanks alot for your post.]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>172</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email></wp:comment_author_email>
        <wp:comment_date_gmt>2011-11-02 05:58:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks for your comment Chris. Glad it worked out!]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>181</wp:comment_id>
        <wp:comment_author>DrewW</wp:comment_author>
        <wp:comment_author_email></wp:comment_author_email>
        <wp:comment_date_gmt>2012-03-01 23:29:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Clear, concise, well documented -- nice work... but most of all I&#39;m commenting because you take the time to respond to comments. Thanks!]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>182</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2012-03-02 01:10:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks for the comment DrewW. For the traffic I get, its always a kick when somebody leaves a comment :).]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>184</wp:comment_id>
        <wp:comment_author>robert</wp:comment_author>
        <wp:comment_author_email>robban@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2012-03-29 22:12:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Verry good, using it for a client as we speak! :) ]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>186</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2012-03-29 23:01:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks Robert!]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>187</wp:comment_id>
        <wp:comment_author>Bart Burkhardt</wp:comment_author>
        <wp:comment_author_email>bart.burkhardt@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2012-05-14 00:51:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[I think &amp;jsoncallback=?&quot;;

should be &amp;callback=?&quot;; ]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>188</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2012-05-14 01:39:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[The Flickr API requires that the parameter be called &quot;jsoncallback&quot;. The specific name of the query string parameter to be used is specified by the service provider - in this case, Flickr.]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>189</wp:comment_id>
        <wp:comment_author>StuH</wp:comment_author>
        <wp:comment_author_email></wp:comment_author_email>
        <wp:comment_date_gmt>2012-05-18 14:16:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Excellent Post - its been said before - but 20 minutes with this post saved hours of work!]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>190</wp:comment_id>
        <wp:comment_author>Raniu V</wp:comment_author>
        <wp:comment_author_email></wp:comment_author_email>
        <wp:comment_date_gmt>2012-05-18 15:00:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks StuH!]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>197</wp:comment_id>
        <wp:comment_author>Ivan</wp:comment_author>
        <wp:comment_author_email>hacheka@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2012-08-26 04:34:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks a lot!]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>198</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2012-08-26 04:40:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks for your comment Ivan!]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>199</wp:comment_id>
        <wp:comment_author>Sataa Daghir</wp:comment_author>
        <wp:comment_author_email>satabd@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2012-09-18 15:37:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Many thanks, your post saved my time. thank you again for sharing.]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>200</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2012-09-18 22:00:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks for leaving a comment Sataa.]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>202</wp:comment_id>
        <wp:comment_author>Chris Towles</wp:comment_author>
        <wp:comment_author_email>chris.towles@nku.edu</wp:comment_author_email>
        <wp:comment_date_gmt>2013-00-23 22:19:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thank you for this great post. Really saved me after about giving up with Jsonp!!]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>203</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2013-00-24 00:02:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks for your comment Chris Towles.]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>206</wp:comment_id>
        <wp:comment_author>Wesley</wp:comment_author>
        <wp:comment_author_email></wp:comment_author_email>
        <wp:comment_date_gmt>2013-01-13 01:15:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks. it works smoothly]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>207</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2013-01-13 02:14:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks Wesley.]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>208</wp:comment_id>
        <wp:comment_author>Damon</wp:comment_author>
        <wp:comment_author_email></wp:comment_author_email>
        <wp:comment_date_gmt>2013-01-27 08:55:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Hey man,

Thanks for this great solution, i&#39;ve got a question tho.
I&#39;m working on a webservice project with MVC4 and ASP.NET Web API.
For some reason my ActionFilter doesn&#39;t work, it just never gets hooked. My code is exactly the same as yours except my controller doesn&#39;t extend a regular Controller but an ApiController.

Is there any need to register the filter or anything like that which i might be forgetting about?]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>211</wp:comment_id>
        <wp:comment_author>Fahimeh</wp:comment_author>
        <wp:comment_author_email>fahimeh.pashayi@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2013-04-12 18:44:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks mate! 

It really helped me!]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>212</wp:comment_id>
        <wp:comment_author>Glenn</wp:comment_author>
        <wp:comment_author_email>glenn.graham@rastrac.com</wp:comment_author_email>
        <wp:comment_date_gmt>2013-04-22 12:36:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[I have the same issue as Damon. MVC 4 never seems to hit the OnActionExecuted is never hit and normal JSON is returned]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>213</wp:comment_id>
        <wp:comment_author>Glenn</wp:comment_author>
        <wp:comment_author_email>glenngraham@yahoo.com</wp:comment_author_email>
        <wp:comment_date_gmt>2013-04-22 17:15:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Nevermind. I got the answer
With MVC 4 there are two ActionFilterAttributes.
The one I needed was System.Web.Http.Filters.ActionFilterAttribute.
Now I&#39;m hitting a breakpoint. ]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>214</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2013-04-23 00:08:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Ah, yes. Good that its working now.]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>226</wp:comment_id>
        <wp:comment_author>Tom</wp:comment_author>
        <wp:comment_author_email>piwooki@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2014-01-11 05:05:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Works perfectly.Thanks!]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>227</wp:comment_id>
        <wp:comment_author>G Fisher</wp:comment_author>
        <wp:comment_author_email>g.fisher@shpconsultants.co.uk</wp:comment_author_email>
        <wp:comment_date_gmt>2014-01-17 15:11:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[As many others have said - great article and very helpful :-)
]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>228</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email></wp:comment_author_email>
        <wp:comment_date_gmt>2014-01-17 20:44:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks for your comments Tom and Fisher!]]>
        </wp:comment_content>
      </wp:comment>
    </item>
    <item>
      <title>Web Camps / Zeollar - Demos and decks</title>
      <link>http://ghost-nerd.azurewebsites.net/webcampszeollardemosanddecks</link>
      <dsq:thread_identifier>8</dsq:thread_identifier>
      <wp:post_date_gmt>2011-04-29 18:38:06</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>If you attended any of the one day <a href="http://www.microsoft.com/india/events/webcamps/">Web Camps</a> events that Microsoft has been conducting across various cities in India then you probably saw me talk about one or both of the following:</p>

<ul>
<li>Sizzlers on the Web - WebSockets &amp; IndexedDB</li>
<li>Programming with HTML5 &amp; Related Technologies</li>
</ul>

<p>And you might have heard me proclaim that I shall put the demos and the decks up for download on my blog "soon". Well, "soon" is a relative concept and it is probably useful, at this point, to also remember that it is always better late than never. That apart, folks who viewed my <a href="http://zeollar.cloudapp.net/Session/228">web cast session</a> on <a href="http://www.zeollar.com">Zeollar.com</a> about Indexed DB development might find these demos useful as well. So then, here are the links to the appropriate files:</p>

<ul>
<li>Sizzlers on the Web - WebSockets &amp; IndexedDB
<ul><li><a href="http://cid-2c5064cb54b16f50.office.live.com/view.aspx/Public/session-files/sock-idb/sock-idb.pptx">Deck</a></li>
<li><a href="http://cid-2c5064cb54b16f50.office.live.com/self.aspx/Public/session-files/sock-idb/sock-idb-demos.zip">Demo</a></li></ul></li>
<li>Programming with HTML5 &amp; Related Technologies
<ul><li><a href="http://cid-2c5064cb54b16f50.office.live.com/view.aspx/Public/session-files/cross-browser/cross-browser.pptx">Deck</a></li>
<li><a href="http://cid-2c5064cb54b16f50.office.live.com/self.aspx/Public/session-files/cross-browser/cross-browser-demos.zip">Demo</a></li></ul></li>
</ul>

<p>Now, the demos for both of these sessions are a tad non-trivial and I had great fun building them. I have a plan to blog a series of posts talking about how I built them and ramble a bit about the interesting bits. Again, this should come out "soon". So you might <em>not</em> want to hold your breath till then!</p>]]>
      </content:encoded>
    </item>
    <item>
      <title>Debugging existing Windows Store apps</title>
      <link>http://ghost-nerd.azurewebsites.net/debuggingexistingwindowsstorea</link>
      <dsq:thread_identifier>9</dsq:thread_identifier>
      <wp:post_date_gmt>2013-04-23 07:29:02</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>Did you know that you can debug pretty much any installed store app on your machine?  Let's say you want to know exactly why is it that the Windows Mail app acts funny sometimes.  Here's what you'd do:</p>

<ol>
<li><p>Go to the modern desktop and type "Debuggable Package Manager" and launch it.</p>

<blockquote>
  <p><a href="http://blogorama.nerdworks.in/images/_img3.jpg"><img src="http://blogorama.nerdworks.in/images/_img4.jpg" alt="clip_image001" title="clip_image001" /></a></p>
</blockquote>

<p>This opens up a powershell window.</p></li>
<li><p>Run <strong>Get-AppxPackage</strong> to list the packages installed and use <strong>Where-Object</strong> to filter for what you're looking for. Since were interested in the mail app we run this:</p>

<pre><code>Get-AppxPackage | Where-Object PackageFullName -like "*commu*"
</code></pre></li>
<li><p>Note the value of the "PackageFullName" property and enable debugging by running this:</p>

<pre><code>Enable-AppxDebug microsoft.windowscommunicationsapps_17.0.1114.318_x64__8wekyb3d8bbwe
</code></pre></li>
<li><p>Now launch the app.  Then launch Visual Studio, hit <strong>Ctrl+Alt+P</strong> and select the instance of <strong>WWAHost.exe</strong> which looks like the app you're interested in.</p>

<blockquote>
  <p><a href="http://blogorama.nerdworks.in/images/_img31.png"><img src="http://blogorama.nerdworks.in/images/_img32.png" alt="image" title="image" /></a></p>
</blockquote></li>
<li><p>Debug away!</p>

<blockquote>
  <p><a href="http://blogorama.nerdworks.in/images/_img35.png"><img src="http://blogorama.nerdworks.in/images/_img36.png" alt="image" title="image" /></a></p>
</blockquote></li>
</ol>]]>
      </content:encoded>
    </item>
    <item>
      <title>Windows Live Writer + ATOM Publishing = Awesome!</title>
      <link>http://ghost-nerd.azurewebsites.net/windowslivewriteratompublishin</link>
      <dsq:thread_identifier>10</dsq:thread_identifier>
      <wp:post_date_gmt>2011-05-12 06:43:44</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>Ever since I embarked on this blogging expedition I have used a <a href="http://en.wikipedia.org/wiki/Windows_Forms">Windows Forms</a> based homebrewed blog client to create my posts. I would hand code the HTML in Visual Studio or notepad++ and then copy/paste the markup into this tool which would call a web service hosted on my blog to create the post. This is what the console looks like:</p>

<blockquote>
  <p><a href="http://blogorama.nerdworks.in/images/_img1.png"><img src="http://blogorama.nerdworks.in/images/_img2.png" alt="Blogorama console screen shot" title="Blogorama console screen shot" /></a></p>
</blockquote>

<p>Well, this worked for a long time and has served its purpose but I have over time realized that the complexity of this process has subconsciously been a bit of a de-motivator. Being essentially lazy, I'd have to get <strong>really</strong> excited about a topic to overcome the pain of hand coding the HTML. Also, having to open and close tags constantly really doesn't lend itself to a free translation of thought to typing. And finally, not having the services of a spell checker handy meant that many of my posts would go live with every typo in its designated place!</p>

<p>Well, not anymore! I finally got around to fixing my site up to support the publishing of blog posts via the excellent <a href="http://explore.live.com/windows-live-writer?os=other">Windows Live Writer</a>! For those of you who don't know, <em>Windows Live Writer</em> (WLW) is a free desktop blog client from Microsoft that allows you to create/edit blog posts and is designed to work seamlessly with most of the popular blogging platforms out there. My blog being a custom written piece of work it wouldn't just work out of the box with WLW. Fortunately, WLW supports a publishing protocol known as the <a href="http://www.ietf.org/rfc/rfc5023.txt">Atom Publishing Protocol</a> (AtomPub) which means that basically any site that implements AtomPub would be able to have its content managed via WLW.</p>

<p>Some kindly souls over at a company called <a href="http://www.jhsoft.com/">JH Software</a> have made an awesome <a href="http://www.jhsoft.com/atompub-sl.aspx">ASP.NET library</a> (for free!) that makes it somewhat trivial to provide support for AtomPub on your own sites. Long story short, I downloaded the library, fixed up my site by hooking up the appropriate sub classes (and oh, I took this opportunity to upgrade the .NET framework being used by the blog engine to 4.0 from 3.5 and the process went surprisingly smoothly I am happy to report) and with a minimal amount of hair pulling was able to get everything going just right (well, except for the category selection in WLW bit that I'll have to come back to some other time).</p>

<p>This very post for instance was authored in WLW and everything worked just peachy! Here's a work in progress screenshot of this post in WLW:</p>

<blockquote>
  <p><a href="http://blogorama.nerdworks.in/images/_img3.png"><img src="http://blogorama.nerdworks.in/images/_img4.png" alt="wlw" title="wlw" /></a></p>
</blockquote>

<p>WLW is truly an incredibly smart piece of software. Not only is it able to handle embedding pictures, script, video etc. directly into posts - I think its best feature is its ability to automatically detect the "theme" being used on a blog and give you an almost exact WYSIWYG authoring experience. It feels like I am typing directly onto the blog. Sweet!</p>]]>
      </content:encoded>
    </item>
    <item>
      <title>On JavaScript strict mode</title>
      <link>http://ghost-nerd.azurewebsites.net/onjavascriptstrictmode</link>
      <dsq:thread_identifier>11</dsq:thread_identifier>
      <wp:post_date_gmt>2011-07-31 21:20:25</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>ECMAScript version 5 is the latest revision of the ECMAScript programming language ratified for widespread adoption by <a href="http://www.ecma-international.org/">Ecma International</a> - the standards body responsible for figuring out what goes into the language. If you're wondering what exactly ECMAScript is and why you should be interested, it turns out that ECMAScript is <em>standardese</em>for a language that the rest of the world knows as JavaScript. Strictly speaking (no pun on title intended) JavaScript and ECMAScript aren't identical. JavaScript is a dialect of ECMAScript but the differences are mostly negligible and are largely there for historical backward compatibility reasons. ECMAScript 5 (henceforth referred to as ES5) brings a suite of interesting features to the table, many of which have as their goal, the introduction of greater programming discipline to the language.</p>

<p>In this post (and over the next few posts), we review one such feature which directly addresses some of the <a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742">more notorious parts</a> of the language. This new feature is known as "strict mode", which briefly, is a whole new execution mode for JavaScript that causes the execution engine to run code with slightly different semantics.</p>

<h3 id="whatisstrictmode">What is strict mode?</h3>

<p>"Strict mode" is a way of causing the runtime engine to interpret and execute JavaScript with different semantics than what one sees with unrestricted code. Code running in strict mode has the following characteristics:</p>

<ol>
<li>Excludes some syntactic and semantic features, i.e., you can't do some things that you are allowed to do otherwise  </li>
<li>Modifies semantics of some features, i.e., same code runs differently in strict mode compared to what happens in unrestricted mode  </li>
<li>An expanded list of scenarios that cause errors to be raised instead of them being silently ignored or running with assumed intent  </li>
<li>Applies to specific code units - i.e., you cannot have strict mode apply to all your .js files at one shot (unless you concatenate all of them of course, in which case its one code unit as far as the runtime is concerned)</li>
</ol>

<p>The basic rationale behind strict mode is the introduction of some runtime enforced discipline to JavaScript development. I have always felt that JavaScript is far too dynamic for its own good and in my opinion, strict mode tries to address some of that excessive dynamism. Many of the tricky parts of the language that required programmer discipline are now enforced by the engine when you mark a particular code segment as "strict". Can you spot the bug in the following snippet? With "strict mode" turned on, the runtime will!</p>

<pre><code>function findProduct(numbers) {
    var product = 0,
        len = numbers.length;
    for(var i = 0; i &lt; len; ++i) {
        prodct = product * numbers[i];
    }
    return product;
}
</code></pre>

<h3 id="browsersupport">Browser support</h3>

<p>Pretty much all modern browsers support strict mode in their respective JavaScript engines. On Internet Explorer (IE) strict mode is available from version 10 onwards. You can download the latest platform preview of IE10 from the <a href="http://bit.ly/npkR2M">IE test drive site</a>. All the samples in this article have been tested on IE10 platform preview 2 (IE10 PP2) using a JavaScript <a href="http://blogorama.nerdworks.in/entry-JavaScriptevalconsole.aspx">eval console</a> I had put together sometime back. Selected samples have been tested on <em>Google Chrome 14</em> and <em>Firefox 7 beta</em> as well.</p>

<h3 id="strictmodecontexts">Strict mode contexts</h3>

<p>Running a piece of JavaScript under strict mode is simplicity itself. Here's an example:</p>

<pre><code>"use strict";
alert("Look ma! Strict mode!");
</code></pre>

<p>The nice thing here is that this is perfectly valid ECMAScript 3 code as well (ES3 is the previous edition of ECMAScript. What happened to ES4? It <a href="http://en.wikipedia.org/wiki/ECMAScript#Versions">went the way of the dodo!</a>). An ES3 JavaScript engine will simply ignore the noop line and proceed with running the rest of the script. In fact, this sort of syntactic backward compatibility with ES3 has been a key design goal for ES5 and a surprisingly large part of the ES5 specification can be implemented completely in ES3 JavaScript. Strict mode however, is an example of an ES5 feature that perhaps cannot be implemented purely in ES3 JavaScript without additional support from the runtime.</p>

<p>The following kinds of JavaScript code can be made to run under strict mode:</p>

<ol>
<li><h4 id="globalcode">Global code</h4>

<p>This is basically executable code that you enter inside a <code>script</code> tag. For example:</p>

<pre><code>&lt;script&gt;
  "use strict";
  // global strict mode code here
&lt;/script&gt;
</code></pre>

<p>Note that with HTML5, there is no longer a need to add the type attribute for script tags.</p></li>
<li><h4 id="evalcode">Eval code</h4>

<p>Eval code that has the strict mode directive prefix:</p>

<pre><code>eval("'use strict'; // strict code here");
</code></pre>

<p>Or is invoked from strict mode code:</p>

<pre><code>"use strict";
eval("// strict code here");
</code></pre></li>
<li><h4 id="functioncode">Function code</h4>

<p>Functions that have the strict mode directive prefixed before the rest of the code (putting the directive anywhere else doesn't count):</p>

<pre><code>function foo() {
    "use strict";
    // strict code here
}
</code></pre>

<p>Functions declared in strict mode code inherit the strictness:</p>

<pre><code>function foo() {
    "use strict";
    var bar = function () {
        // strict code here
    };
    bar();
}
</code></pre>

<p>Note that the latter case is particularly relevant when you are defining callbacks for various event handlers. Also, note that strictness does not extend across call stacks. Here's an example:</p>

<pre><code>function foo() {
    // not strict mode even though
    // foo is being invoked from a
    // "strict" function
}


function bar() {
    "use strict";
    foo();
}


bar();
</code></pre></li>
</ol>

<p>In the <a href="http://blogorama.nerdworks.in/entry-JavaScriptstrictmoderestrictio.aspx">next post</a> we'll start taking a look at some of the restrictions that ES5 strict mode imposes on the language and how they help you write better JavaScript.</p>]]>
      </content:encoded>
      <wp:comment>
        <wp:comment_id>141</wp:comment_id>
        <wp:comment_author>Saravana prasath</wp:comment_author>
        <wp:comment_author_email>prasath.saravana@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2011-08-02 23:27:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[I like this comment ]]>
        </wp:comment_content>
      </wp:comment>
    </item>
    <item>
      <title>Calling a JavaScript function with variable arguments</title>
      <link>http://ghost-nerd.azurewebsites.net/callingajavascriptfunctionwith</link>
      <dsq:thread_identifier>12</dsq:thread_identifier>
      <wp:post_date_gmt>2009-06-04 09:45:50</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>I am working on this little <a href="http://en.wikipedia.org/wiki/Windows_Script_Host">Windows Scripting Host</a> script using JavaScript where I basically need to load up a Word document and do a bunch of text transformation tasks on each line and dump the output to the console (which I plan to redirect to a file). I decided to employ the <a href="http://en.wikipedia.org/wiki/Builder_pattern">builder</a> pattern a bit and set something up like this first:</p>

<pre><code>//
// transform events collection
//
var transformTable = {
    parseFileBegin : [],
    parseLineBegin : [],
    parseLineEnd : [],
    parseFileEnd : []
};
</code></pre>

<p>The idea is to populate the arrays <code>parseFileBegin</code> and <code>parseFileEnd</code> with a set of function object references that would get called in sequence at the appropriate time. To make calling these callbacks easier I decided to come up with a <code>fireEvent</code> routine which I could then use to fire a particular set of callback functions. I wanted also, to be able to call <code>fireEvent</code> passing as many arguments as are needed for that particular callback. When invoking <code>parseFileBegin</code> for instance, I wanted to pass the name of the file as a parameter to the callback routines and when calling <code>parseLineBegin</code> I wanted to pass in a tokenized form of each line along with the line string itself. Here're a couple of examples of how I wanted to call <code>fireEvent</code>.</p>

<pre><code>fireEvent(transformTable.parseFileBegin, fileName);
fireEvent(transformTable.parseLineBegin, line, tokens);
</code></pre>

<p>And here's what I came up with for <code>fireEvent</code>:</p>

<pre><code>function forEach( arr, cb ) {
    for( var i = 0 ; i &lt; arr.length ; ++i )
        if( cb( arr[i] ) == false )
            return false;

    return true;
}

function fireEvent(eventHandlers) {
    //
    // everything after the first argument must be
    // considered as parameters to be passed to the
    // event handler routines
    //
    var args = [];
    var i = 0;
    forEach(arguments, function( arg ) {
        if( i++ == 0 )
            return;
        args.push( arg );
    });

    //
    // iterate through the handlers collection and call one by one
    //
    forEach(eventHandlers, function(handler) {
        // TODO: call the handler
    });
}
</code></pre>

<p>I needed to somehow call the function referenced by <code>handler</code> and pass all the values in the <code>args</code> array as parameters to it. One way might have been to dynamically build a string of JavaScript code that calls <code>handler</code> and then have it executed by calling <code>eval</code> on the string. But I perferred a more direct method if one were available. As it turned out, one was in fact available in the form of the <code>apply</code> method on <code>Function</code> objects. Consider this code:</p>

<pre><code>var foo = function(s1, s2) {
    alert( s1 + " - " + s2 );
}
</code></pre>

<p>There are a couple of ways you can invoke <code>foo</code>. You can call it as you normally would with functions or, alternatively, you can call the member method <code>apply</code> that all function objects posses. Here's an example:</p>

<pre><code>var foo = function(s1, s2) {
    alert( s1 + " - " + s2 );
}

foo("ding", 20);                 // call like normal function
foo.apply( null, ["ding", 20] ); // call via "apply" method
</code></pre>

<p>The <code>apply</code> method requires you to supply 2 parameters, the first one indicates the object in whose scope the function must be invoked - which means that the function will be invoked as though it were a member function of that object. The effect of this is that the variable "<code>this</code>" within that function will refer to the object you pass as the first argument. If you pass <code>null</code> then it will execute like a global function. Here's an example:</p>

<pre><code>var person = {
    name : "binga",
    age : 20
};

var print = function() {
    alert( this.name + " - " + this.age );
}

print.apply( person );
</code></pre>

<p>From within the function <code>print</code> here, the reference to "<code>this</code>" turns out to refer the first parameter that you pass to <code>apply</code>. So what happens if you called <code>print</code> like this?</p>

<pre><code>print.apply( null );
</code></pre>

<p>As things tend to be in such cases, "<code>this</code>" becomes "<code>undefined</code>" from inside <code>print</code>.</p>

<p>The second parameter to <code>apply</code> is of course, the array of parameters that are to be passed to the function. So with this new information, <code>fireEvent</code> looks like this:</p>

<pre><code>function fireEvent(eventHandlers) {
    //
    // everything after the first argument must be
    // considered as parameters to be passed to the
    // event handler routines
    //
    var args = [];
    var i = 0;
    forEach(arguments, function( arg ) {
        if( i++ == 0 )
            return;
        args.push( arg );
    });

    //
    // iterate through the handlers collection and call one by one
    //
    forEach(eventHandlers, function(handler) {
        handler.apply(null, args);
    });
}
</code></pre>

<p>Simple enough, when you know how to do it eh?!</p>]]>
      </content:encoded>
      <wp:comment>
        <wp:comment_id>108</wp:comment_id>
        <wp:comment_author> Amor</wp:comment_author>
        <wp:comment_author_email>olimpia-sousa@hotmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2010-08-27 06:59:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Olimpia]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>109</wp:comment_id>
        <wp:comment_author>Vinod</wp:comment_author>
        <wp:comment_author_email>dvk1778@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2010-10-18 20:00:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[That was a good session today on advanced Javascript. Thanks. I was wondering about the roots of Javascript namely ECMAScript and how this particular evolution became important over time and not some other flavor ...]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>110</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2010-10-18 23:29:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks Vinod!

I think the answer to that question is pretty straightforward - for whatever reason JavaScript was chosen as the scripting engine for client side programming for web applications and the language basically piggy-backed on the popularity of the world wide web itself!]]>
        </wp:comment_content>
      </wp:comment>
    </item>
    <item>
      <title>The blog.. it&apos;s.. it&apos;s.. alive!</title>
      <link>http://ghost-nerd.azurewebsites.net/theblogitsitsalive</link>
      <dsq:thread_identifier>13</dsq:thread_identifier>
      <wp:post_date_gmt>2006-03-30 18:24:53</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>Hallelujah! The <em>Nerdworks Blog</em> is finally underway! Phew! I would like to say that this blog is a culmination of years of hard grinding work, only, it isn't. It actually took me 2 days to put everything together (and maybe another 1 day hunting around for a good ASP.NET based blog site without much success). All said and done, it was quite an exciting little project. Here's the 50,000 foot view:</p>

<ul>
<li><em>Nerdworks Blogorama</em> is an ASP.NET based website that let's me spew forth random pieces of mostly useless information at will</li>
<li>It was written and debugged using the free <a href="http://msdn.microsoft.com/vstudio/express/vwd/">Visual Web Developer 2005 Express Edition</a> which by the way, is an awesome development system (really sweet of Microsoft in giving it away free). It even let's me directly deploy my site from the local box to the hosting provider's server (using the <em>Copy Web Site</em> option).</li>
<li>An admin console called the <em>Blogorama Console</em> was written using the freely available <a href="http://msdn.microsoft.com/vstudio/express/visualcsharp/">Visual C# 2005 Express Edition</a>. This console let's me create new blog entries, edit existing ones and even delete entries that kind of... you know... suck! The admin console talks to the blog engine via a webservice that I have hosted there.</li>
<li>The blog entries are stored in a SQL server database that my hosting provider provides. During development however I used the <a href="http://msdn.microsoft.com/vstudio/express/sql/">SQL Server 2005 Express Edition</a> which is, again, a free database server that Microsoft so magnanimously provides.</li>
</ul>

<p>There's quite a bit of work left though, like for instance:</p>

<ul>
<li>The UI could use some re-work so that it looks more cool.</li>
<li>The admin console does not currently require authentication. That needs to be fixed.</li>
<li>Blog entries should get archived automatically every month and appropriate links need to get added somewhere in the sidebar.</li>
<li>Must provide the ability to search by category (blog entries have a category associated with them you see).</li>
<li>Must add a section for putting up links to my favourite places on the internet, again, somewhere in the sidebar.</li>
<li>Implement some way for embedding images in blog entries.</li>
<li>Implement WYSIWYG editing in the blog console (right now I paste in the HTML directly).</li>
</ul>

<p>That's a pretty large list. But hey, the first version has gone out through the doors! Now, if you wish to contact me you can do that in one of two ways:</p>

<ul>
<li>Leave a comment by clicking on the green <em>Comment</em>link below, or</li>
<li>Click on the <em><a href="contact.aspx">Email the author</a></em> link in the sidebar</li>
</ul>

<p>If that doesn't work for some reason (it's still beta you know) then you can email me using this address - avranju[at]gmail[dot]com.</p>]]>
      </content:encoded>
      <wp:comment>
        <wp:comment_id>1</wp:comment_id>
        <wp:comment_author>Sandy</wp:comment_author>
        <wp:comment_author_email></wp:comment_author_email>
        <wp:comment_date_gmt>2006-03-30 15:18:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Hey ranju...

It looks good.. the write up is impressive.. but the site as such looks bland.. it needs a little spicing up.. otherwise.. its ok buddyy!!
]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>2</wp:comment_id>
        <wp:comment_author>Ranju. V</wp:comment_author>
        <wp:comment_author_email></wp:comment_author_email>
        <wp:comment_date_gmt>2006-03-30 15:20:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Ya, I know.  I am working on sprucing it up.  Come back and check often!

-- 
Ranju. V
http://blogorama.nerdworks.in/
--
]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>3</wp:comment_id>
        <wp:comment_author>Auyva </wp:comment_author>
        <wp:comment_author_email></wp:comment_author_email>
        <wp:comment_date_gmt>2006-03-30 15:23:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Nerd works is sounds good, but not very visually atrtactive.. so you need to better the look and feel.. for the nerd to inherit the Earth

Frm
Queen of the Universe]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>4</wp:comment_id>
        <wp:comment_author>Ranju. V</wp:comment_author>
        <wp:comment_author_email></wp:comment_author_email>
        <wp:comment_date_gmt>2006-03-30 15:55:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Hey Auyva, Thanks for your note.  Yep.  I am on it!]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>5</wp:comment_id>
        <wp:comment_author>Mathuram.</wp:comment_author>
        <wp:comment_author_email>nmathu@yahoo.com</wp:comment_author_email>
        <wp:comment_date_gmt>2006-04-01 02:45:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[hey my good 'ol friend,

I know UI is not your cup of tea... and i still remember u cursing me on all the UI work we have done together... But good luck on ur UI. your article on sketch up was useful... since i'm constructing my house... will surely check out ur blog often... u better keep it live and kicking...

-mathu]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>6</wp:comment_id>
        <wp:comment_author>Ranju. V</wp:comment_author>
        <wp:comment_author_email></wp:comment_author_email>
        <wp:comment_date_gmt>2006-04-01 05:00:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[hey mathu,

eppadi irukka? cursing you? poor gentle innocent me?

ui may not be my cup 'o tea.. but what do you think about the layout? choice of font, colors? gradient blue translucent title bars aren't everything you know ;)..

-- 
Ranju. V
http://blogorama.nerdworks.in/
--
]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>7</wp:comment_id>
        <wp:comment_author>Suresh</wp:comment_author>
        <wp:comment_author_email>captain.picquard@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2006-04-01 05:00:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Good start - surley will keep looking in and participate when I can add some value. Rigth now ... you have all the feedback you can handle!

Cheers

Suresh]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>8</wp:comment_id>
        <wp:comment_author>Ranju. V</wp:comment_author>
        <wp:comment_author_email></wp:comment_author_email>
        <wp:comment_date_gmt>2006-04-01 05:10:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks Suresh!

-- 
Ranju. V
http://blogorama.nerdworks.in/
--
]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>13</wp:comment_id>
        <wp:comment_author>ram</wp:comment_author>
        <wp:comment_author_email>ramkum@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2006-04-04 09:24:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[cool blog!
lose the frames though; frames are uncool.
also, whats the point of a signature that proclaims a name you have in the title of your comment and a URL that any reader obviously is already in?
makes your page scroll longer, but otherwise, hmmm..... :)
another minor suggestion, let commenters leave a link to their own blogs too.]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>14</wp:comment_id>
        <wp:comment_author>Ranju. V</wp:comment_author>
        <wp:comment_author_email></wp:comment_author_email>
        <wp:comment_date_gmt>2006-04-04 09:55:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Yeah I agree about the name in the sig.. as for the URL, rumour has it that Google has this algorithm that computes a rank based on the number of pages that link to you.. not sure whether it will count links that point to the site from pages within the site though..

And frames are uncool?  Even poochi was saying that.. What's uncool about frames?

Will do that comment link thingy..  thanks for the feedback!]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>16</wp:comment_id>
        <wp:comment_author>ram</wp:comment_author>
        <wp:comment_author_email>ramkum@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2006-04-04 10:49:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[frames give you a cluttered look and feel (try resizing this frame to hide the others; it looks much more peaceful). they also make linking a pain. if i want to link to one particular blog post of yours, i have no straightfwd way of figuring out its URL. even if i do, users wont find links to your about-blog page and so on. so its much cooler to code the header and side-navigation into your blog engine.

google only recognises actual links, not text URLs.. it certainly doesnt consider links to a domain within that domain. and even when it does count links from another domain to yours, it doesnt actually count the links; it just counts the number of domains that have one or more links to you, and weighs them by their pagerank.]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>17</wp:comment_id>
        <wp:comment_author>Ranju. V</wp:comment_author>
        <wp:comment_author_email></wp:comment_author_email>
        <wp:comment_date_gmt>2006-04-04 11:16:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[hmm.. i have seen websites that use frames and end up looking cluttered and sites that don't use frames and still end up looking cluttered.. whatever you call the layout for this blog, i don't think you can call it cluttered! if anything, there's too much empty space..

maybe i'll give users the ability to hide the frames completely if they want more reading space..

secondly, for links, frames or no frames i think at the moment there's no easy way to directly link to a given entry.. for this i maybe i'll add a &amp;quot;perma link&amp;quot; type of thing in the title of each entry or near the &amp;quot;comment&amp;quot; link or something.. so if you want to link to a specific entry in an email or something you can right click on the &amp;quot;perma link&amp;quot; and copy &amp;amp; paste..

i do agree that with direct links users wouldn't see the stuff in the sidebar.. let me see what i can do..

yeah.. google will parse only actual links.. i was planning to build in some parsing to recognize URLs and automatically convert them to links one of these days.. i'll still do that but that'll probably help only ppl who leave a comment here with a link to their site or something..

thnx again for all the gr8 feedback!]]>
        </wp:comment_content>
      </wp:comment>
    </item>
    <item>
      <title>Calling the &quot;base&quot; with prototypal inheritance in JavaScript</title>
      <link>http://ghost-nerd.azurewebsites.net/callingthebasewithprototypalin</link>
      <dsq:thread_identifier>14</dsq:thread_identifier>
      <wp:post_date_gmt>2011-06-11 05:39:34</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>I <a href="http://blogorama.nerdworks.in/entry-InheritanceinJavaScript.aspx">wrote a little bit</a> about how inheritance was designed to work in JavaScript sometime back. Briefly, inheritance in JavaScript is "prototypal" in nature and instead of types inheriting from other types, we have object instances inheriting from other object instances. Being a weakly typed language, the traditional interpretation of inheritance as it applies to a static strongly typed language does not apply here. Each object in JavaScript has a hidden reference to another object called its "prototype". Member references (i.e. when you access a property like so: <code>obj.prop</code>) are resolved by the runtime by first looking the object itself up for the member and if not found then looking for it in the object's prototype. If the member is still not found then the prototype's prototype is inspected and so forth till the prototype of the root <code>Object</code> object is encountered at which point the member is declared as non-existent. The <a href="http://blogorama.nerdworks.in/entry-InheritanceinJavaScript.aspx">blog post</a> I linked to earlier talks about this in detail.</p>

<p>I am working on a project where I have an inheritance hierarchy such as the following:</p>

<pre><code>var Base = Object.create({}, {
    init: {
        value: function() {
            //
            // default initialization here
            //
            print("Base.init");
        }
    }
});

var Derived = Object.create(Base, {
    //
    // override init
    //
    init: {
        value: function() {
            //
            // call base here
            //
            print("Derived.init");
            Object.getPrototypeOf(this).init.call(this);
        }
    }
});

Derived.init();
</code></pre>

<p>This produces the following output:</p>

<pre><code>Derived.init
Base.init
</code></pre>

<p>This makes sense because I am calling <code>init</code> on the <code>Derived</code> instance and calling <code>Object.getPrototypeOf</code> on <code>Derived</code> should return a reference to <code>Base</code> which we are subsequently able to use to invoke its (i.e. <code>Base</code>'s) version of <code>init</code>. Wanting to make the syntax a tad more natural I decided to extend <code>Object.prototype</code> to include an "<code>uber</code>" getter property that will return a reference to the "base" object from which the current object inherits. Here's what I came up with:</p>

<pre><code>Object.defineProperty(Object.prototype, "uber", {
    get: function () {
        return Object.getPrototypeOf(this);
    },
    enumerable: false,
    configurable: false
});
</code></pre>

<p>This would now allow me to call the base like so:</p>

<pre><code>var Derived = Object.create(Base, {
    //
    // override init
    //
    init: {
        value: function() {
            //
            // call base here
            //
            print("Derived.init");
            this.uber.init.call(this);
        }
    }
});

Derived.init();
</code></pre>

<p>Great. Now consider what happens in the following snippet:</p>

<pre><code>var o1 = Object.create(Derived);
o1.init();
</code></pre>

<p>For all intents and purposes this perhaps looks like it should work (or it did so to me at least!). Turns out, this doesn't quite work the way we might expect it to. Let's step through what the JavaScript engine actually does when it encounters the call to <code>init</code> via <code>o1</code>.</p>

<ol>
<li>Does <code>o1</code> have an "own" (see <code>Object.hasOwnProperty</code>) property called <code>init</code>? Nope, it does not.  </li>
<li>Does <code>o1``s prototype have an "own" property called</code>init<code>?</code>o1<code>`s prototype is</code>Derived<code>and it does indeed have a property called</code>init<code>. Great, invoke</code>Derived.init<code>using</code>o1<code>as the object context (</code>Derived.init.call(o1)`).  </li>
<li>The problem arises when the JavaScript engine encounters line 2 of <code>Derived.init</code>. Remember that "<code>this</code>" here is a reference to <code>o1</code> and calling <code>Object.getPrototypeOf</code> on it is simply going to result in a reference to <code>Derived</code> being returned! So in effect, we are making a recursive call to <code>Derived.init</code>!</li>
</ol>

<p>Taking it to its logical conclusion it is easy to see that this code will result in <code>Derived.init</code> being called over and over again till the JS engine runs out of stack space.</p>

<h3 id="addingateenybitoftypemetadata">Adding a teeny bit of type metadata</h3>

<p>If you think about the problem a bit you learn that the fundamental issue has to do with being able to somehow map member functions with the specific object where it is defined in such a way that this mapping is programmatically accessible at runtime. For example, we need to be able to associate the object <code>Derived</code> with its implementation of the method <code>init</code>. And this association must somehow be made accessible from <code>Object.uber</code> so that it can return the correct prototype object reference. One rather straightforward way that we could perhaps achieve this is by simply passing <code>Derived</code>to <code>Object.uber</code>. Like so:</p>

<pre><code>Object.prototype.uber = function (obj) {
    return Object.getPrototypeOf(obj);
}

var Base = Object.create({}, {
    init: {
        value: function () {
            //
            // default initialization here
            //
            print("Base.init");
        }
    }
});

var Derived = Object.create(Base, {
    //
    // override init
    //
    init: {
        value: function () {
            //
            // call base here
            //
            print("Derived.init");
            this.uber(Derived).init.call(this);
        }
    }
});

var o1 = Object.create(Derived);
o1.init()
</code></pre>

<p>But I really wanted to be able to just say <code>this.uber</code> instead of having to pass the reference to the object where the method in question has been defined. This however will be possible only if we extend <code>Object</code> to include some additional support routines. First we add a function called <code>inherit</code> that is defined like so:</p>

<pre><code>Object.inherit = function (proto, props) {
    var o = Object.create(proto, props);

    Object.getOwnPropertyNames(o).forEach(function (pn) {
        if (typeof (o[pn]) === "function")
            o[pn]["___type___"] = o;
    });

    return o;
}
</code></pre>

<p><code>Object.inherit</code> simply delegates to <code>Object.create</code> and performs one small activity in addition. It enumerates all the member methods in the newly created object and tacks on a property called <code>___type___</code> to them. This property will simply point back to the newly created object. This bit of metadata will then be used from <code>uber</code> to retrieve a reference to the object where the method in question was created. With this new bit of metadata handy we modify <code>uber</code> to look like this:</p>

<pre><code>Object.defineProperty(Object.prototype, "uber", {
    get: function () {
        var o = arguments.callee.caller["___type___"];
        if (!o) {
            throw "Uh oh! No metadata!";
        }
        return Object.getPrototypeOf(o);
    },
    enumerable: false,
    configurable: false
});
</code></pre>

<p><code>arguments.callee</code> refers to the current function, i.e., the function where the current line is executing. This is particularly useful in situations such as the above where the function in question is an anonymous function and there really isn't any other way to refer to it. Function objects have a magic property called <code>caller</code> that become available as they are executing. Here's a small sample that illustrates this:</p>

<pre><code>function bar() {
    print(bar.caller);
}

function foo() {
    bar();
}

foo();
print(bar.caller === null);
</code></pre>

<p>Here's the output we get on running this snippet:</p>

<pre><code>function foo() { bar(); }
true
</code></pre>

<p>As you can tell, outside of the call context <code>bar.caller</code>evaluates to <code>null</code> but while it is executing, it contains a reference to <code>foo</code> since <code>bar</code> was invoked from <code>foo</code>. We use this aspect of JS to access the function that invokes <code>uber</code>which in turn should contain a reference to the object where the function was defined via <code>___type___</code>. Once we get that object it's a simple matter of returning its prototype. With all this support infrastructure in place, code like the following should work just fine:</p>

<pre><code>var Base = Object.inherit({}, {
    init: {
        value: function () {
            //
            // default initialization here
            //
            print("Base.init");
        }
    }
});

var Derived = Object.inherit(Base, {
    //
    // override init
    //
    init: {
        value: function () {
            //
            // call base here
            //
            print("Derived.init");
            this.uber.init.call(this);
        }
    }
});

var MoreDerived = Object.inherit(Derived, {
    init: {
        value: function () {
            print("MoreDerived.init");
            this.uber.init.call(this);
        }
    }
});

//
// create instances that inherit from MoreDerived
//
var o1 = Object.create(MoreDerived);
var o2 = Object.create(o1);
o2.init();
</code></pre>

<p>Here's the output this produces:</p>

<pre><code>MoreDerived.init
Derived.init
Base.init
</code></pre>

<p>OK, but what happens if somebody tacks on a new member method or overrides an existing one <em>after</em> <code>Object.inherit</code>? Will <code>this.uber</code> work from that method? Clearly, it won't because the hidden <code>___type___</code> member is added to the member functions only from <code>Object.``inherit</code>. This means that we're going to have to add another little utility to <code>Object</code> that wraps this little functionality. Here goes:</p>

<pre><code>Object.override = function (o, name, fn) {
    Object.defineProperty(o, name, {
        value: fn
    });
    fn["___type___"] = o;
}
</code></pre>

<p>Now, we can add new member methods to objects using this function. Here's an example:</p>

<pre><code>var o1 = Object.create(MoreDerived);
Object.override(o1, "init", function () {
    print("o1.init");
    this.uber.init.call(this);
});

var o2 = Object.create(o1);
Object.override(o2, "init", function () {
    print("o2.init");
    this.uber.init.call(this);
});

o2.init();
</code></pre>

<p>And here's the output we get:</p>

<pre><code>o2.init
o1.init
MoreDerived.init
Derived.init
Base.init
</code></pre>

<p>That's it. As long as we use <code>Object.inherit</code> and <code>Object.override</code> to create our derived instances and to override methods respectively, we can confidently use <code>this.uber</code> to refer to the correct parent prototype object at all times!</p>]]>
      </content:encoded>
      <wp:comment>
        <wp:comment_id>135</wp:comment_id>
        <wp:comment_author>Sankarsan Bose</wp:comment_author>
        <wp:comment_author_email>sankarsan_b@yahoo.com</wp:comment_author_email>
        <wp:comment_date_gmt>2011-06-14 15:33:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Excellent post!!!]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>136</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2011-06-14 16:24:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks Sankarsan!]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>183</wp:comment_id>
        <wp:comment_author>kpozin</wp:comment_author>
        <wp:comment_author_email></wp:comment_author_email>
        <wp:comment_date_gmt>2012-03-10 08:20:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Unfortunately, &quot;caller&quot; and &quot;callee&quot; are deprecated (and are forbidden in strict mode). Not sure if there&#39;s any workaround.]]>
        </wp:comment_content>
      </wp:comment>
    </item>
    <item>
      <title>Inheritance in JavaScript</title>
      <link>http://ghost-nerd.azurewebsites.net/inheritanceinjavascript</link>
      <dsq:thread_identifier>15</dsq:thread_identifier>
      <wp:post_date_gmt>2011-04-02 02:37:44</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>JavaScript adopts a radically different take on inheritance from what one is perhaps used to coming from an object oriented, statically typed language world such as C++, C# or Java. In the typical OO static language, inheritance is applied to "classes" which are essentially templates for how an object instance should be laid out in memory at runtime. JavaScript however is weakly typed, i.e. pretty much everything is an "object". How will inheritance work out in a weakly typed dynamic language such as JavaScript? Enter "<em>prototypal inheritance</em>"!</p>

<h3 id="prototypalinheritance">Prototypal Inheritance</h3>

<p>Somewhat counter-intuitively, inheritance in JavaScript applies to object instances instead of types. I know that sounds kind of weird but once we see how it works, it actually turns out to be quite elegant. Every object has a hidden default member called its "prototype". The prototype of an object is a simple reference to another object which in turn has its own prototype reference to yet another object. Here's a picture illustrating this:</p>

<blockquote>
  <p><img src="http://blogorama.nerdworks.in/images/proto.png" alt="Image depicting prototype object linkage." title="" /></p>
</blockquote>

<p>Here, <code>object1</code>'s prototype points to <code>object2</code> and <code>object2</code>'s prototype points to the prototype of the JavaScript <code>Object</code> type (part of the JavaScript library). The <code>Object</code> type's prototype does not in turn point to yet another object and is always <code>null</code> thereby making it the root object in the inheritance hierarchy.</p>

<p>Whenever you attempt to access a member field or method on an object the JavaScript runtime attempts to locate the member directly on the object. If the lookup fails then it attempts to locate the member in the object's prototype and continues to walk the prototype chain till the member is found (if the member ends up never being found then you get a syntax error or an "undefined" reference depending on the context). Here's a pseudo-implementation of member lookup implemented in JavaScript:</p>

<pre><code>//
// dereferences the member identified by "memid"
// if it exists directly on the object; returns
// "null" otherwise
//
Object.prototype.getOwnProperty = function (memid) {
    if (this.hasOwnProperty(memid))
        return this[memid];
    return null;
};

//
// lookup member property/method called "memid" on object
// "obj"; walks the prototype inheritance chain till member
// is found; returns "null" if member is not found
//
function lookup(obj, memid) {
    var mem = obj.getOwnProperty(memid);
    while (!mem) {
        obj = Object.getPrototypeOf(obj);
        if (!obj)
            break;
        mem = obj.getOwnProperty(memid);
    }

    return mem;
}
</code></pre>

<h3 id="sohowdoesprototypalinheritancework">So how does prototypal inheritance work?</h3>

<p>So how exactly do you do prototypal inheritance? The basic idea is that new objects are created by copying the structure of an existing prototype object (see <a href="http://en.wikipedia.org/wiki/Prototype_pattern">prototype</a> creational design pattern). Here's another bit of JavaScript pseudo-code that shows how this might work:</p>

<pre><code>var person_proto = {
    name: "no name",
    age: 0
};

var o = {};
o.prototype = person_proto; // this won't actually work!
</code></pre>

<p>Please note that the above actually won't work the way you intend it to if you run it (it will simply create a new property called "prototype" on "<code>o</code>"!). The object "<code>o</code>"'s prototype will not get set. In fact JavaScript does not provide a mechanism to assign a value to an object instance's prototype (Mozilla and WebKit browsers do however permit this via a special extension property named <code>__proto__</code> - but this is not a part of the ECMAScript standard and should not be relied upon). Having said that, in essence, what has been given above is what happens when you inherit prototypally. Here, "<code>o</code>" is a new object whose prototype is a reference to another object (<code>person_proto</code>). When you access the <code>name</code> property like so:</p>

<pre><code>print(o.name);
</code></pre>

<p>The JavaScript engine would actually resolve the "name" property on the object's prototype since the object itself does not have a property called "name". But since the JavaScript language does not allow one to assign the prototype on an object instance how can we achieve this sort of inheritance in a standards compliant manner? <a href="http://en.wikipedia.org/wiki/Douglas_Crockford">Douglas Crockford</a> has discussed precisely this in his <a href="http://javascript.crockford.com/prototypal.html">blog post</a> on prototypal inheritance. His solution basically takes advantage of the fact that while you cannot assign the prototype of an object instance you can in fact assign the prototype on a <code>Function</code> object. Here's a utility routine that allows us to inherit prototypally from another object.</p>

<pre><code>function inherit(o) {
    function F() {}
    F.prototype = o;
    return new F();
}
</code></pre>

<p>And here's some code that shows how we'd use this function to inherit from the <code>person_proto</code> object defined in the previous snippet:</p>

<pre><code>var gender_person = inherit(person_proto);
gender_person.gender = "f";
</code></pre>

<p>Note that I have also extended the <code>gender_person</code> object by tacking on the <code>gender</code> property to it. Imagine that I wish to inherit another object from <code>gender_person</code> and add a "<code>married</code>" boolean member field to it. Here's how I'd go about it.</p>

<pre><code>var marital_person = inherit(gender_person);
marital_person.married = false;
</code></pre>

<p>Here's the inheritance chain depicted pictorially:</p>

<blockquote>
  <p><img src="http://blogorama.nerdworks.in/images/proto-inherit.png" alt="Inheritance chain of sample object." title="" /></p>
</blockquote>

<p>Note that the inheritance relationship is completely between object instances and not types. Also note the following aspects of this style of programming:</p>

<ul>
<li>Each "inherit" operation is essentially an object instantiation.</li>
<li>Each "inherit" seems to be always accompanied with the definition of new members on the new object.</li>
</ul>

<p><a href="http://en.wikipedia.org/wiki/ECMAScript">ECMAScript</a> version 5 therefore adds a new function called <a href="http://msdn.microsoft.com/en-us/library/ff925952(v=VS.94).aspx"><code>Object.create</code></a> that does exactly this. Here's the same example done using <code>Object.create</code> instead of our homebrewed <code>inherit</code>.</p>

<pre><code>//
// create basic person prototype object; this
// object's prototype will be equal to Object.prototype
//
var person_proto = {
    name: "no name",
    age: 0
};

//
// inherit from "person_proto" and add a new member
// field called "gender"
//
var gender_person = Object.create(person_proto, {
    gender: {
        value: "f",
        writable: true,
        enumerable: true,
        configurable: true
    }
});

//
// inherit from "gender_person" and add a new member
// field called "married"
//
var marital_person = Object.create(gender_person, {
    married: {
        value: false,
        writable: true,
        enumerable: true,
        configurable: true
    }
});

for(var i in marital_person)
    print(sprintf("marital_person.%s = %s", i, marital_person[i]));
</code></pre>

<p>Here's the output we get when we run this snippet (you can try it in the <a href="http://blogorama.nerdworks.in/entry-JavaScriptevalconsole.aspx">Eval</a> console yourself if you like - just make sure that you're running a browser that has support for ECMAScript 5 - which is most modern browsers).</p>

<pre><code>marital_person.married = false
marital_person.gender = f
marital_person.name = no name
marital_person.age = 0
</code></pre>

<p>Its interesting to observe that when you use <code>for...in</code> to reflect on an object it seems to walk the prototype chain bottom up. In the output above, it printed the properties on <code>marital_person</code> first, then <code>gender_person</code> and finally <code>proto_person</code>. This prototypal nature of the language is what enables you to do powerful things such as adding new members to even core library types such as <code>Object</code>, <code>String</code>, <code>Array</code> etc. When you add a new <code>trim</code> function to <code>String.prototype</code> for instance, it automagically shows up not just on new string objects created henceforth but on all string instances that are alive at that point in time! This is made possible because during the actual member resolution process the runtime walks the prototype chain to locate it before giving up.</p>

<h3 id="butiwantmynew">But I want my new!</h3>

<p>What I have described so far is the way inheritance was designed to work in JavaScript. Desiring to cater to developers who are familiar with static languages such as Java (which was really taking off at the time JavaScript was introduced), Netscape decided to make the unfortunate choice of simulating classical object instantiation and type inheritance behavior by introducing <a href="http://en.wikipedia.org/wiki/Syntactic_sugar">syntactic sugar</a> (or maybe it should be called <em>syntactic salt</em>!) that hid the prototypal nature from the programmer. The end result is a construct that ends up being not quite classical inheritance while deliberately misleading the developer on what's actually happening under the covers! Its fairly common to see code such as the following today:</p>

<pre><code>function Person(n, a) {
    this.name = n;
    this.age = a;
}

var p = new Person("Foo", 10);
</code></pre>

<p>Its interesting to see what is actually happening under the covers when you "new" up an object. Here's the last line of the snippet given above "expanded" to the actual instructions being run under the covers in pseudocode form.</p>

<pre><code>var p = {};                     // create empty object

p.prototype = Person.prototype; // assign prototype (as before
                                // this won't actually set the
                                // prototype)

Person.call(p, "Foo", 10);      // run constructor on object
</code></pre>

<p>Briefly, an empty object gets created and its prototype gets assigned to <code>Person</code>'s prototype and the constructor function is invoked using the new object as its context. It is self-evident that there really isn't a "type" called "<code>Person</code>". The language just allows the developer to pretend like there is! In fact it even provides an "<code>instanceof</code>" operator that you can use to verify if an object is an instance of a particular "type". Here's how you use it</p>

<pre><code>function Person(n, a) {
    this.name = n;
    this.age = a;
}

var p = new Person("Foo", 10);
print(p instanceof Person); // prints "true"
</code></pre>

<p>What the operator does is to check if the prototype of the constructor function (<code>Person</code> in the snippet above) figures in the object's prototype chain. Here's a possible naive implementation of the "<code>instanceof</code>" operator as a JavaScript function with some sample usage:</p>

<pre><code>function instanceOf(o, t) {
    if(typeof(t) !== "function")
        throw "Pass a Function object for type name.";
    if(typeof(o) !== "object")
        throw "Object must not be a primitive type.";
    var proto = t.prototype;
    var op = Object.getPrototypeOf(o);
    while(op) {
        if(proto === op)
            return true;
        op = Object.getPrototypeOf(op);
    }

    return false;
}

function Person(n, a) {
    this.name = n;
    this.age = a;
}

var p = new Person("Foo", 10);
print(instanceOf(p, Person)); // prints "true"
</code></pre>

<p>With that we conclude our brief review of how inheritance was designed to work in JavaScript. I have deliberately not discussed how we can simulate classical inheritance patterns in JavaScript though that is very much possible. Douglas Crockford has covered this topic in <a href="http://www.crockford.com/javascript/inheritance.html">this article</a> but he ended up adding the following footnote to it - presumably many years after he'd written that article (emphasis mine):</p>

<blockquote>
  <p>I have been writing JavaScript for 8 years now, and I have never once found need to use an <code>uber</code> function. The <code>super</code> idea is fairly important in the classical pattern, but it appears to be unnecessary in the prototypal and functional patterns. <strong>I now see my early attempts to support the classical model in JavaScript as a mistake</strong>.</p>
</blockquote>]]>
      </content:encoded>
      <wp:comment>
        <wp:comment_id>124</wp:comment_id>
        <wp:comment_author>Ganeshji Marwaha</wp:comment_author>
        <wp:comment_author_email></wp:comment_author_email>
        <wp:comment_date_gmt>2011-04-04 05:39:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Well rounded tutorial as usual Raj. I have become a loyal reader.]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>125</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2011-04-04 06:46:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks Ganesh!]]>
        </wp:comment_content>
      </wp:comment>
    </item>
    <item>
      <title>Poor man&apos;s network bandwidth detection technique</title>
      <link>http://ghost-nerd.azurewebsites.net/poormansnetworkbandwidthdetect</link>
      <dsq:thread_identifier>16</dsq:thread_identifier>
      <wp:post_date_gmt>2006-04-01 06:22:54</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>I am currently working on an online e-learning/collaboration tool that features all the bells and whistles that one would normally expect of such a tool. The basic functioning of the application is fairly straightforward in that it let's a <em>presenter</em> collaborate with a set of <em>participants</em> by passing messages around through a web server. There was this recent requirement where the application had to automatically detect the network bandwidth available to a user and provide appropriate warnings on finding that it is less than the minimum required. The idea is to measure the net time it takes for a message to travel from the presenter to the web server and then from the web server to the participant (and vice versa).  </p>

<p>The first thing that you would probably try is:  </p>

<ul>
<li>have the presenter put a timestamp on the message that she sends (let's call this <em>PrTS</em> - for <em>presenter timestamp</em>)</li>
<li>have the server put another timestamp before forwarding it to the participant (this would be <em>SvrTS</em> - for <em>server timestamp</em>)</li>
<li>and finally, let the participant mark the time of receipt of message and do a little arithmetic to figure out the net latency (let's call this <em>PaTs</em> - for <em>participant timestamp</em>); basically the net latency from presenter to participant is a simple matter of subtracting <em>PrTS</em> from <em>PaTS</em></li>
</ul>

<p>Perfect. Except that the whole thing comes crashing down when you realize that,</p>

<ol>
<li>the presenter, the server and the participant could be in different time-zones (but this can of course be handled), and  </li>
<li>the presenter and the participant might have set their clocks to the previous (or maybe the next) century!</li>
</ol>

<p>Basically, this system requires that the clocks on all three computers be absolutely accurate. So we went back to the drawing board and came up with this, IMO nifty little approach:</p>

<ul>
<li>the presenter sends out a message of a fixed size with <em>a timestamp</em> - i.e. with presenter's local time (let's call this <em>PrTS1</em>)</li>
<li>the server plonks its timestamp on to the message before forwarding it to the participant (let's call this one <em>SvrTS1</em>)</li>
<li>the participant receives the message, marks the time of receipt and just sits pretty (let's call this <em>PaTS1</em>)</li>
<li>the presenter, after sending the first message, waits for a random interval (say 5 seconds) and sends out a <em>second</em> message, again with a timestamp (let's call this <em>PrTS2</em>)</li>
<li>the server, as before puts its time of receipt on the message and forwards it to the participant (<em>SvrTS2</em>)</li>
<li><p>the participant, upon receiving this second message, records the time of receipt (<em>PaTS2</em>) and does the following arithmetic to figure out the latency</p>

<table>
<tbody>
<tr class="odd">
<td align="left">Presenter to Server latency (PrSvrL)</td>
<td align="left">=</td>
<td align="left">( SvrTS2 - SvrTS1 ) - ( PrTS2 - PrTS1 )</td>
</tr>
<tr class="even">
<td align="left">Server to Participant latency (SvrPaL)</td>
<td align="left">=</td>
<td align="left">( PaTS2 - PaTS1 ) - ( SvrTS2 - SvrTS1 )</td>
</tr>
<tr class="odd">
<td align="left">And finally, Presenter to Participant latency (PrPaL)</td>
<td align="left">=</td>
<td align="left">PrSvrL + SvrPaL</td>
</tr>
</tbody>
</table></li>
</ul>

<p>Now I know this sounds complicated, but really, it isn't. Work it out; it seems to work! :)</p>

<p><strong>[Updated - 27 May, 2006]</strong></p>

<p>Well, some further analysis reveals that this algorithm <em>does not</em> in fact measure <em>latency.</em> What it does measure however is <strong>jitter</strong>, i.e., <em>variations</em> in latency. We are only measuring the difference between the latencies of the first message and the second message and not the latency itself. Sigh!</p>]]>
      </content:encoded>
    </item>
    <item>
      <title>JavaScript strict mode restrictions</title>
      <link>http://ghost-nerd.azurewebsites.net/javascriptstrictmoderestrictio</link>
      <dsq:thread_identifier>17</dsq:thread_identifier>
      <wp:post_date_gmt>2011-08-01 17:34:52</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>In the <a href="http://blogorama.nerdworks.in/entry-OnJavaScriptstrictmode.aspx">previous post</a> we took a look at what strict mode was all about. Today we review some of the key restrictions that become applicable when strict mode is active.</p>

<ol>
<li><h4 id="identifiersmustbedeclaredbeforetheycanbeassignedto">Identifiers must be declared before they can be assigned to</h4>

<p>This aspect in my opinion makes strict mode worthwhile all on its own even if there was nothing more to it. Undeclared variable assignments do not automatically get added as expando properties on the global object.</p>

<pre><code>"use strict";
foo = 10; // ReferenceError: Variable undefined in strict mode
</code></pre>

<p>With this in place, the following snippet that I'd given in the <a href="http://blogorama.nerdworks.in/entry-OnJavaScriptstrictmode.aspx">first post</a> under the "What is strict mode?" section will fail to run and throw a "ReferenceError" instead because of the typo in the variable name "product" in the assignment inside the "for" loop.</p>

<pre><code>function findProduct(numbers) {
    "use strict";
    var product = 0,
        len = numbers.length;
    for(var i = 0; i &lt; len; ++i) {
        prodct = product * numbers[i]; // ReferenceError: Variable undefined in strict mode
    }
    return product;
}
</code></pre></li>
<li><h4 id="noautomaticcontextforcontextlessfunctioncalls">No automatic context for context-less function calls</h4>

<p>Functions that are called without setting an explicit context do not automatically get the "global object" in "this". Consider the following snippet:</p>

<pre><code>function foo() {
    // prints "true"
    print(this === window);
}
foo();
</code></pre>

<p>Here, "foo" is being invoked without setting an explicit context object, i.e., we are not calling it like so:</p>

<pre><code>foo.call({foo: "bar"});
</code></pre>

<p>In unrestricted mode this causes the context to be automatically initialized to the "global" object, which in browsers is the "window" object. Since the snippet above was running in unrestricted mode, the expression "this === window" evaluates to true. If we modify the function like so however, we see that "this" is no longer equal to "window":</p>

<pre><code>function foo() {
    "use strict";
    // prints "false"
    print(this === window);
}
foo();
</code></pre></li>
<li><h4 id="reservedkeywordscannotbeidentifiernames">Reserved keywords cannot be identifier names</h4>

<p>Naming variables and functions as <code>eval</code>, <code>arguments</code>, <code>implements</code>, <code>let</code>, <code>private</code>, <code>public</code>, <code>yield</code>, <code>interface</code>, <code>package</code>, <code>protected</code> and <code>static</code> will cause errors.</p>

<pre><code>"use strict";
var yield; // SyntaxError: Expected identifier
</code></pre></li>
<li><h4 id="violationsofes5propertyconfigurationcauseerrors">Violations of ES5 property configuration cause errors</h4>

<p>Violations of the configuration as specified in the property descriptor for ES5 properties will cause errors to be thrown in strict mode instead of them being silently ignored. Here are some examples:</p>

<ol><li><p><em>Writing to a non-writable property:</em></p>

<pre><code>"use strict";
var person = Object.create({}, {
    name: {
        value: "foo",
        writable: false,
        configurable: true,
        enumerable: true
    }
});


// TypeError: Assignment to read only properties not allowed in 
// strict mode
person.name = "bar";
</code></pre>

<p>Note the line highlighted in bold. Setting the "writable" property descriptor to "false" makes the "name" property of the "person" object read-only. Attempts to assign to this property will be silently ignored in unrestricted mode but causes a "TypeError" to be thrown in strict mode.</p></li>
<li><p><em>Changing configuration of a non-configurable property:</em></p>

<pre><code>"use strict";
var person = Object.create({}, {
    name: {
        value: "foo",
        writable: false,
        configurable: false,
        enumerable: true
    }
});


// TypeError: Cannot redefine non-configurable property 'name'
Object.defineProperty(person, "name", {
    value: "bar",
    writable: true,
    configurable: true,
    enumerable: true
});
</code></pre>

<p>Here we attempted to change the property descriptor on a non-configurable object. Again, an error that would have gone unnoticed in unrestricted mode results in a "TypeError" being thrown in strict mode.</p></li></ol></li>
<li><h4 id="writingtoreadonlyaccessorproperties">Writing to read-only accessor properties</h4>

<p>Writing to accessor properties that do not have a "setter" defined causes errors to be thrown instead of being silently ignored:</p>

<pre><code>"use strict";
var person = Object.create({}, {
    name: {
        get: function() {
            return "foo";
        },
        configurable: false,
        enumerable: true
    }
});


// TypeError
person.name = "bar";
</code></pre>

<p>Here, "name" is an accessor property that does not have a "setter" method defined. Attempts to assign a value to this property results in an error in strict mode while being quietly ignored in unrestricted mode.</p></li>
<li><h4 id="cannotextendnonextensibleobjects">Cannot extend non-extensible objects</h4>

<p>Extending a non-extensible object throws an error in strict mode instead of being silently ignored:</p>

<pre><code>"use strict";
var person = {
    name: "foo"
};
Object.preventExtensions(person);


// TypeError: Cannot create property for a non-extensible object
person.age = 10;
</code></pre></li>
<li><h4 id="othersundryrestrictions">Other sundry restrictions</h4>

<p>There are a few other sundry restrictions for strict mode code which are perhaps somewhat less frequently used. I have briefly reviewed them below:</p>

<ol><li><p>Numeric constants are no longer interpreted as having an octal base if you put a leading zero.</p></li>
<li><p>Variable/function instantiations in strict mode "eval" code occur in an environment that is local to the "eval" code and not in the environment of the calling code. This means that "eval" code cannot introduce new identifiers in the caller's execution context/scope.</p></li>
<li><p>"arguments" is immutable, i.e., you cannot arbitrarily extend the "arguments" object by tacking on your own properties to it. Now why anyone would even want to do this is puzzling to me but it must have been happening often enough for Ecma to take the effort to specify that you can no longer do it in strict mode!</p></li>
<li><p>"arguments.callee" and "arguments.caller" are not available in strict functions. I cannot say that I am completely happy with this particular restriction!</p></li>
<li><p>Creating duplicate property definitions on an object is not allowed in strict mode code. The following snippet for instance, produces an error in strict mode:</p>

<pre><code>"use strict";
var o = Object.create({}, {
    name: {
        value: "foo"
    },
    name: {
        value: "bar"
    }
});
</code></pre>

<p>This code throws up a "SyntaxError" with the message, "<em>Multiple definitions of a property not allowed in strict mode</em>". In unrestricted mode, "o.name" would have the value "bar".</p></li>
<li><p>Calling "delete" on an ES5 property which has its "configurable" property set to "false" results in an error being thrown in strict mode. This is a variation on the restriction discussed in point 4 above.</p></li>
<li><p>The JavaScript "with" statement is not allowed in strict mode code.</p></li>
<li><p>It is not allowed to create functions with duplicate parameter names in strict mode. Again, it defies logic as to why anyone would want to do this but there it is!</p></li></ol></li>
</ol>

<h3 id="somebestpractices">Some best practices</h3>

<p>Here are some things that you should perhaps consider while writing code that uses strict mode:</p>

<ol>
<li><p>Given that "strict mode" is a fairly recent phenomenon, unless all your users have been conscientiously updating their favorite browser to a new version, chances are high that you will have some percentage of visitors to your web app who are running a JS engine that does not understand "strict mode". This means that basically all of your code is going to run in unrestricted mode regardless of whether or not you've used the strict mode directive. It becomes important therefore to always test your code in unrestricted mode and make sure that everything is still peachy.</p></li>
<li><p>Now, even if a major chunk of your end users are on browsers that don't support strict mode it still makes sense to use strict mode in your development environment because a large part of strict mode is about enforcing JavaScript development best practices and you can benefit from automated enforcement at least during development. Just make sure that you test everything in unrestricted mode before going live!</p></li>
<li><p>Enable strict mode in small increments instead of a one-shot quick fix. If you have a 3000 line JS file for instance, it is probably not wise to simply add the <code>"use strict";</code> directive at the top of the file as the semantic differences between the two modes can potentially result in subtle unforeseen bugs. Do it in smaller chunks at a function level and certainly use it with abandon for new code that you write.</p></li>
</ol>

<p>I'd encourage you to experiment and read up on strict mode. In my opinion, this is one of the best features introduced as part of ES5. Here are some resources that you are likely to find useful:</p>

<ul>
<li><a href="http://bit.ly/qOpOa7">IE10 Platform Preview developer guide documentation on strict mode</a></li>
<li><a href="http://bit.ly/opO8bw">Strict mode demo on IE test drive</a></li>
<li><a href="http://hacks.mozilla.org/2011/01/ecmascript-5-strict-mode-in-firefox-4/">Article on ES5 strict mode in Firefox 4</a> - has good information about strict mode in general</li>
<li><a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">The venerable ES5 spec</a> - doesn't exactly make for exhilarating reading but nothing like quoting the spec to nail an argument!</li>
</ul>

<p>With that we come to a close of the two part series on JavaScript strict mode. What do you folks think about this feature? Feel free to let me know what you think by leaving a comment.</p>]]>
      </content:encoded>
    </item>
    <item>
      <title>Now Blogorama features RSS syndication!</title>
      <link>http://ghost-nerd.azurewebsites.net/nowblogoramafeaturesrsssyndica</link>
      <dsq:thread_identifier>18</dsq:thread_identifier>
      <wp:post_date_gmt>2006-04-01 09:39:34</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>The nerd is pleased to anounce the general availability of <em><a href="http://blogs.law.harvard.edu/tech/rss">Really Simple Syndication</a></em> (RSS) on <em>Nerdworks Blogorama</em>! Muaha! ha! ha! ha! Please use the link pointed at by the orange button on the right hand side of your screen in your favourite <a href="http://www.google.com/search?q=RSS+feed+reader">RSS feed reader</a>.</p>

<p>A screen shot of what this looks like using <a href="http://www.google.com/reader/">Google's Feed Reader</a> is available <a href="images/rssread.png">here</a>.</p>]]>
      </content:encoded>
      <wp:comment>
        <wp:comment_id>10</wp:comment_id>
        <wp:comment_author>Vasanth</wp:comment_author>
        <wp:comment_author_email>vazant78@yahoo.com</wp:comment_author_email>
        <wp:comment_date_gmt>2006-04-02 14:34:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[The site looks pretty good. The reason behind the development of site sounds great. Cool Stuff!!!]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>11</wp:comment_id>
        <wp:comment_author>Ranju. V</wp:comment_author>
        <wp:comment_author_email></wp:comment_author_email>
        <wp:comment_date_gmt>2006-04-02 14:46:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks Vasanth!

-- 
Ranju. V
http://blogorama.nerdworks.in/
--
]]>
        </wp:comment_content>
      </wp:comment>
    </item>
    <item>
      <title>New borns</title>
      <link>http://ghost-nerd.azurewebsites.net/newborns</link>
      <dsq:thread_identifier>19</dsq:thread_identifier>
      <wp:post_date_gmt>2006-04-15 10:48:03</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>4 little babies of this animal were found in the attic of my home in Palakkad, Kerala. Cool eh? I am not sure what its called in English. The Malayalam name for this is <em>merugu</em>.</p>

<p><a href="images/m1_800x600.jpg"><img src="http://blogorama.nerdworks.in/images/m1.jpg" alt="" title="" /></a></p>

<p><a href="images/m2_800x600.jpg"><img src="http://blogorama.nerdworks.in/images/m2.jpg" alt="" title="" /></a></p>]]>
      </content:encoded>
      <wp:comment>
        <wp:comment_id>18</wp:comment_id>
        <wp:comment_author>Vasanth</wp:comment_author>
        <wp:comment_author_email>vazant78@gmai.com</wp:comment_author_email>
        <wp:comment_date_gmt>2006-04-19 14:49:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Looks cool... Good photograph!!!! Hope you have taken the photograph :)]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>19</wp:comment_id>
        <wp:comment_author>Ranju. V</wp:comment_author>
        <wp:comment_author_email></wp:comment_author_email>
        <wp:comment_date_gmt>2006-04-19 14:51:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks Vasanth.  Nope, I didn't take the picture, my Father did!
]]>
        </wp:comment_content>
      </wp:comment>
    </item>
    <item>
      <title>On preprocessors &amp; Java</title>
      <link>http://ghost-nerd.azurewebsites.net/onpreprocessorsjava</link>
      <dsq:thread_identifier>20</dsq:thread_identifier>
      <wp:post_date_gmt>2006-04-03 06:31:18</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>The following is a link to an open source pre-processor program for Java:</p>

<blockquote>
  <p><a href="http://jappo.opensourcefinland.org/">http://jappo.opensourcefinland.org/</a></p>
</blockquote>

<p>I think it is shockingly short-sighted on the part of Sun developers that they are so obstinately refusing to include a pre-processor with the Java compiler. While MACROs are admittedly the source of many bugs in the C and C++ world, a more reasonable approach should have been taken instead of completely cutting it out as the benefits derived out of using them is real and indispensable. C# and .NET for instance include a pre-processor that has relatively fewer capabilities as compared to the C/C++ pre-processor but still allow for the writing of conditionally compiled code. Microsoft has got it perfectly right on this count IMO.</p>

<p>If you're wondering where all this angst is coming from, we recently discovered that the changes that we had made to a certain applet for incorporating a set of changes was not implemented in the source branch for Microsoft's VM (yep, we have customers who still use that VM!). If we'd had conditional compilation then it would have been a simple matter of <em>#ifdef</em> ing out the relevant portions instead of having an entire branch!</p>

<p>The fact that an open source effort for developing a pre-processor for Java exists at all is evidence enough IMO of the need for it. Grrrr.</p>]]>
      </content:encoded>
    </item>
    <item>
      <title>What it takes to write 64-bit apps</title>
      <link>http://ghost-nerd.azurewebsites.net/whatittakestowrite64bitapps</link>
      <dsq:thread_identifier>21</dsq:thread_identifier>
      <wp:post_date_gmt>2006-05-02 12:38:35</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p><a href="http://www.wheaty.net/">Matt Pietrek</a> has written a nice new article on <a href="http://msdn.microsoft.com/">MSDN</a> about everything that you need to know to get started writing applications for 64-bit versions of Windows - otherwise known as <em>x64</em>. It is available here:</p>

<blockquote>
  <p><a href="http://msdn.microsoft.com/msdnmag/issues/06/05/x64/default.aspx">http://msdn.microsoft.com/msdnmag/issues/06/05/x64/default.aspx</a></p>
</blockquote>

<p>For your quick reference (and mine :) I've jotted down the important points here if you haven't got the time or inclination to read the article. Here goes.</p>

<ul>
<li>Moving from 32-bit to 64-bit is <em>not</em> just a re-compile away.</li>
<li>You get to address really really large chunks of memory (on the order of terabytes and even larger). Each process gets its own 8TB chunk of memory from the OS.</li>
<li>All system DLLs are loaded above 4GB typically at addresses around 0x7FF00000000.</li>
<li>The x64 linker assigns the default load address for 64-bit applications to just above 32 bits. This is being done so that you can quickly discover porting bugs. If you are for instance using a 32-bit pointer where you should have used a 64-bit pointer, because the base address is greater than what can be accommodated in 32 bits the pointer will effectively get truncated resulting in an access violation.</li>
<li>Most Win32 datatypes continue to retain the size from the 32-bit world. INTs, LONGs, WORDs and DWORDs continue to be 32-bits wide. HANDLEs have become 64-bits wide though.</li>
<li>x64 versions of Windows include a sub-system called WOW64 that allows 32-bit applications to just work on x64.</li>
<li>A 64-bit application <strong>cannot</strong> load 32-bit DLLs and vice versa. However 64 and 32-bit applications can still talk to each other using inter-process communication mechanisms (shared memory, named pipes, synchronization objects).</li>
<li>x64 is officially off limits for 16-bit applications.</li>
<li>Two copies of system DLLs are maintained - one for 64-bit applications and one for 32-bit applications. WOW64 silently re-directs file I/O on the system folder for 32-bit applications to <code>\Windows\SysWow64</code>. If you want to figure out the path to the 32-bit system folder from a 64-bit app then you can do that by calling <code>GetSystemWow64Directory</code>.</li>
<li>Just like the file system, WOW64 silently re-directs access to the registry also for 32-bit applications. This is to prevent each type of application from stepping on each other's toes, as can happen when a 64-bit app <code>CoCreateInstance</code>s a 32-bit COM component! So, a 32-bit application would see a different <code>HKEY_CLASSES_ROOT</code> (and a few other keys) as opposed to a 64-bit app.</li>
<li>x64 now includes a feature called <em>PatchGuard</em> which basically <a href="http://en.wikipedia.org/wiki/Blue_screen_of_death">BSOD</a>s your system if any kernel mode code alters important kernel mode data structures such as the <em>Interrupt Dispatch Table</em> (IDT). Hmm. Now there's a challenge for rootkit writers and tools such as <a href="http://www.sysinternals.com/Utilities/Regmon.html">Regmon</a> that rely on being able to mess around with the IDT.</li>
<li>CPU registers are now 64-bits wide (obviously) and are called <code>RAX</code>, <code>RBX</code>, <code>RCX</code>, <code>RDX</code>, <code>RSI</code> and so forth. 8 new general purpose registers have been added and are called <code>R8</code>, <code>R9</code>, <code>R10</code> and so on till <code>R15</code>.</li>
<li>No more <code>__cdecl</code>, <code>__stdcall</code>, <code>__fastcall</code> or <code>__thiscall</code>! There is only a single calling convention in x64 which passes the first 4 parameters to a function via <code>RCX</code>, <code>RDX</code>, <code>R8</code> and <code>R9</code> and the remaining parameters via the stack.</li>
</ul>

<p>A few quick points on writing code that works on 32-bit and 64-bit computers:</p>

<ul>
<li>Pointers <em>cannot</em> be stored in 32-bit types such as <code>int</code>s, <code>long</code>s or <code>DWORD</code>s.</li>
<li>Use <code>DWORD_PTR</code>s, <code>INT_PTR</code>s and <code>LONG_PTR</code>s when you want to store pointer values. These types automatically become 64-bits wide on x64 systems (after a recompile that is).</li>
<li>When you use functions like <code>printf</code> and <code>sprintf</code> do not use <code>%X</code> to print pointer values. Use <code>%p</code> and you're automagically protected.</li>
<li>Inline assembly is not supported in the 64-bit C++ compiler. Boo! hoo!</li>
</ul>]]>
      </content:encoded>
    </item>
    <item>
      <title>Turn off VS.NET 2005 deprecation</title>
      <link>http://ghost-nerd.azurewebsites.net/turnoffvsnet2005deprecation</link>
      <dsq:thread_identifier>22</dsq:thread_identifier>
      <wp:post_date_gmt>2006-05-25 09:43:32</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>If you've been compiling projects created using earlier versions of VisualStudio in VisualStudio 2005 then you have most certainly noticed the new security warnings that get displayed whenever an in-secure CRT routine is invoked from your code. If you call <code>strcpy</code> for instance, you'd see this:</p>

<pre><code>    warning C4996: 'strcpy' was declared deprecated
    This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use
    _CRT_SECURE_NO_DEPRECATE. See online help for details.
</code></pre>

<p>If you're writing new code then it is generally a good idea to listen to this warning and change your code. If you are building an existing project however (an open source project for example) then you're likely to get hundreds of <code>C4996</code> warnings. One straightforward way of turning them off is to disable deprecation warnings by defining <code>_CRT_SECURE_NO_DEPRECATE</code>.</p>

<p>If you've got a large solution with 15-20 projects and 2-3 build configurations in each then defining this symbol for each project can be one seriously daunting task. In a 10 project solution with each project having a "Debug" and a "Release" configuration for instance you'd have to define this symbol in the project properties dialog 20 times (10 * 2)! I found myself having to do this often enough to warrant the writing of a small VisualStudio macro to do the job. This macro captures the preprocessor definitions from an input box and adds it to all the configurations of each project that is currently selected in the solution explorer. Here's the macro definition:</p>

<pre><code>Public Sub AddPreprocessorMacroToAllProjects()

    '
    ' check whether at least one project has been selected
    '
    If DTE.ActiveSolutionProjects.Length = 0 Then
        MsgBox("Please select the Visual C++ project(s) " + _
            "to which you would like a macro to be added.")
        Exit Sub
    End If

    '
    ' get the macro names and values
    '
retry:
    Dim macro As String
    macro = InputBox("Please enter one or more macros " + _
        "(e.g. _WIN32_WINNT=0x0500; WINVER=0x0500)", _
            "Enter Macros").Trim()
    If macro.Length = 0 Then
        If MsgBox("An empty macro was entered.  Retry?", _
                MsgBoxStyle.YesNo, _
                "Wrong macro") = MsgBoxResult.Yes Then
            GoTo retry
        Else
            Exit Sub
        End If
    End If

    '
    ' now iterate through each project in the array and add the
    ' macro to all the configurations of all visual c++ projects
    '
    Dim i As Integer
    Dim project As Project
    Dim VCProjectKind As String = "{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}"

    For i = 0 To DTE.ActiveSolutionProjects.Length - 1
        project = DTE.ActiveSolutionProjects(i)

        '
        ' is it a visual c++ project?
        '
        If project.Kind = VCProjectKind Then
            Dim vcproj As Microsoft.VisualStudio.VCProjectEngine.VCProject
            vcproj = project.Object
            Dim j As Integer

            '
            ' iterate through each configuration on this project
            '
            For j = 1 To vcproj.Configurations.Count
                Dim config As Microsoft.VisualStudio.VCProjectEngine.VCConfiguration
                config = vcproj.Configurations(j)

                '
                ' now add the macro to the compiler settings of this configuration
                '
                Dim cl As Microsoft.VisualStudio.VCProjectEngine.VCCLCompilerTool
                cl = config.Tools("VCCLCompilerTool")
                cl.PreprocessorDefinitions = cl.PreprocessorDefinitions + "; " + macro
            Next
        End If
    Next

    MsgBox("Done.")

End Sub
</code></pre>

<p>Feel free to use it if you find it useful!</p>]]>
      </content:encoded>
    </item>
    <item>
      <title>On lying and saving the planet</title>
      <link>http://ghost-nerd.azurewebsites.net/onlyingandsavingtheplanet</link>
      <dsq:thread_identifier>23</dsq:thread_identifier>
      <wp:post_date_gmt>2006-04-01 06:53:45</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>The February edition of the <a href="http://www.chip-india.com/">Chip India</a> magazine (the dead trees version that is) reports that the United States Department of Defense now has a tool that let's them <em>remotely</em> detect whether somebody is lying! The <em>Remote Personnel Assistance</em> (RPA) will apparently be used as a "remote or concealed lie detector during prisoner interrogation". It works by reading information from beams reflected off a suspect's body. Where's the planet heading I ask, if a man cannot lie in peace!</p>

<p>In other news (again from the same magazine), scientists at the Massachussetts Institute of Technology have found found that algae can help clean the planet up by laundering it off all the CO<sub>2</sub> spewed out by factories and vehicles. That's good news because now you can present a straight face while telling your spouse/parent that they are acting in an extremely un-eco-friendly manner by asking you to clean your room up and that such interference while you are busy saving Mother Earth is not appreciated!</p>]]>
      </content:encoded>
    </item>
    <item>
      <title>Windows hooks &amp; call sequence</title>
      <link>http://ghost-nerd.azurewebsites.net/windowshookscallsequence</link>
      <dsq:thread_identifier>24</dsq:thread_identifier>
      <wp:post_date_gmt>2006-06-06 15:49:58</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>I ran into an interesting little issue at work the other day. There is this program that I am working on which happens to embed <a href="http://office.microsoft.com/">Office</a> documents into a browser control hosted in a <code>CHtmlView</code> derived view window (that's right, we use <a href="http://en.wikipedia.org/wiki/Microsoft_Foundation_Classes">MFC</a>). The requirement was to popup a little toolbar with a <em>save</em> button whenever the user did some in-place editing on whatever's displayed in the browser control. We already knew how to detect whether at a given point in time the document currently displayed in the browser has been edited. This was done in this manner (error checks omitted for brevity):</p>

<pre><code>bool IsDirty()
{
    //
    // get hold of the html view object somehow
    //
    CHtmlView *pView = GetViewSomehow();

    //
    // get a pointer to the HTML document object
    //
    CComPtr&lt;IDispatch&gt; spDocument( pView-&gt;GetHtmlDocument() );

    //
    // turns out that you can QI on the doc object to
    // get a "IPersistStorage" object which is directly linked
    // to whatever happens to be embedded in the browser
    //
    CComPtr&lt;IPersistStorage&gt; spStorage;
    HRESULT hr = spDocument-&gt;QueryInterface( IID_IPersistStorage, (void **)&amp;spStorage );

    //
    // now we just call "IPersistStorage::IsDirty" to figure
    // out whether the doc's been edited
    //
    hr = spStorage-&gt;IsDirty();
    return ( hr == S_OK );
}
</code></pre>

<p>The question of course was to figure out when this routine will be invoked so we can display the toolbar. We first came up with an approach that involved continuously polling for changes by making some creative use of <code>CWinApp::OnIdle</code>. But that resulted in short bursts of CPU usage spikes and while the solution worked, it somehow didn't <em>feel</em> right!</p>

<p>The next thing we tried was to see if Windows <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/windowing/hooks.asp">hooks</a> can be put to some use here. We quickly set up a system-wide keyboard and mouse hook which "phoned home" so to speak whenever an event occurred by posting a custom message to a window. Whenever this message is received by the window it would call our clever little <code>IsDirty</code> routine to check if the document has been modified and get the toolbar displayed if need be. I let out a satisfied little burp at this point and compiled, linked and hit <a href="http://blogs.msdn.com/jmstall/archive/2005/09/22/F5_vs_CtrlF5.aspx">Ctrl+F5</a>.</p>

<p>I loaded up a <a href="http://www.microsoft.com/powerpoint/">PowerPoint</a> file into the browser control and pressed a few keys and whopeeee(!) the toolbar appeared straightaway. On doing some additional testing however I discovered that the damn thing showed up only with the second key press and not immediately after the first one! As it turns out, Windows delivers messages to hooks <em>before</em> they are delivered to the target application. So my hook was getting the keyboard event before PowerPoint was getting it and the call to <code>IsDirty</code> was consequently returning <code>false</code> as PowerPoint hadn't had a chance to mark the file as having been modified yet.</p>

<p>This thing drove us a little nuts until of course we figured a way out. I even made a newsgroup <a href="http://groups.google.com/group/microsoft.public.win32.programmer/browse_thread/thread/a27064ee86c786b5/69a72d1b421c2153?q=%22Windows+hooks+and+message+delivery%22&amp;rnum=1#69a72d1b421c2153">post</a> on this issue (with no response by the way). The solution in the end turned out to be quite simple.</p>

<p>Well-behaving hooks are required to call the <code>CallNextHookEx</code> function before returning from the hook routine. This is to let other hooks that are installed on the system have a go at the message. I had done a <code>PostMessage</code> to the application window <em>before</em> calling <code>CallNextHookEx</code> like so:</p>

<pre><code>PostMessage( hwndNotify, WM_HOOK_NOTIFY_MOUSE, 0, 0 );
return CallNextHookEx( NULL, nCode, wParam, lParam );
</code></pre>

<p>I made a small change to the order of invocation in this manner:</p>

<pre><code>LRESULT lResult = CallNextHookEx( NULL, nCode, wParam, lParam );
PostMessage( hwndNotify, WM_HOOK_NOTIFY_MOUSE, 0, 0 );
return lResult;
</code></pre>

<p>And voila! it started working! It must be pretty evident what the issue was by just looking at the change that was done. Looks like <code>CallNextHookEx</code>, apart from calling other hooks that may have been installed also actually delivers the message to the target application before returning. In this case, this was just what the doctor ordered :)!</p>

<p>Cool eh?!</p>]]>
      </content:encoded>
    </item>
    <item>
      <title>NTFS File Streams</title>
      <link>http://ghost-nerd.azurewebsites.net/ntfsfilestreams</link>
      <dsq:thread_identifier>25</dsq:thread_identifier>
      <wp:post_date_gmt>2006-05-04 07:49:34</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>The Windows NTFS file system has for a long long time included support for what is known as "streams". The idea is to view a file as being a container for 1 or more <em>data streams</em>. Security information for a file for instance could be stored in stream A and the main file data in stream B. The interesting thing is that the operating system will directly recognize only data stored in what is known as the <em>default stream</em>. This default stream is always called <code>$DATA</code> and crud stored in this stream alone is used while accounting for things like file size! To see streams in action try this out (this will obviously work only if your file system is NTFS):</p>

<ul>
<li>Open a command prompt.</li>
<li>Type <code>echo This is in the default stream &gt; ding.txt</code>.</li>
<li>Type <code>dir ding.txt</code>. System reports the size as being 32 bytes.</li>
<li>Now type <code>echo This is in a hidden stream &gt; ding.txt:bar</code>.</li>
<li>Type <code>dir ding.txt</code>. System still reports the size as being 32 bytes.</li>
<li>Type <code>more &lt; ding.txt</code>. System prints out <em>This is in the default stream</em>.</li>
<li>Now type <code>more &lt; ding.txt:bar</code>. System prints out <em>This is in a hidden stream</em>!</li>
</ul>

<p>As it turns out, you can specify a stream name along with the file name to deal with specific streams inside a file (<em>ding.txt:bar</em>). Further, for all practical purposes, data stored in non-default streams seem to get ignored by the operating system. While that is so, when you do things like copy/move files from one location to another the system does ensure that it copies the supplementary stream also with it. Now if you're a worm/virus writer I can see you rubbing your hands in glee thinking of all the security implications. But given that this capability has been around since 1993, chances are, all the security folks already know about it!</p>

<p>There's a nice little article on this topic at the following URL. Go take a look!</p>

<blockquote>
  <p><a href="http://www.osronline.com/article.cfm?article=457">http://www.osronline.com/article.cfm?article=457</a></p>
</blockquote>]]>
      </content:encoded>
      <wp:comment>
        <wp:comment_id>20</wp:comment_id>
        <wp:comment_author>aravind</wp:comment_author>
        <wp:comment_author_email>aravind@bell-fast.com</wp:comment_author_email>
        <wp:comment_date_gmt>2006-05-05 16:20:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[hmm.. bherry interesting dude.. this was actually not that techy.]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>21</wp:comment_id>
        <wp:comment_author>Ranju. V</wp:comment_author>
        <wp:comment_author_email></wp:comment_author_email>
        <wp:comment_date_gmt>2006-05-09 17:18:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Yeah.  I was pretty surprised when I read about this.  It is pretty amazing that a feature as cool as this is as little known as it is!]]>
        </wp:comment_content>
      </wp:comment>
    </item>
    <item>
      <title>Fedora Linux - Not for the faint of heart!</title>
      <link>http://ghost-nerd.azurewebsites.net/fedoralinuxnotforthefaintofhea</link>
      <dsq:thread_identifier>26</dsq:thread_identifier>
      <wp:post_date_gmt>2006-06-28 18:34:42</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>I happened to install the 64 bit edition of <a href="http://fedora.redhat.com">Fedora</a> Core 5 on my computer a few days back. Here's a log of all that transpired during that time before I could finally wipe the sweat off my forehead, heave a sigh of quiet satisfaction and watch GNOME load in all its resplendent glory!</p>

<p><strong>22nd July, 2006 - 15:00 hrs</strong> <br />
Received Fedora Core 64 bit bootable DVD via courier that I'd ordered through <a href="http://www.buylinuxdvd.com">Buylinuxdvd.com</a>. This is a great site for buying Linux distros in India by the way. You will not find fancy shmancy payment gateways though. But the service is just great.</p>

<p><strong>15:30 hrs</strong> <br />
Step 1 was of course, to carve out some space on my hard drive where I could install Fedora. Since I had lots of free space on one of my partitions I decided to hew it out of that partition and thus began my search for a free disk parition tool that could create paritions out of free space on existing partitions.</p>

<p>I went ahead and burnt the <a href="http://gparted.sourceforge.net/">GParted</a> <a href="http://gparted.sourceforge.net/livecd.php">LiveCD</a> ISO image onto a CD-ROM and rebooted, only to find GParted indefinitely <em>scanning</em> for hardware! Ran out of patience and tried to see if <a href="http://partitionlogic.org.uk/">PartitionLogic</a> was any better. Well it wasn't! It had an issue with crossing a certain line called <a href="http://support.microsoft.com/?kbid=73713">A20</a> (whatever that is!).</p>

<p>But this time I read somewhere that while GParted might take a while <em>scanning</em> things it <strong>will</strong> eventually deliver. Deciding to give it another shot, I rebooted into GParted, got the scanning thing going and went to watch my favourite TV show. By the time I came back (around 30 mins later) it had managed to figure out where my hard drive was and how it was laid out. God bless GParted developers! From there on it was a piece of cake (creating the partitions that is).</p>

<p>The lesson learnt here is of course that, "GParted's mill grinds slow, but sure."!</p>

<p><strong>20:00 hrs</strong> <br />
After a failed attempt at getting Fedora's <a href="http://fedora.redhat.com/projects/anaconda-installer/">Anaconda</a> installer to start in GUI mode I successfully got Fedora installed using the plain jane character mode interface! Hurray! I now had Fedora Linux installed <em>and</em> it didn't mess up my XP installation! The experience so far had been so smooth and bump free that the only way forward was - <strong><em>down</em></strong>!</p>

<p>It all started when I decided that I had to have a GUI!</p>

<p><strong>23rd July, 2006 - 02:20 hrs</strong> <br />
Still no GUI :(. Got a few <a href="http://www.nvidia.com/">Nvidia</a> display drivers for Linux downloaded on my XP system and was wondering how to access them from Fedora (my Windows partitions are all <a href="http://en.wikipedia.org/wiki/NTFS">NTFS</a> formatted you see). Turns out that some brilliant folks have actually reverse engineered the NTFS file system and written drivers for Linux that'll let us mount NTFS partitions on Linux in read-only mode! These guys rock!</p>

<p>I happily issued the command:</p>

<blockquote>
  <p><code>yum install kmod-ntfs</code></p>
</blockquote>

<p>Only to be informed that I needed to upgrade my kernel and must download and install a 21 MB package before even thinking about <em>kmod-ntfs</em>. I had already started using stilts by this time to prevent falling face down on the keyboard before I finally got the hint my body had been trying to give me all along, that I needed to grab some sleep and that getting <a href="http://xorg.freedesktop.org/wiki/">X</a> to work on Fedora could actually wait (what blasphemy)! I let the download progress however and fell into the closest bed that I could find, falling asleep long before actually hitting ground (or well, bed)!</p>

<p><strong>11:00 hrs</strong> <br />
No Sir. Still staring at the dang white blinking cursor on the black dang screen! I installed <em>kmod-ntfs</em> (finally!), copied the Nvidia drivers over and even got them to build and install. But doing an <code>init 5</code> continued to cause X to go nuts! After scouring all over the internet and trying 20 different home-brewed solutions I was almost ready to give up and accede defeat when I suddenly decided to take took a look at <code>/var/logs/Xorg.0.log</code>.</p>

<p>As it turned out, X was having trouble locating where exactly the module "nvidia" was to be found. I searched for "nvidia_drv.so" and found it easily enough in <strong>/usr/X11R6/lib64/modules/drivers</strong>. What I really wanted to do then was to give X a thorough shake and beat it into its puny brain where the driver lived. Grrr.</p>

<p><strong>24th July, 2006 - 00:00 hrs</strong> <br />
While I was thus considering the modalities of how such a shake could be administered I suddenly noticed that X was loading keyboard and mouse drivers from a different location - <code>/usr/lib64/xorg/modules</code>! Voila! That was of course the problem! I immediately decided to copy the nvidia driver files from <strong>/usr/X11R6/lib64/modules</strong> to this location. I did that first, then checked whether <strong>xorg.conf</strong> was configured right, ran <strong>nvidia-xconfig</strong> again just to be sure, checked whether the planets were aligned just right and ran the command:</p>

<blockquote>
  <p><code>startx</code></p>
</blockquote>

<p>No words can express the joy I experienced when a beautiful screen like this opened up in 16-bit splendour!</p>

<p><a href="images/fedora.png"><img src="http://blogorama.nerdworks.in/images/fedora6x4.png" alt="Fedora GNOME screenshot" title="" /></a></p>

<p>Only then did I wipe the sweat off my brow, heave a sigh of quiet satisfaction and rest my weary head for well-deserved sleep.</p>]]>
      </content:encoded>
      <wp:comment>
        <wp:comment_id>24</wp:comment_id>
        <wp:comment_author>Ramya</wp:comment_author>
        <wp:comment_author_email>ramyar@virtusa.com</wp:comment_author_email>
        <wp:comment_date_gmt>2006-06-31 04:22:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Good one...Had a tiring days pola]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>25</wp:comment_id>
        <wp:comment_author>Ranju. V</wp:comment_author>
        <wp:comment_author_email></wp:comment_author_email>
        <wp:comment_date_gmt>2006-06-31 05:40:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Yeah.  Tiring but rewarding!  Learnt a fair bit about how to get stuff done in Linux along the way too!]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>26</wp:comment_id>
        <wp:comment_author>Ar un RS</wp:comment_author>
        <wp:comment_author_email>sarun@virtusa.com</wp:comment_author_email>
        <wp:comment_date_gmt>2006-06-31 08:23:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[You can't learn anything without getting your hands dirty. This is one good lesson I learnt from your blog Raj. Good Xperiment. :)

BTW, how is the Fedora Xperience.

Con Amore,
Arun RS]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>27</wp:comment_id>
        <wp:comment_author>Ranju. V</wp:comment_author>
        <wp:comment_author_email></wp:comment_author_email>
        <wp:comment_date_gmt>2006-06-31 09:31:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[So far it has been really cool.  Right now I am trying to figure out how to use the GTK+ toolkit.

The idea is to write something on Linux that I'll want to use and in the process learn about Linux.  Let's see how it goes.  And I will of course, blog about all the interesting stuff!]]>
        </wp:comment_content>
      </wp:comment>
    </item>
    <item>
      <title>On Unicode</title>
      <link>http://ghost-nerd.azurewebsites.net/onunicode</link>
      <dsq:thread_identifier>27</dsq:thread_identifier>
      <wp:post_date_gmt>2006-06-16 11:17:58</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>There were some interesting <a href="http://www.unicode.org/">Unicode</a> related issues that cropped up recently in the project that I am working on that led to my doing a little research into what the fuss around unicode was all about. While I had <em>some</em> understanding of what Unicode was, there were a few things that I managed to learn anew. So, if you didn't know, here's the low down on the Unicode standard.</p>

<h4 id="firstsomebasicfacts">First, some basic facts</h4>

<ul>
<li><p>Firstly there are two parallel efforts aimed at standardizing the use of characters in computer programs! One is the <a href="http://en.wikipedia.org/wiki/Universal_character_set">ISO 10646</a> project called the <a href="http://en.wikipedia.org/wiki/Universal_character_set">Universal Character Set</a> (UCS) and the other is of course, Unicode. Around 1991 however, participants from both the projects fortunately decided that it would probably not be a good idea to have two competing standards for solving the same problem and decided to make both of their specifications compatible.</p></li>
<li><p>The primary goal of the Unicode standard is the definition of a universal character set (!), i.e., a character set to replace all the other character sets. Further, it would also be able to accommodate characters from all the languages spoken/written in the world.</p></li>
<li><p>It achieves this by assigning unique numbers - called <strong>code points</strong> - to each character. The Kannada letter "ka" for example has been assigned the code point 3221. What this means is that 3221 is forever the code for the Kannada letter "ka" all over the planet! Numbers such as this are assigned for all characters in all languages.</p></li>
<li><p>Code points are always assigned from the range 0x000000 to 0x10FFFF. You'd need 21 bits to represent this information at most. Around 5% of this space (works out to about 50,000 characters) is currently in use, another 5% is in preparation, about 13% is reserved for private use and about 2% is just reserved and not to be used for representing characters. The remaining 75% (around 8,35,000 characters) is open for future use!</p></li>
<li><p>Interestingly, effort is underway for assigning code points to characters from <a href="http://en.wikipedia.org/wiki/Fictional_language">imaginary languages</a> as well! <a href="http://en.wikipedia.org/wiki/J._R._R._Tolkien">JRR Tolkien</a> invented a whole slew of languages each with its own grammar and script for his epic trilogy - "The Lord of the Rings". Languages spoken and written by <a href="http://en.wikipedia.org/wiki/Elf">elves</a>, <a href="http://en.wikipedia.org/wiki/Dwarf">dwarves</a>, <a href="http://en.wikipedia.org/wiki/Hobbit">hobbits</a> and <a href="http://en.wikipedia.org/wiki/Ent">ents</a> (large walking/talking trees!) including a language called "<a href="http://en.wikipedia.org/wiki/Black_Speech">Black Speech</a>" used by <a href="http://en.wikipedia.org/wiki/Orc">orcs</a> and other such dark residents of <a href="http://en.wikipedia.org/wiki/Mordor">Mordor</a>!</p></li>
</ul>

<h4 id="somecaveats">Some caveats</h4>

<ul>
<li><p>You might have heard that Unicode characters can be represented by 2 byte unsigned integers. Well, this is not entirely true. While it is possible to represent all the Unicode characters that exist in the world today (which represents the most frequently used set of characters) using 2 byte unsigned integers (given that only around 50,000 characters exist and an unsigned short can have a maximum value of 65,535) it is possible that code points get created whose value is greater than the maximum that can be accommodated in an unsigned short. The most commonly used characters however have been assigned numbers within the range 0x0000 to 0xFFFF (this is called the <strong>Basic Multilingual Plane</strong> or <strong>BMP</strong>).</p></li>
<li><p>The closest data type in C/C++ that can be used to represent all the possible Unicode code points is a 4 byte integer. But this would also mean that 11 bits would get wasted for every character given that all the code points can be represented with just 21 bits. The size of the C/C++ <code>wchar_t</code> data-type is compiler dependent and the standard does not say anything on how big it must be.</p></li>
<li><p>Even while using 2 bytes per character you'll immediately notice that using them is wasteful when you're mostly dealing with characters belonging, for example to the <a href="http://en.wikipedia.org/wiki/ASCII">ASCII</a> character set (all the ASCII character code assignments have been retained in Unicode for ensuring backward compatibility by the way) since the second byte would always have the value zero for all the characters.</p></li>
</ul>

<h4 id="encodings">Encodings</h4>

<ul>
<li><p>To get around this problem some clever folks invented "encoding" schemes such as <a href="http://en.wikipedia.org/wiki/UTF-8">UTF-8</a> and <a href="http://en.wikipedia.org/wiki/UTF-16">UTF-16</a> that lay out how any Unicode code point from the entire spectrum can be represented using the least number of bytes. UTF-8 in particular is quite popular as it automatically ensures backward compatibility with older documents. All existing ASCII documents are already valid UTF-8 files. Here's a nifty little table that specifies how Unicode code points will be represented in the UTF-8 encoding scheme</p>

<table>
<thead>
<tr class="header">
<th align="left">Unicode</th>
<th align="left">UTF-8</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left">00000000 - 0000007F</td>
<td align="left">0xxxxxxx</td>
</tr>
<tr class="even">
<td align="left">00000080 - 000007FF</td>
<td align="left">110xxxxx 10xxxxxx</td>
</tr>
<tr class="odd">
<td align="left">00000800 - 0000FFFF</td>
<td align="left">1110xxxx 10xxxxxx 10xxxxxx</td>
</tr>
<tr class="even">
<td align="left">00010000 - 001FFFFF</td>
<td align="left">11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td>
</tr>
<tr class="odd">
<td align="left">00200000 - 03FFFFFF</td>
<td align="left">111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx</td>
</tr>
<tr class="even">
<td align="left">04000000 - 7FFFFFFF</td>
<td align="left">1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx</td>
</tr>
</tbody>
</table>

<p>The first column specifies the range of code points and the second column is a bitwise representation of how it will be denoted under UTF-8. Code points till 0x7F (ASCII character set) for instance will be represented using a single byte. For code points greater than 7F at least 2 bytes are needed and the number of contiguous bits set to 1 in the first byte till a zero is encountered indicates the number of bytes used to represent that code point. For example, 3 bytes are required for representing code points in the range 0x00000800 - 0x0000FFFF and this is indicated by the fact that the 3 most significant bits in the first byte is set to 1 followed by a zero bit.</p></li>
<li><p>UTF-8 is a "variable encoding" scheme where each character in the document can correspond to a varying number of bytes. Finding the size of such a document post encoding can be somewhat tricky.</p></li>
</ul>

<p>Most of this information has been taken from the following great resources on this topic.</p>

<blockquote>
  <p><a href="http://www.cl.cam.ac.uk/~mgk25/unicode.html">http://www.cl.cam.ac.uk/\~mgk25/unicode.html</a> <br />
  This is an FAQ on what it takes to support Unicode on Linux and has a lot of information on Unicode and UCS in general.  </p>
  
  <p><a href="http://www-128.ibm.com/developerworks/library/codepages.html">http://www-128.ibm.com/developerworks/library/codepages.html</a> <br />
  Talks about various character sets. Good introduction to Unicode.  </p>
  
  <p><a href="http://icu.sourceforge.net/docs/papers/unicode_wchar_t.html">http://icu.sourceforge.net/docs/papers/unicode_wchar_t.html</a> <br />
  Talks about issues relating to size of the C/C++ <code>wchar_t</code> data-type.  </p>
</blockquote>]]>
      </content:encoded>
    </item>
    <item>
      <title>On JavaScript code blocks, variable scope and variable hoisting</title>
      <link>http://ghost-nerd.azurewebsites.net/onjavascriptcodeblocksvariable</link>
      <dsq:thread_identifier>28</dsq:thread_identifier>
      <wp:post_date_gmt>2011-08-02 17:20:07</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>I am currently reading the book <a href="http://oreilly.com/catalog/9780596806767">JavaScript Patterns, by Stoyan Stefanov</a> and I came across this interesting tidbit of information regarding variable scopes in JavaScript. Consider the following C++ code:</p>

<pre><code>#include &lt;iostream&gt;

int main() {
  if(true) {
    int foo = 10;
  }

  std::cout&lt;&lt;foo;
  return 0;
}
</code></pre>

<p>Compiling this produces the following error:</p>

<pre><code>scope.cpp(8) : error C2065: 'foo' : undeclared identifier
</code></pre>

<p>This is only to be expected. In C++, code blocks automatically define a variable scope, i.e., variables defined inside the code block are not visible outside of it. The same behavior can be observed in many of the other popular programming languages in use today such as C# and Java with one notable exception - JavaScript! <img src="http://blogorama.nerdworks.in/images/_img9.png" alt="Smile" title="" /> Consider the following JavaScript snippet:</p>

<pre><code>function scope() {
    if(true) {
        var foo = 10;
    }
    print(foo);
}

scope();
</code></pre>

<p>Interestingly, this prints the value "10"! What's going on here? The first thing one needs to understand about JavaScript is the notion of "variable hoisting". Regardless of where you have declared a variable, the runtime treats it as though it has been declared at the start of the scope. Here's an example:</p>

<pre><code>function hoist() {
    try {
        print(undeclaredVariable === undefined);
        print("Yep, was able to refer to 'undeclaredVariable'.");
    }
    catch(e) {
        print("Could not use 'undeclaredVariable'.");
    }

    try {
        print(declaredLater === undefined);
        print("Yep, was able to refer to 'declaredLater'.");
    }
    catch(e) {
        print("Could not use 'declaredLater'.");
    }

    var declaredLater = 10;
}

hoist();
</code></pre>

<p>Running this snippet produces the following output:</p>

<pre><code>Could not use 'undeclaredVariable'.
true
Yep, was able to refer to 'declaredLater'.
</code></pre>

<p>In the function "hoist" we have declared a variable named "declaredLater" right at the end of the function body.  Interestingly, while we were unable to refer to an undeclared variable (evidenced by the fact that the "print" statement inside the first "catch" block got executed) we seem to have no problems referring to "declaredLater" even before it is actually declared. This is so because the JavaScript runtime "hoists" all the local variables declared in the function to the top of the function.  It is as though the function had been defined like so:</p>

<pre><code>function hoist() {
    var declaredLater;

    // stuff here

    declaredLater = 10;
}

hoist();
</code></pre>

<p>Note that though the variable itself gets declared at the top of the function, the initialization still happens only on the line where it occurred in the original function - which explains why the statement <code>print(undeclaredVariable === undefined)</code> ends up printing <code>true</code>.</p>

<p>Now, why did our "scope" function work the way it did? Turns out that in JavaScript curly braces do not introduce a variable scope. Only functions do. This means that variables declared inside of "if", "for", "while" etc. behave as though they have been declared at the top of the function. The aforementioned book therefore recommends moving all variable declarations to the top of the function. So, instead of doing the following:</p>

<pre><code>function foo() {
    var a = [1, 2, 3, 4];
    if(someCondition() === true) {
        var b, c, d;
        // do something with b, c, d
    }
    for(var i = 0; i &lt; a.length ; ++i) {
        // do something with "a"
    }
}
</code></pre>

<p>Do something like the following:</p>

<pre><code>function foo() {
    var a = [1, 2, 3, 4], b, c, d, i, len = a.length;

    if(someCondition() === true) {
        // do something with b, c, d
    }
    for(i = 0; i &lt; len ; ++i) {
        // do something with "a"
    }
}
</code></pre>

<p>This makes it clear that the scope of the variables in question is the function "foo".</p>

<p>The key takeaways therefore are the following:</p>

<ul>
<li>Code blocks do not determine variable scope in JavaScript. Functions are the only construct that can be used to limit scope of variables.</li>
<li>Regardless of where variables are declared, the runtime always treats them as though they have been declared at the beginning of the function in question.</li>
<li><p>If you need some global code to be executed, then use an immediate function (also known as a "self-executing" function) to limit the scope of the local variables you use in that code. So instead of doing the following:</p>

<pre><code>&lt;script&gt;
  var v1, v2;
  // some code here that uses v1 and v2
&lt;/script&gt;
</code></pre>

<p>Use code like this:</p>

<pre><code>&lt;script&gt;
  (function() {
      var v1, v2;
      // some code here that uses v1 and v2
  })();
&lt;/script&gt;
</code></pre></li>
</ul>]]>
      </content:encoded>
      <wp:comment>
        <wp:comment_id>139</wp:comment_id>
        <wp:comment_author>Kailash</wp:comment_author>
        <wp:comment_author_email>ckailash87@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2011-08-02 17:51:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Useful and very Helpful! Thanks!]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>140</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2011-08-02 17:53:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks Kailash!]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>147</wp:comment_id>
        <wp:comment_author>Thirumalai</wp:comment_author>
        <wp:comment_author_email>thirumalai_c_b@yahoo.co.in</wp:comment_author_email>
        <wp:comment_date_gmt>2011-09-06 17:15:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Super. Thanks.  However, I am a developer from the good old days of programming (1990).  So by convention, I used to declare the variables at the top by default, for that matter in Javascript or in C#.  This example in Javascript was a good one to know about its code blocks.]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>148</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2011-09-06 17:23:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks Thirumalai!]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>175</wp:comment_id>
        <wp:comment_author>Ram Sagar Mourya</wp:comment_author>
        <wp:comment_author_email>rammy.sagar@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2012-00-31 04:45:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks for sharing.
Now i understood the actual reason behind the variable scope.]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>176</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2012-00-31 05:45:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks Ram. Glad you found it useful.]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>201</wp:comment_id>
        <wp:comment_author>Mel</wp:comment_author>
        <wp:comment_author_email>melbaltazarsal@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2012-10-29 15:58:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks!  Very interesting tidbit of information in Javascript - hopefully knowing this will make me a better JS programmer.  This page is good too:

http://www.programmerinterview.com/index.php/javascript/javascript-block-scope/]]>
        </wp:comment_content>
      </wp:comment>
    </item>
    <item>
      <title>Python rocks!</title>
      <link>http://ghost-nerd.azurewebsites.net/pythonrocks</link>
      <dsq:thread_identifier>29</dsq:thread_identifier>
      <wp:post_date_gmt>2006-07-18 03:44:20</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>I have been dabbling with a bit of 3D graphics programming for the last couple of days; trying my hand at exporting models designed using the free 3D modelling software <a href="http://www.blender.org/">Blender</a> and getting them rendered using <a href="http://en.wikipedia.org/wiki/OpenGL">OpenGL</a>. Blender supports a <a href="http://www.python.org">Python</a> based scripting system where pretty much everything in Blender can be accessed via Python scripts. So, along the way I happened to see what Python was all about.</p>

<p>Exporting co-ordinates and normal vectors from Blender turned out to be fairly straightforward. The following script does a quick and dirty job of producing a file with all the numbers.</p>

<pre><code> import Blender;
 from Blender import *;

 import Blender.Scene;
 from Blender.Scene import *;

 f = open( "co.csv", "w" )

 scenes = Scene.Get(); # iterate thru all ze scenes
 for sc in scenes:
   objects = sc.getChildren(); # run thru all ze objects in this scene
   for obj in objects:
     if( obj.getType() != "Mesh" ): # we are interested only in meshes
       continue;
     print "exporting ", obj.name;
     f.write( "# " + obj.name + "\n" ); # write the name of the object
                                        # into the file; our renderer
                                        # ignores lines starting with
                                        # the '#' character

     data = obj.getData(0, 1); # get co-ord data
     for face in data.faces: # blender gives us the co-ords face-wise
       #
       # first we write out the normal vector for this polygon
       #
       f.write( "--" +
                ( '%f' % face.no.x ) + "," +
                ( '%f' % face.no.y ) + "," +
                ( '%f' % face.no.z ) + "\n" );

       #
       # now, write out all the vertices
       #
       for v in face.verts:
           f.write( ( '%f' % v.co.x ) + "," +
                    ( '%f' % v.co.y ) + "," +
                    ( '%f' % v.co.z ) + "\n" )

 f.close();
</code></pre>

<p>Nothing spectacular about the script really. Here's a screenshot of how Blender's default <em>suzanne monkey</em> model looks like in my OpenGL program.</p>

<blockquote>
  <p><img src="http://blogorama.nerdworks.in/images/suzanne.png" alt="suzanne monkey" title="suzanne" /></p>
</blockquote>

<p>But one problem I quickly ran into was with regard to the scale of the co-ordinates output by Blender. Sometimes Blender's data would cause the model to be rendered in gigantic proportions and I'd have to render it far into the screen to make it fit inside the window. What I really needed was a script that could <em>post-process</em> the co-ordinates from Blender (basically, scale them down). I figured I'll write it in Python (I could have done the scaling while exporting them from Blender of course, but where's the fun in that!) and boy was it cool, or was it cool!</p>

<p>Python supports this super-cool feature called "List comprehension" that allows you to succintly express operations that you want performed on elements in a collection. In my case the file containing the list of co-ordinates looked like this:</p>

<pre><code>-3.448783,-1.912737,-0.861946
-3.281278,-2.116843,-0.861946
-2.328871,-1.164436,-3.555760
-2.328871,-1.164436,-3.555760
-3.573251,-1.679874,-0.861946
-3.448783,-1.912737,-0.861946
</code></pre>

<p>And I wanted each of those numbers scaled down by a factor. The script turned out to be remarkably short and it has elegance written all over it!</p>

<pre><code> import string;

 #
 # open the source, dest files
 #
 src = open( "co.csv", "r" );
 dst = open( "cos.csv", "w" );

 #
 # process each line
 #
 line = src.readline();
 while( len( line ) &gt; 0 ):
  #
  # process it only if it is a non-comment and non
  # normal line
  #
  if( line[0] != "#" and line[0:2] != "--" ):
   line = string.join( [ str( float( x ) * 0.25 )
           for x in string.split( line, "," ) ], "," ) + "\n";
   dst.write( line );
   line = src.readline();

 src.close();
 dst.close();
</code></pre>

<p>Take special note of the highlighted line. Believe it or not, but that single line of code splits a line of comma delimited text, converts each resulting token into a float, multiplies it with 0.25, converts the value back into a string and then concatenates the list of converted values into a comma delimited string again! Now I know that some of you're thinking that we have traded off clarity of code for expressive power and that is true to an extent here. But it isn't anymore obtuse than, say a regular expression! I guess it boils down to personal preference at the end of the day.</p>

<p>I <em>could</em> have written 20 lines to do the same thing but I sure wouldn't be feeling as pleased as I am feeling right now! Python rocks!</p>]]>
      </content:encoded>
      <wp:comment>
        <wp:comment_id>28</wp:comment_id>
        <wp:comment_author>Akshay</wp:comment_author>
        <wp:comment_author_email></wp:comment_author_email>
        <wp:comment_date_gmt>2006-07-22 13:25:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Very nice blog indeed! I've been working with Blender for quite some time now and so too with Python. Nice to see someone else has discovered the joy of Python!]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>29</wp:comment_id>
        <wp:comment_author>Ranju. V</wp:comment_author>
        <wp:comment_author_email></wp:comment_author_email>
        <wp:comment_date_gmt>2006-07-22 14:31:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Joy of Python indeed! :)]]>
        </wp:comment_content>
      </wp:comment>
    </item>
    <item>
      <title>On the HTML5 Indexed DB API - Part 2 of n</title>
      <link>http://ghost-nerd.azurewebsites.net/onthehtml5indexeddbapipart2ofn</link>
      <dsq:thread_identifier>30</dsq:thread_identifier>
      <wp:post_date_gmt>2011-08-04 18:18:03</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>In the <a href="http://blogorama.nerdworks.in/entry-OntheHTML5IndexedDBAPIPart1ofn.aspx">previous post</a> in this series we covered the fundamentals of the Indexed DB specification. We continue the journey in this post and take a look at the API itself.</p>

<h3 id="buildinganofflinenotetakingapp">Building an offline note taking app</h3>

<p>For the rest of this series of posts, we'll try and build the client side data layer for a fictitious note taking web app. From a data model point of view it's about as simple as it can get. The app allows users to write text notes and tag them with specific key words. Each note will have a unique identifier which will serve as its key and apart from the note text, it will be associated with a collection of tag strings. Here's a sample note object represented in JavaScript object literal notation:</p>

<pre><code>var note = {
      id: 1,
      text: "Note text.",
      tags: ["sample", "test"]
    };
</code></pre>

<p>We'll build a <code>NotesStore</code> object that has the following interface:</p>

<pre><code>var NotesStore = {
        init: function(callback) {
        },

        addNote: function(text, tags, callback) {
        },

        listNotes: function(callback) {
        }
    };
</code></pre>

<p>It should be fairly self-evident as to what each method does. All method calls execute asynchronously and where a result is to be returned to the caller, the interface accepts a reference to a callback that is to be invoked with the result. Let's see what it takes to efficiently implement this object using an indexed database.</p>

<h3 id="testingforindexeddb">Testing for Indexed DB</h3>

<p>The root object that you deal with when talking to the indexed DB API is called <code>indexedDB</code>. In fact you can check for the presence of this object to see whether the current browser supports indexed DB or not. Like so:</p>

<pre><code>if(window["indexedDB"] === undefined) {
      // nope, no indexed DB!
    } else {
      // yep, we're good to go!
    }
</code></pre>

<p>Alternatively, you can use the <a href="http://www.modernizr.com/">Modernizr</a> JavaScript library to test for support for indexed DB like so:</p>

<pre><code>if(Modernizr.indexeddb) {
        // yep, go indexeddb!
    } else {
        // bleh! No joy!
    }
</code></pre>

<h3 id="asynchronousrequests">Asynchronous requests</h3>

<p>The asynchronous API calls work through what are known as "request" objects. When an asynchronous API call is made, it would return a reference to a "request" object which exposes two events - <code>onsuccess</code> and <code>onerror</code>. The former is raised when the API executes successfully and the latter is raised when it errors out. Here's what a typical call looks like:</p>

<pre><code>var req = someAsyncCall();
    req.onsuccess = function() {
        // handle success case
    };
    req.onerror = function() {
        // handle error
    };
</code></pre>

<p>As you work with the indexedDB API you eventually get to a point where it becomes somewhat hard to keep track of all the callbacks. In a future post I'll explore some ideas I am currently playing with on how we can simplify this further. For now though, to make our exploration of the API somewhat simpler I'll define and use a small utility routine that abstracts the "request" pattern away:</p>

<pre><code>var Utils = {
        errorHandler: function(cb) {
            return function(e) {
                if(cb) {
                    cb(e);
                } else {
                    throw e;
                }
            };
        },

        request: function (req, callback, err_callback) {
            if (callback) {
                req.onsuccess = function (e) {
                    callback(e);
                };
            }
            req.onerror = errorHandler(err_callback);
        }
    };
</code></pre>

<p>Now, I can write my async calls like so:</p>

<pre><code>Utils.request(someAsyncCall(), function(e) {
        // handle completion of call
    });
</code></pre>

<h3 id="creatingandopeningthedatabase">Creating and opening the database</h3>

<p>Creating/opening a database is done by calling the <code>open</code> method of the <code>indexedDB</code> object. Here's an implementation of the <code>NotesStore</code> object's <code>init</code> method:</p>

<pre><code>var NotesStore = {
    name: "notes-db",
    db: null,
    ver: "1.0",
    init: function(callback) {
        var self = this;
        callback = callback || function () { };
        Utils.request(window.indexedDB.open("open", this.name), function(e) {
            self.db = e.result;
            callback();
        });
    },

    .
</code></pre>

<p>The <code>open</code> method opens the database if it already exists or creates a new one if not. The success callback of the request object returned by <code>open</code> receives an event object as a parameter whose <code>result</code> property is a reference to the newly opened database. You can think of this as the object that represents the connection to the database. When this object is destroyed (or if you called its <code>close</code> method) the connection to the database is terminated.</p>

<h3 id="comingup">Coming up</h3>

<p>Now that we have the database created, in the next post, we'll go ahead and create the rest of the database objects.</p>]]>
      </content:encoded>
      <wp:comment>
        <wp:comment_id>144</wp:comment_id>
        <wp:comment_author>as</wp:comment_author>
        <wp:comment_author_email>alex_simons@hotmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2011-08-19 09:36:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks for putting this together. I&#39;m lost on one thing - in the last code sample, what does the &quot;callback = callback || function () {};&quot; do?

Thanks!
]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>145</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2011-08-19 17:57:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks for your comment. The line &quot;callback = callback || function(){}&quot; basically allows me to call &quot;callback&quot; later on without having to check if a callback function was passed to &quot;init&quot; or not. The expression on the right hand checks if &quot;callback&quot; has a valid value and if it does then its basically a self-assignment - nothing changes. If &quot;callback&quot; is null or undefined however then a blank no-op function gets assigned to &quot;callback&quot;. This allows me to not check whether &quot;callback&quot; is valid later on.]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>146</wp:comment_id>
        <wp:comment_author>Alex Simons</wp:comment_author>
        <wp:comment_author_email>alex_simons@hotmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2011-08-21 10:30:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks. That makes sense!]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>185</wp:comment_id>
        <wp:comment_author>sandeep</wp:comment_author>
        <wp:comment_author_email>sandeepn.9121@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2012-03-29 22:35:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[safagfasd]]>
        </wp:comment_content>
      </wp:comment>
    </item>
    <item>
      <title>On the HTML5 Indexed DB API - Part 1 of n</title>
      <link>http://ghost-nerd.azurewebsites.net/onthehtml5indexeddbapipart1ofn</link>
      <dsq:thread_identifier>31</dsq:thread_identifier>
      <wp:post_date_gmt>2011-08-03 16:10:34</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>Over the years the web has increasingly transformed from being just a repository of content to a marketplace of full-fledged functional applications. The suite of technologies that are bandied about these days under the "HTML5" banner have as a fundamental goal, the enablement of the building of this new breed of software. In this post (and over the next post or two) we review a technology that solves an important piece of the application puzzle - that of managing storage and retrieval of user specific data on the client side, called "Indexed DB". For almost as long as the web has been around, there has been a need for web sites to track visitor specific information in one form or another. Using HTTP cookies has so far been pretty much the only standards based option available to web developers. While plug-in based alternatives in the form of Silverlight and Flash do exist, the typical challenges imposed on end users who either do not have the plug-in in question installed or are using the wrong version serves to complicate matters significantly. Let's first briefly review what the available alternatives are for a web developer seeking to solve the problem of managing client side storage today.</p>

<h4 id="httpcookies">HTTP Cookies</h4>

<p>HTTP cookies allow web applications to store small amounts of textual data on the client side using specially crafted HTTP headers. Access to this data is provided via the browser DOM. JavaScript code must be used to parse and make sense of the data. While this works, there are significant challenges in working with cookies:</p>

<ul>
<li>Cookies are not allowed to be greater than 4 KB in size.</li>
<li>Cookies are transmitted with every request that the browser makes - even when it is requesting for things like images, script files or style sheets.</li>
<li>The programming model is not straightforward in that it is basically just text and you need to write code to parse and crack data stored in cookies.</li>
<li>Only textual data can be stored and retrieved.</li>
</ul>

<h4 id="plugins">Plug-ins</h4>

<p>Plug-ins have historically been the natural (if not the only) choice for web developers who have needs that are not catered to sufficiently by cookies. Technologies such as Silverlight, Flash and Google Gears come with their own brand of local storage options. While they are a better option as compared to cookies they do however present some unique challenges of their own:</p>

<ul>
<li>As stated earlier, the primary issue is that user experience is less than stellar when you encounter cases where the user either does not have the plug-in in question installed or has the wrong version installed and must therefore upgrade. Often users are logged in to their computers with user accounts that do not have the required permission to install new software and hence are simply locked out of the web application or functionality completely.</li>
<li>Web developers must familiarize themselves with the specific tool stack associated with the plug-in.</li>
</ul>

<h4 id="domstorage">DOM Storage</h4>

<p>DOM storage is a part of the HTML5 suite of specifications and is meant to be a replacement for HTTP cookies. This is actually a viable client side storage option. The idea is to basically provide a key/value based storage API that allows web applications to store user specific data in a persistent manner. The API is simple to use and it just works! However, there are some limitations to how it can be put to use which are to a large extent deliberate and by design:</p>

<ul>
<li>You can only store strings in DOM storage, i.e., both key and value must be JavaScript strings. You can however use JSON serialization to manage the storage and retrieval of objects.</li>
<li>Data stored in DOM storage is scoped by the domain, i.e., it will not be possible for code running in one domain to access DOM storage data stored under the context of a different domain. While this is a good thing, the limitation however is that it is not possible to scope this with a greater level of granularity - say by specific URLs within a domain.</li>
<li>There is no mechanism to iterate through all the data stored in DOM storage. You can only request the value for a specific key that you already know.</li>
</ul>

<p>With that brief overview of the alternatives let us move on to the topic of this post - the Indexed Database API.</p>

<h3 id="whatisindexeddb">What is Indexed DB?</h3>

<p>An Indexed DB is basically a persistent data store in the browser - a database on the client side. It defines an API that allows the storage and retrieval of key/value data. Like regular relational databases, it maintains indexes over the records it stores and developers use the Indexed DB JavaScript API to locate records by key or by looking up an index. Each database is scoped by "origin", i.e. the domain of the site that creates the database. The database is transactional and provides a means for traversing the data in a deterministic order.</p>

<p>The Indexed DB API includes a synchronous and an asynchronous version of pretty much all the interfaces. The asynchronous API is meant to be used from web apps when you are interacting with the database directly from the UI thread where having an API call block on an I/O operation is not acceptable. All blocking calls work asynchronously and results are reported via callbacks. The synchronous API counterparts are identical to the asynchronous versions except for the fact that there are no callbacks and results are returned directly.</p>

<h3 id="awordonthestatusofthespec">A word on the status of the spec</h3>

<p>The Indexed DB specification is currently (i.e., when this post was written) in draft status and should not be considered as being production ready. The specification itself is under active development and developers are encouraged to review it only with the objective of familiarizing themselves with an up and coming standard. Do not use it in production sites yet!</p>

<h3 id="settingyourdevelopmentenvironmentup">Setting your development environment up</h3>

<p>Before we proceed with the API itself, you might want to spend some time setting up your development environment up. For Internet Explorer (IE), an experimental implementation of the specification is available for download from Microsoft's <a href="http://html5labs.interoperabilitybridges.com/prototypes/indexeddb/indexeddb/info">HTML5 Labs</a> site. "HTML5 Labs" is an initiative from Microsoft for publishing prototype implementations of various key HTML5 specifications so that developers are able to experiment with them and provide feedback. The prototype implementation for Indexed DB works on Internet Explorer versions 8 and up and installing it is fairly straightforward.</p>

<ol>
<li><p>Download the prototype by clicking on the link "Download the Protoype now!" from <a href="http://html5labs.interoperabilitybridges.com/prototypes/indexeddb/indexeddb/info">here</a>.</p></li>
<li><p>Unzip the downloaded file.</p></li>
<li><p>If you are running a 32-bit version of Windows then run <em>vcredist_x86.exe</em>.</p></li>
<li><p>Register "sqlcejse40.dll" by running the following command from an elevated command prompt:</p>

<pre><code>regsvr32 sqlcejse40.dll
</code></pre>

<p>If everything goes well, then you should see a screen such as the following:</p>

<p><a href="http://blogorama.nerdworks.in/images/_img10.png"><img src="http://blogorama.nerdworks.in/images/_img11.png" alt="reg" title="reg" /></a></p></li>
</ol>

<p>Alternatively, get a recent version of <em>Google Chrome</em> or <em>Firefox</em> and you should be all set.</p>

<h3 id="comingup">Coming up.</h3>

<p>Now that we have the fundamentals covered, we'll go ahead and get started with the API itself from the next post. Stay tuned!</p>]]>
      </content:encoded>
    </item>
    <item>
      <title>On the HTML5 Indexed DB API - Part 3 of n</title>
      <link>http://ghost-nerd.azurewebsites.net/onthehtml5indexeddbapipart3ofn</link>
      <dsq:thread_identifier>32</dsq:thread_identifier>
      <wp:post_date_gmt>2011-08-05 19:13:56</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>In the <a href="http://blogorama.nerdworks.in/entry-OntheHTML5IndexedDBAPIPart2ofn.aspx">previous post</a> we covered some more background on working with the Indexed DB API and briefly reviewed the mechanics of creating a new database. In this post we take a look at some important Indexed DB constructs that one must be familiar with while working with the core APIs.</p>

<h3 id="objectstores">Object stores</h3>

<p>Object stores are the indexed DB equivalent of "tables" from the relational database world. All data is stored inside object stores and serves as the primary unit of storage. A database can contain multiple object stores and each store is a collection of records. Each record is a simple key/value pair. Keys must uniquely identify a particular record and can be auto-generated. The records in an object store are automatically sorted in ascending order by keys. And finally, object stores can be created and deleted only under the context of "version change" transactions. We'll see what a "version change" transaction is when we review transactions later on in this post.</p>

<h3 id="keysandvalues">Keys and Values</h3>

<p>Each record in the object store is uniquely identified by a "key". Keys can be arrays, strings, dates or numbers. For the purpose of comparison, arrays are considered to be greater than strings which are greater than dates which in turn are considered to be greater than numbers. Keys can be "in-line" keys or not. By "in-line" we indicate to indexed DB that the key for a particular record is actually a part of the value object itself. In our notes store sample for instance, each note object has an id property which contains the unique identifier for a particular note. This is an example of an "in-line" key, i.e., the key is a part of the value object.</p>

<p>Whenever keys are "in-line", we must also specify a "key path", i.e. a string that signifies how the key value can be extracted from the value object. The key path for "note" objects for instance is the string "id" since the key can be extracted from note instances by accessing the "id" property. But this scheme allows for the key value to be stored at an arbitrary depth in the value object's member hierarchy. Consider the following sample value object:</p>

<pre><code>var product = {
  info: {
    name: "Towel",
    type: "Indispensable hitchhiker item",
  },
  identity: {
    server: {
      value: "T01"
    },
    client: {
      value: "TC01"
    },
  },
  price: "Priceless"
};
</code></pre>

<p>Here, the following key path might be used:</p>

<pre><code>identity.client.value
</code></pre>

<h3 id="databaseversioning">Database versioning</h3>

<p>Indexed DB databases have a version string associated with them. This can be used by web applications to determine whether the database on a particular client has the latest structure or not. This is useful when you make changes to your database's data model and want to propagate those changes to existing clients who are on the previous version of your data model. You can simply change the version number for the new structure and check for it the next time the user runs your app and do the needful to upgrade the structure and migrate the data.</p>

<p>Version number changes must be performed under the context of a "version change" transaction. Before we talk about that though let's quickly review what "transactions" are.</p>

<h3 id="transactions">Transactions</h3>

<p>Like relational databases, indexed DB also performs all of its I/O operations under the context of transactions. Transactions are created through connection objects and enable atomic, durable data access and mutation. There are two key attributes for transaction objects:</p>

<ol>
<li><h4 id="scope">Scope</h4>

<p>The scope determines which parts of the database can be affected through the transaction. This basically helps the indexed DB implementation determine what kind of isolation level to apply to objects during the lifetime of the transaction. You can think of the scope as simply being a list of object stores that will form a part of the transaction.</p></li>
<li><h4 id="mode">Mode</h4>

<p>The transaction mode determines what kind of I/O operation is permitted in the transaction. The mode can be:</p>

<ol><li><h5 id="readonly">Read only</h5>

<p>Allows only "read" operations on the objects that are a part of the transaction's scope.</p></li>
<li><h5 id="readwrite">Read/write</h5>

<p>Allows "read" and "write" operations on the objects that are a part of the transaction's scope.</p></li>
<li><h5 id="versionchange">Version change</h5>

<p>The "version change" mode allows "read" and "write" operations and also allows the creation and deletion of object stores and indexes, i.e., the structure of the database can be modified only under the context of a "version change" transaction.</p></li></ol>

<p>Transaction objects auto-commit themselves unless they have been explicitly aborted. Transaction objects expose events to notify clients of:</p>

<ul><li>when they complete</li>
<li>when they abort and</li>
<li>when they timeout</li></ul></li>
</ol>

<h3 id="creatingtheobjectstore">Creating the object store</h3>

<p>Our notes store database will contain only a single object store to record the list of notes. As discussed earlier, object stores must be created under the context of a "version change" transaction. Let's go ahead and extend the <code>init</code> method of the <code>NotesStore</code> object to include the creation of the object store. I've highlighted the changed bits in bold.</p>

<pre><code>var NotesStore = {
    name: "notes-db",
    store_name: "notes-store",
    store_key_path: "id",
    db: null,
    ver: "1.0",
    init: function (callback) {
        var self = this;
        callback = callback || function () { };
        Utils.request(window.indexedDB.open("open", this.name), function (e) {
            self.db = e.result;

            // if the version of this db is not equal to
            // self.version then change the version
            if (self.db.version !== self.version) {
                Utils.request(self.db.setVersion(self.ver), function (e2) {
                    var txn = e2.result;

                    // create object store
                    self.db.createObjectStore(self.store_name,
                                              self.store_key_path,
                                              true);
                    txn.commit();
                    callback();
                });
            } else {
                callback();
            }
        });
    },
    .
</code></pre>

<p>Object stores are created by calling the <code>createObjectStore</code> method on the database object. The first parameter is the name of the object store. This is followed by the string identifying the key path and finally a Boolean flag indicating whether the key value should be auto-generated by the database when new records are added.</p>

<h3 id="addingdatatoobjectstores">Adding data to object stores</h3>

<p>New records can be added to an object store by calling the <code>put</code> method on the object store object. A reference to the object store instance can be retrieved through the transaction object. Let's implement the <code>addNote</code> method of our <code>NotesStore</code> object and see how we can go about adding a new record:</p>

<pre><code>    .
    addNote: function (text, tags, callback) {
        var self = this;
        callback = callback || function () { };
        var txn = self.db.transaction(null, TransactionMode.ReadWrite);
        var store = txn.objectStore(self.store_name);
        Utils.request(store.put({
            text: text,
            tags: tags
        }), function (e) {
            txn.commit();
            callback();
        });
    },

    .
</code></pre>

<p>This method can be broken down into the following steps:</p>

<ol>
<li><p>Invoke the <code>transaction</code> method on the database object to start off a new transaction. The first parameter is the list of names of the object stores which are going to be a part of the transaction. Passing <code>null</code> causes all the object stores in the database to be a part of the scope. The second parameter indicates the transaction mode. This is basically a numeric constant which we have declared like so:</p>

<pre><code>// IndexedDB transaction mode constants
var TransactionMode = {
    ReadWrite: 0,
    ReadOnly: 1,
    VersionChange: 2
};
</code></pre></li>
<li><p>Once the transaction has been created we acquire a reference to the object store in question through the transaction object's <code>objectStore</code> method.</p></li>
<li><p>Once we have the object store handy, adding a new record is just a matter of issuing an asynchronous API call to the object store's <code>put</code> method passing in the new object to be added to the store. Note that we do not pass a value for the <code>id</code> field of the new note object. Since we passed <code>true</code> for the auto-generate parameter while creating the object store, the indexed DB implementation should take care of automatically assigning a unique identifier for the new record.</p></li>
<li><p>Once the asynchronous <code>put</code> call completes successfully, we commit the transaction.</p></li>
</ol>

<h3 id="comingup">Coming up</h3>

<p>In the next post, we'll take a look at retrieving records from an indexed DB. Surprisingly, this turns out to be slightly trickier than what one might expect.</p>]]>
      </content:encoded>
    </item>
    <item>
      <title>Self deleting executables</title>
      <link>http://ghost-nerd.azurewebsites.net/selfdeletingexecutables</link>
      <dsq:thread_identifier>33</dsq:thread_identifier>
      <wp:post_date_gmt>2006-08-10 12:22:57</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>I read an interesting article the other day that spoke about the various mechanisms a Win32 application can employ for deleting itself from the disk once execution completes. The basic issue is of course that while the module is being executed the operating system has the file locked. So something like this will just not work:</p>

<pre><code>    TCHAR szModule[MAX_PATH];
    GetModuleFileName( NULL, szModule, MAX_PATH );
    DeleteFile( szModule );
</code></pre>

<p>Of the various options available, the author of the said article had suggested the following approach as being the definitive one as it has the added benefit of functioning correctly on all versions of Microsoft Windows (starting with '95).</p>

<p>Now would be a good time to hop over to the article and see what it's about (and while you're there make sure you look at some of the other articles - pretty neat). Here's the link:</p>

<blockquote>
  <p><a href="http://www.catch22.net/tuts/self-deleting-executables">http://www.catch22.net/tuts/self-deleting-executables</a></p>
</blockquote>

<p>And here's the approach in brief:</p>

<ul>
<li><p>When it's time to delete ourselves we first spawn an external process that is guaranteed to exist on all Windows computers (<em>explorer.exe</em> for example) in the suspended state. We do this by calling <code>CreateProcess</code> passing <code>CREATE_SUSPENDED</code> for the <code>dwCreationFlags</code> parameter. Note that when a process is launched this way there's really no telling at what point the primary thread of the process will get suspended. But it does appear to get suspended long before the entry point gets invoked and in fact it occurs even before the Win32 environment for the process has been fully initialized.</p></li>
<li><p>After this we get the <code>CONTEXT</code> data (basically, the CPU register state) for the suspended primary thread (in the remote process) via <code>GetThreadContext</code>.</p></li>
<li><p>We then manipulate the stack pointer (<code>ESP</code>) to allocate some space on the remote stack for storing some of our data (like the path to the executable to be deleted). After this we plonk the binary code for a local routine that we've written for deleting files over to the remote process (along with the data it needs) by calling <code>WriteProcessMemory</code>.</p></li>
<li><p>Next we mess around with the instruction pointer (<code>EIP</code>) so that it points to the binary code we've copied to the remote process and update the suspended thread's context (via <code>SetThreadContext</code>).</p></li>
<li><p>And finally, we resume execution of the remote process (via <code>ResumeThread</code>). Since the <code>EIP</code> in the remote thread is now pointing to our code, it executes it; which of course, happily deletes the original executable. And that's it!</p></li>
</ul>

<p>While this approach does get the job done, the fact that our deletion code executes in the remote process even before Windows has had a chance to initialize it fully places some restrictions on the kind of APIs that we can invoke. It so turns out that APIs like <code>DeleteFile</code> and <code>ExitProcess</code> do work while the process is in this half-baked state. So I figured I'll modify the approach somewhat so that it allows us to call any API we want from our injected code. Here's what I did:</p>

<ul>
<li><p>As before we launch the external process in a suspended state. However, instead of plonking our code at the location that <code>ESP</code> happens to be pointing at when it got suspended, we put it over the executable's entry-point routine, i.e., we replace the remote process's entry point with our own injected code. And when the entry-point code executes we can be pretty sure that the Win32 environment is fully initialized and primed for use!</p></li>
<li><p>Figuring out where the entry point of a module lives requires us to parse PE file format structures. In your own program for example, the following code would give you a pointer to the entry point routine in the process's executable image:</p></li>
</ul>

<!-- -->

<pre><code>#pragma pack( push, 1 )

struct coff_header
{
    unsigned short machine;
    unsigned short sections;
    unsigned int timestamp;
    unsigned int symboltable;
    unsigned int symbols;
    unsigned short size_of_opt_header;
    unsigned short characteristics;
};

struct optional_header
{
    unsigned short magic;
    char linker_version_major;
    char linker_version_minor;
    unsigned int code_size;
    unsigned int idata_size;
    unsigned int udata_size;
    unsigned int entry_point;
    unsigned int code_base;
};

#pragma pack( pop )

//
// get the module address
//
char *module = (char *)GetModuleHandle( NULL );

//
// get the sig
//
int *offset = (int*)( module + 0x3c );
char *sig = module + *offset;

//
// get the coff header
//
coff_header *coff = (coff_header *)( sig + 4 );

//
// get the optional header
//
optional_header *opt = (optional_header *)( (char *)coff +
   sizeof( coff_header ) );

//
// get the entry point
//
char *entry_point = (char *)module + opt-&gt;entry_point;
</code></pre>

<ul>
<li><p>The entry point that <em>you</em> define by the way - <code>main</code> or <code>WinMain -</code> isn't the actual entry point routine. The compiler inserts its own entry point which in turn calls our function. This entry point typically does stuff like CRT initialization and cleanup. In an ANSI console app for instance the actual entry point routine is something called <code>mainCRTStartup</code>.</p></li>
<li><p>It appears logical that we should be able to find the entry point routine in remote processes also in a similar fashion using <code>ReadProcessMemory</code>. While that is so, finding the equivalent of the <code>module</code> variable in the code given above for remote processes turned out to be trickier than anticipated. The problem is that there is no convenient <code>GetModuleHandle</code> routine that'll work for remote processes.</p></li>
<li><p>As it turns out <code>GetModuleHandle</code> returns a virtual address that is valid only within the relevant process's address space. <code>ReadProcessMemory</code> however requires <em>real</em> addresses to work with. So the question is, how do we get to know the remote process's base address in memory? The solution as it turned out requires us to dig deep into the OS's internals! The credit for this solution goes to <em>Ashkbiz Danehkar</em> whose article called <a href="http://www.codeproject.com/useritems/inject2it.asp">Injective Code inside Import Table</a> on <a href="http://www.codeproject.com/">Code Project</a> outlines a method for finding this.</p></li>
<li><p>In brief, the operating system maintains a user-mode data structure for every thread in the system called the <em>Thread Environment Block</em> (TEB) which describes pretty much everything you'd want to know about the thread including a pointer to another data structure called the <em>Process Environment Block</em> (PEB) which, as may be apparent describes processes including, happily for us, a pointer to the image's base address in memory! These structures are not however documented (by Microsoft that is ;). But some very very clever folks at <a href="http://undocumented.ntinternals.net/">http://undocumented.ntinternals.net/</a> managed to figure out the layout for these structures all by themselves!</p></li>
<li><p>So all we need to do is:</p>

<ul><li>Figure out where the TEB for the primary thread lives in the remote process. This information is stored in the thread's FS register which is accessible via the <code>GetThreadSelectorEntry</code> API.</li>
<li>Read the PEB using the pointer to it in the thread's TEB via <code>ReadProcessMemory</code>.</li>
<li>Use the pointer to the image's base address in the PEB and parse the PE structures till we are left with a reference to the remote process's entry point routine.</li>
<li>Phew!</li></ul>

<p>Here's the code that achieves this:</p></li>
</ul>

<!-- -->

<pre><code>//
// Gets the address of the entry point routine given a
// handle to a process and its primary thread.
//
DWORD GetProcessEntryPointAddress( HANDLE hProcess, HANDLE hThread )
{
    CONTEXT             context;
    LDT_ENTRY           entry;
    TEB                 teb;
    PEB                 peb;
    DWORD               read;
    DWORD               dwFSBase;
    DWORD               dwImageBase, dwOffset;
    DWORD               dwOptHeaderOffset;
    optional_header     opt;

    //
    // get the current thread context
    //
    context.ContextFlags = CONTEXT_FULL | CONTEXT_DEBUG_REGISTERS;
    GetThreadContext( hThread, &amp;context );

    //
    // use the segment register value to get a pointer to
    // the TEB
    //
    GetThreadSelectorEntry( hThread, context.SegFs, &amp;entry );
    dwFSBase = ( entry.HighWord.Bits.BaseHi &lt;&lt; 24 ) |
                     ( entry.HighWord.Bits.BaseMid &lt;&lt; 16 ) |
                     ( entry.BaseLow );

    //
    // read the teb
    //
    ReadProcessMemory( hProcess, (LPCVOID)dwFSBase,
                       &amp;teb, sizeof( TEB ), &amp;read );

    //
    // read the peb from the location pointed at by the teb
    //
    ReadProcessMemory( hProcess, (LPCVOID)teb.Peb,
                       &amp;peb, sizeof( PEB ), &amp;read );

    //
    // figure out where the entry point is located;
    //
    dwImageBase = (DWORD)peb.ImageBaseAddress;
    ReadProcessMemory( hProcess, (LPCVOID)( dwImageBase + 0x3c ),
                       &amp;dwOffset, sizeof( DWORD ), &amp;read );

    dwOptHeaderOffset = ( dwImageBase + dwOffset + 4 +
                            sizeof( coff_header ) );
    ReadProcessMemory( hProcess, (LPCVOID)dwOptHeaderOffset,
                       &amp;opt, sizeof( optional_header ), &amp;read );

    return ( dwImageBase + opt.entry_point );
}
</code></pre>

<ul>
<li><p>If you're wondering what the weird code initializing <code>dwFSBase</code> means all I can do is direct you to the documentation for the <code>LDT_ENTRY</code> data structure in MSDN. Structures of this kind are partly the reason why system programmers tend to go bald early in life.</p></li>
<li><p>Now that we know where the entry point lives in the remote process it should be really straightforward right? Wrong! There still is that itsy bitsy problem of figuring out how we are to pass data to the remote process!</p>

<p>The routine that deletes our executable looks like this:</p></li>
</ul>

<!-- -->

<pre><code>#pragma pack(push, 1)

//
//  Structure to inject into remote process. Contains 
//  function pointers and code to execute.
//
typedef struct _SELFDEL
{
    HANDLE  hParent;                // parent process handle
    FARPROC fnWaitForSingleObject;
    FARPROC fnCloseHandle;
    FARPROC fnDeleteFile;
    FARPROC fnSleep;
    FARPROC fnExitProcess;
    FARPROC fnRemoveDirectory;
    FARPROC fnGetLastError;
    FARPROC fnLoadLibrary;
    FARPROC fnGetProcAddress;
    BOOL    fRemDir;
    TCHAR   szFileName[MAX_PATH];   // file to delete
} SELFDEL;

#pragma pack(pop)

//
//  Routine to execute in remote process. 
//
static void remote_thread(SELFDEL *remote)
{
    // wait for parent process to terminate
    remote-&gt;fnWaitForSingleObject(remote-&gt;hParent, INFINITE);
    remote-&gt;fnCloseHandle(remote-&gt;hParent);

    // try to delete the executable file 
    while(!remote-&gt;fnDeleteFile(remote-&gt;szFileName))
    {
        // failed - try again in one second's time
        remote-&gt;fnSleep(1000);
    }

    // finished! exit so that we don't execute garbage code
    remote-&gt;fnExitProcess(0);
}
</code></pre>

<ul>
<li><p>As you might have noticed the function <code>remote_thread</code> makes all system calls via function pointers instead of calling them directly. This is done because, in the normal course, the compiler generates tiny stubs whenever calls to routines in dynamically loaded DLLs are made from a program. This stub jumps to a function pointer stored in a table initialized by the operating system's loader at runtime. Since we don't want these fancy stubs generated for code that is meant to be injected into a remote process, we deal exclusively with function pointers.</p>

<p>Fortunately for us, the system APIs (in kernel32, user32 etc.) always get loaded at the same virtual address in all processes. So all we need to do is initialize a data structure with pointers to all the system calls we want to make from the remote process and pass this structure along also. With our entry-point overwrite strategy of course, how are we to do this? To make a long story short, I settled for the following approach.</p></li>
<li><p>First, I modified <code>remote_thread</code> to look like this:</p></li>
</ul>

<!-- -->

<pre><code>//
//  Routine to execute in remote process. 
//
static void remote_thread()
{
    //
    // this will get replaced with a
    // real pointer to the data when it
    // gets injected into the remote
    // process
    //
    SELFDEL *remote = (SELFDEL *)0xFFFFFFFF;

    //
    // wait for parent process to terminate
    //
    remote-&gt;fnWaitForSingleObject(remote-&gt;hParent, INFINITE);
    remote-&gt;fnCloseHandle(remote-&gt;hParent);

    //
    // try to delete the executable file 
    //
    while(!remote-&gt;fnDeleteFile(remote-&gt;szFileName))
    {
        //
        // failed - try again in one second's time
        //
        remote-&gt;fnSleep(1000);
    }

    //
    // finished! exit so that we don't execute garbage code
    //
    remote-&gt;fnExitProcess(0);
}
</code></pre>

<ul>
<li>I then converted this into shellcode (the exact mechanics of which I'll outline in another post) to arrive at what looks like this (this is just representative shellcode and not the one that got generated for the routine shown above):</li>
</ul>

<!-- -->

<pre><code>char shellcode[] = {
    '\x55', '\x8B', '\xEC', '\x83', '\xEC', 
    '\x10', '\x53', '\xC7', '\x45', '\xF0',
    '\xFF', '\xFF', '\xFF', '\xFF',   // replace these 4 bytes
                                      // with actual address
    '\x8B', '\x45', '\xF0', '\x8B', '\x48',
    '\x20', '\x89', '\x4D', '\xF4', '\x8B',
    '\x55', '\xF0', '\x8B', '\x42', '\x24',
    '\x89', '\x45', '\xFC', '\x6A', '\xFF', ... more shell code here
</code></pre>

<ul>
<li><em>shellcode</em>, if you didn't know, is the technical term used (in security circles) to refer to binary machine code that is typically used in exploits as the payload. As it turns out in our case the value <code>0xFFFFFFFF</code> that we initialized the pointer <code>remote</code> with in <code>remote_thread</code> shows up the exact same way in the shellcode also. Since we know where the entry point lives in the remote process, all we need to do is to first replace <code>0xFFFFFFFF</code> in the shellcode with the actual pointer to the data before over-writing the entry point. Here's how this looks:</li>
</ul>

<!-- -->

<pre><code>STARTUPINFO             si = { sizeof(si) };
PROCESS_INFORMATION     pi;
SELFDEL                 local;
DWORD                   data;
TCHAR                   szExe[MAX_PATH] = _T( "explorer.exe" );
DWORD                   process_entry;

//
// this shellcode self-deletes and then shows a messagebox
//
char shellcode[] = {
    '\x55', '\x8B', '\xEC', '\x83',
    '\xEC', '\x10', '\x53', '\xC7',
    '\xFF', '\xFF', '\xFF', '\xFF',   // replace these 4 bytes
                                      // with actual address
    '\x8B', '\x45', '\xF0', '\x8B',
    '\x48', '\x20', '\x89', '\x4D',

    ... snipped lots of meaningless shellcode here! ...

    '\xFF', '\xD0', '\x5B', '\x8B',
    '\xE5', '\x5D', '\xC3'
};

//
// initialize the SELFDEL object
//
local.fnWaitForSingleObject     = (FARPROC)WaitForSingleObject;
local.fnCloseHandle             = (FARPROC)CloseHandle;
local.fnDeleteFile              = (FARPROC)DeleteFile;
local.fnSleep                   = (FARPROC)Sleep;
local.fnExitProcess             = (FARPROC)ExitProcess;
local.fnRemoveDirectory         = (FARPROC)RemoveDirectory;
local.fnGetLastError            = (FARPROC)GetLastError;
local.fnLoadLibrary             = (FARPROC)LoadLibrary;
local.fnGetProcAddress          = (FARPROC)GetProcAddress;

//
// Give remote process a copy of our own process handle
//
DuplicateHandle(GetCurrentProcess(), GetCurrentProcess(), 
    pi.hProcess, &amp;local.hParent, 0, FALSE, 0);
GetModuleFileName(0, local.szFileName, MAX_PATH);

//
// get the process's entry point address
//
process_entry = GetProcessEntryPointAddress( pi.hProcess, pi.hThread );

//
// replace the address of the data inside the
// shellcode (bytes 10 to 13)
//
data = process_entry + sizeof( shellcode );
shellcode[13] = (char)( data &gt;&gt; 24 );
shellcode[12] = (char)( ( data &gt;&gt; 16 ) &amp; 0xFF );
shellcode[11] = (char)( ( data &gt;&gt; 8 ) &amp; 0xFF );
shellcode[10] = (char)( data &amp; 0xFF );

//
// copy our code+data at the exe's entry-point
//
VirtualProtectEx( pi.hProcess,
                  (PVOID)process_entry,
                  sizeof( local ) + sizeof( shellcode ),
                  PAGE_EXECUTE_READWRITE,
                  &amp;oldProt );
WriteProcessMemory( pi.hProcess,
                    (PVOID)process_entry,
                    shellcode,
                    sizeof( shellcode ), 0);
WriteProcessMemory( pi.hProcess,
                    (PVOID)data,
                    &amp;local,
                    sizeof( local ), 0);

//
// Let the process continue
//
ResumeThread(pi.hThread);
</code></pre>

<p>There! That's all there is to it. Please find the code for a self-deleting executable (that among other things also displays a message box from the remote process's hijacked entry point) here:</p>

<blockquote>
  <p><a href="http://blogorama.nerdworks.in/downloads/myselfdel.c">myselfdel.c</a> <br />
   <a href="http://blogorama.nerdworks.in/downloads/ntundoc.h">ntundoc.h</a></p>
</blockquote>]]>
      </content:encoded>
      <wp:comment>
        <wp:comment_id>76</wp:comment_id>
        <wp:comment_author>anon</wp:comment_author>
        <wp:comment_author_email>null@null.null</wp:comment_author_email>
        <wp:comment_date_gmt>2008-10-25 14:38:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Awesome piece of work!!1]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>77</wp:comment_id>
        <wp:comment_author>The Nerd</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2008-10-26 02:36:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks anon!]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>78</wp:comment_id>
        <wp:comment_author>me</wp:comment_author>
        <wp:comment_author_email>me@me.com</wp:comment_author_email>
        <wp:comment_date_gmt>2009-00-09 22:08:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[I think there is a much easier way to do this: create a small ASM program like this:

start:
push ofs wchFileName
call DeleteFileA
jmp origEIP
wchFileName db 'c:\myfile.exe'

You should use VirtualAllocEx to allocate some memory big enough to hold this code &amp; data, make sure to use the attribute PAGE_READWRITE, compute all the offsets in the code (like wchFileName, which is the address allocated + X, X=number of bytes taken by those instructions between start and wchFileName, DeleteFileA whose address is the same in all the processes, and origEIP which can be obtained from the originals thread context. There is no need to compute the real entry point of the thread.]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>80</wp:comment_id>
        <wp:comment_author>nice</wp:comment_author>
        <wp:comment_author_email>user@itsec.net</wp:comment_author_email>
        <wp:comment_date_gmt>2009-01-20 21:38:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Hey, awsome, I think using small bit's of asm to do this sort of thing is really short sighted, it's much more fun to use a high level language.]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>138</wp:comment_id>
        <wp:comment_author>Francine</wp:comment_author>
        <wp:comment_author_email>france@mailinator.com</wp:comment_author_email>
        <wp:comment_date_gmt>2011-08-01 06:43:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Hey, awsome, I think utilizing modest chomped&#39;s of asm to do this sort of thing is absolutely childish, its considerably more amusement to utilize an elevated level dialect. I love this article. I can feel that I was just like writing an [url=http://www.trustedessays.net/]essay[/url].]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>142</wp:comment_id>
        <wp:comment_author>mikfig</wp:comment_author>
        <wp:comment_author_email>mikfig27@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2011-08-09 10:08:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[@awsome, that method is the same as mentioned in the article he linked to:
http://www.catch22.net/tuts/selfdel.asp
the only difference are that it doesn&#39;t wait for the process you&#39;re deleting to exit, so it might not work.]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>143</wp:comment_id>
        <wp:comment_author>mikfig</wp:comment_author>
        <wp:comment_author_email>mikfig27@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2011-08-09 10:08:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[@awsome, that method is the same as mentioned in the article he linked to:
http://www.catch22.net/tuts/selfdel.asp
the only difference are that it doesn&#39;t wait for the process you&#39;re deleting to exit, so it might not work.]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>222</wp:comment_id>
        <wp:comment_author>john</wp:comment_author>
        <wp:comment_author_email>xxx@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2014-00-14 19:41:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Its great. This can be used to make a unistaller.]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>223</wp:comment_id>
        <wp:comment_author>krsrk</wp:comment_author>
        <wp:comment_author_email></wp:comment_author_email>
        <wp:comment_date_gmt>2014-00-27 12:34:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[The link now is: http://www.catch22.net/tuts/self-deleting-executables]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>224</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2014-00-27 21:41:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks. Will update the link.]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>225</wp:comment_id>
        <wp:comment_author>saralea</wp:comment_author>
        <wp:comment_author_email>saralea@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2014-01-03 02:26:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[The link fro ntundoc.h is missing]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>229</wp:comment_id>
        <wp:comment_author>nexno</wp:comment_author>
        <wp:comment_author_email>nexno1@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2014-02-17 17:59:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Can someone convert this to .net?]]>
        </wp:comment_content>
      </wp:comment>
    </item>
    <item>
      <title>PathIsDirectory woes!</title>
      <link>http://ghost-nerd.azurewebsites.net/pathisdirectorywoes</link>
      <dsq:thread_identifier>34</dsq:thread_identifier>
      <wp:post_date_gmt>2007-03-18 07:51:32</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>Here's what MSDN has to say about <code>PathIsDirectory</code>'s return value:</p>

<blockquote>
  <p><em>Returns TRUE if the path is a valid directory, or FALSE otherwise.</em></p>
</blockquote>

<p>One of the architectural goals for the product that I am working on is the enabling of cross platform source code portability with minimal development effort. To this extent we have a practice of wrapping platform specific API calls via simple functions that mostly just forward the call to the OS API. In this spirit therefore I wrote the simplest of wrapper routines for the <code>PathIsDirectory</code> Win32 API like so (not the actual function name of course!).</p>

<pre><code>bool IsThePathADangDirectory( const TCHAR *pszPath )
{
    return ( PathIsDirectory( pszPath ) == TRUE );
}
</code></pre>

<p>I had a perfectly normal directory at the location "C:\WINDDK" and guess what this helper routine returned when I called it like this?</p>

<pre><code>_tprintf( _T( &amp;quot;%d\n&amp;quot; ),
      IsThePathADangDirectory( _T( &amp;quot;C:\\WINDDK&amp;quot; ) ) );
</code></pre>

<p>It returned a big fat <code>false</code>! As it turns out <code>PathIsDirectory</code> does <em>not</em> in fact return <code>TRUE</code> when the path is valid. It returns instead, a <em>non-zero</em> value. The difference is important because in this case it returns the number <code>16</code> when it is happy with the path! Since we were explicitly checking for the return value <code>TRUE</code>, <code>IsPathADangDirectory</code> dutifully reported that it wasn't a dang directory! The right way to write the function would therefore be,</p>

<pre><code>bool IsThePathADangDirectory( const TCHAR *pszPath )
{
    return !( PathIsDirectory( pszPath ) == FALSE );
}
</code></pre>

<p>Grrr... Trust no one I say, not even the documentation!</p>]]>
      </content:encoded>
      <wp:comment>
        <wp:comment_id>64</wp:comment_id>
        <wp:comment_author>yasuhiko yoshimura</wp:comment_author>
        <wp:comment_author_email>yoshimura__@__informax.co.jp</wp:comment_author_email>
        <wp:comment_date_gmt>2008-00-26 07:22:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Yes, that is a fact.
Here is my resolve:

if (PathIsDirectory(...) &gt;= 1)

My email address ia valid after replacing '__@__' to '@'.
]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>65</wp:comment_id>
        <wp:comment_author>The Nerd</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2008-00-26 10:05:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks for your comment.  Yes, that should work as well.  Hopefully there aren't too many documentation gaffe's such as this in the MSDN!]]>
        </wp:comment_content>
      </wp:comment>
    </item>
    <item>
      <title>Partial function application in JavaScript</title>
      <link>http://ghost-nerd.azurewebsites.net/partialfunctionapplicationinja</link>
      <dsq:thread_identifier>35</dsq:thread_identifier>
      <wp:post_date_gmt>2011-10-07 04:02:22</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>Partial function application is a functional programming technique that allows you to transform functions that take N parameters into functions that take a subset of N parameters. For example, say you have this fairly useless function:</p>

<pre><code>function add(a, b) {
    return a + b;
}
</code></pre>

<p>Let's say that for some reason we need a version of "<code>add</code>" that will always have the value 5 for the parameter "<code>a</code>". One way we might do it is like so:</p>

<pre><code>function add5(b) {
    return add(5, b);
}
</code></pre>

<p>No black magic there. I was wondering if there might be some way that we can automate the process of generating functions with part of their arguments pre-bound. Here's what I came up with:</p>

<pre><code>function partialBind(f, context) {
    // arguments length MUST be greater than 2
    if(arguments.length &lt;= 2) {
        // coz. what're you "partial binding" otherwise?!
        return null;
    }

    // convert args to array excluding param "f" and "context"
    var arrayProto = Array.prototype;
    var params = arrayProto.slice.call(arguments, 2, arguments.length);
    return function () {
        // append params passed to this function to "params"
        var args = params.slice(0, params.length);
        if (arguments.length &gt; 0) {
            arrayProto.forEach.call(arguments, function (p) {
                args.push(p);
            });
        }

        // call the original function
        return f.apply(context, args);
    }
}
</code></pre>

<p>This function allows me to transform pretty much any function that takes at least 1 argument into a new function that takes a subset of the arguments. Transforming our "<code>add</code>" function into a single parameter version with "<code>a</code>" bound to 5 for instance, would now look like this:</p>

<pre><code>var add5 = partialBind(add, null, 5);
var val = add5(10);
assert(val === 15);
</code></pre>

<p>Interestingly, "<code>partialBind</code>" allows us to compose argument binding to multiple levels. If we wanted to take our "<code>add5</code>" function and create another version that binds the second parameter to, say 20, then we can do this:</p>

<pre><code>var add5_20 = partialBind(add5, null, 20);
var val = add5_20();
assert(val === 25);
</code></pre>

<p>Note that we are doing a partial bind of a function that is already a partial bind of another function. Turns out we can take this to as many levels as we want. The example given above is of course somewhat concocted because we could have achieved the same result with a single partial bind instead of doing it in two levels:</p>

<pre><code>var add5_20 = partialBind(add, null, 5, 20);
var val = add5_20();
assert(val === 25);
</code></pre>

<p>All of this works because JavaScript supports <a href="http://blogorama.nerdworks.in/entry-JavaScriptclosuresactlikeimpli.aspx">closures</a>. Pretty nifty don't you think?</p>]]>
      </content:encoded>
      <wp:comment>
        <wp:comment_id>173</wp:comment_id>
        <wp:comment_author>Hitesh</wp:comment_author>
        <wp:comment_author_email>hitesh.kesharia@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2011-11-12 15:41:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Nice artcile with ]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>174</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2011-11-12 15:42:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks Hitesh!]]>
        </wp:comment_content>
      </wp:comment>
    </item>
    <item>
      <title>IE9 web cast / Chennai Web Camps / OSI Days 2011</title>
      <link>http://ghost-nerd.azurewebsites.net/ie9webcastchennaiwebcampsosida</link>
      <dsq:thread_identifier>36</dsq:thread_identifier>
      <wp:post_date_gmt>2011-10-23 22:36:30</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>It has been a somewhat hectic two weeks shuttling between Chennai and Bangalore for a bunch of stuff. As usual, I've been happily handing out promises about posting resources for my talks on my blog. Like candy. Turns out you've got to come good on them eventually. So here goes:</p>

<h3 id="ie9webcastonecmascript5">IE9 Web Cast on ECMAScript 5</h3>

<ol>
<li><a href="https://2vqcza.bay.livefilestore.com/y1p5eeTX9Yctq964iB4Y6MjQ4VC1Bb1oC5mKQi6CsVMQWQAG8_DT4AUalzu876ge_2zQuERLsQRHDl0EP6H80k92Q/IE9%20and%20ECMAScript%205.pptx?download&amp;psid=1">Get the deck</a> (there isn't much in the deck but there it is for what its worth).  </li>
<li>Get the <a href="http://blogorama.nerdworks.in/entry-JavaScriptevalconsole.aspx">JavaScript eval console</a> I was showing off in the session.</li>
</ol>

<h3 id="chennaiwebcamps">Chennai Web Camps</h3>

<p>All the resources for the web camps sessions are available <a href="http://blogorama.nerdworks.in/entry-WebCampsVirtualTechDaysandjsFo.aspx">here</a>.</p>

<h3 id="osidays2011">OSI Days 2011</h3>

<ol>
<li><p>Session on <a href="http://2011.osidays.com/proposal/webmatrix-building-complete-website-within-hour">WebMatrix: Building a complete website within an hour</a>  </p>

<ul><li>Get the <a href="https://2vqcza.bay.livefilestore.com/y1pXD21izvPLpVu9mm36kmbffp3rah3GAVMExZUpGaIGs14jMTX1rlG3v0wZIyxZgbPc59nMMgi1NhxsDoMSiJfeA/wm.pptx?download&amp;psid=1">deck</a></li>
<li>Get <a href="http://bit.ly/vK5gsM">WebMatrix</a></li></ul></li>
<li><p>Session on <a href="http://2011.osidays.com/proposal/building-cross-browser-html5-web-apps">building cross browser HTML5 web apps</a>  </p>

<ul><li>Get the <a href="https://2vqcza.bay.livefilestore.com/y1ppMwwTdk-qkxwBmRTNqJjMdjc2pGNvOvOAKxDNHPx1VO72wE5qFADpoi_hPLA2nvghN9VjjkMbnir5C2HYdnfIQ/cross-browser.pptx?download&amp;psid=1">deck</a></li>
<li>Get the <a href="https://2vqcza.bay.livefilestore.com/y1pInxhWZtREX5IF49DVSJYrWnIhVtKeVyyr6KLxa52d3I8fEkQCaG65nkgKBNGOIZobUUH4FQGZW97cJfvHQa6Mw/cross-browser-demos.zip?download&amp;psid=1">demos</a></li></ul></li>
</ol>

<p>That's all folks. Hope the sessions were useful. If you've got feedback on any of these, please feel free to leave a comment. If you want to be nasty and use dirty words, please <a href="http://blogorama.nerdworks.in/contact.aspx">email</a> them to me.</p>]]>
      </content:encoded>
    </item>
    <item>
      <title>On appreciating music</title>
      <link>http://ghost-nerd.azurewebsites.net/onappreciatingmusic</link>
      <dsq:thread_identifier>37</dsq:thread_identifier>
      <wp:post_date_gmt>2006-08-30 07:47:37</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>There is a certain <em>superior</em> kind of person who is frequently fond of making scandalous remarks in order to appear unconventional and witty with the equally frequent consequence of appearing merely impertinently conspicuous. He insists upon being decidedly disagreeable - solely counting upon the possibility that the contrary opinion will often prove to be the correct one. While this is found to be so in the general case (and all generalizations are of course, false, not excluding this particular one) when given that most of those who are party to an argument participate in it merely on account of a habitual inclination towards exercising their vocal chords rather than a genuine desire for expressing original opinions, one would err to rely entirely on it if he wishes to maintain credibility.</p>

<p>When the topic under discussion is music for instance, this <em>superior</em> person will be found waxing eloquent in resolute criticism of artistes the public in general considers as being masters of their art. He will further extol upon the virtues of other, sometimes lesser known equivalents, who in his opinion are better deserving of the public adulation. Now, it goes without saying that we live in an unfair world where all too frequently factors that have little to do with music or with ones proficiency in it are the factors that in the end contribute towards an artiste's success (<em>success</em> by popular definition that is). It is certainly tragic that deserving practitioners are often not paid their due. That is however no justification for the vilification of artistes who do become successful on account of genuine musical ability.</p>

<p>It is the bane of mankind (and sometimes a blessing too!) to occasionally err. An artiste in this respect is no different. But to seize upon such instances paying little attention to all of their other innumerable successes is, to say the least, being shockingly myopic apart from also being a dreadful display of lack of compassion.</p>

<p>Appreciation of music, in my opinion, demands a certain kind of open mindedness that is willing to acknowledge excellence where it is found. If the patron is unable to influence mediocrity in a positive manner then he would do well to ignore it. Now, this is not to be mistaken as an appeal for toleration of incompetence (as might happen if you were made to put up with my singing for instance); merely that a greater display of compassion is in order when considering brilliant but fallible priests of that most divine of art forms - music!</p>]]>
      </content:encoded>
      <wp:comment>
        <wp:comment_id>30</wp:comment_id>
        <wp:comment_author>Proloy</wp:comment_author>
        <wp:comment_author_email></wp:comment_author_email>
        <wp:comment_date_gmt>2006-09-04 07:20:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[You are 'occassionally' erring without being the subject of any 'villification'. Must be music to your ears!

This post is too vague. Almost a rant without showing the inclination to identify the object of the rant, or the immediate provocation. Almost as if fearful of losing the argument to the Yesudas-Haters' club! (I'm not a member, mind you!)]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>31</wp:comment_id>
        <wp:comment_author>Ranju. V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2006-09-04 08:14:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Oh well, I type my posts in HTML directly and do not have the services of a spell checker as I compose the post.  But the point is taken; will run my posts through a spell check before posting.

As for the object of the post, you seem to have managed to accurately grasp it in spite of its apparent ï¿½vaguenessï¿½!  While the &quot;provocation&quot; for the post does originate with the undue criticism of Yesudas encountered on Orkut.com and elsewhere the post is not intended as a defense of his proficiency in his trade.

It is a rant - a rant against narrow minded purists who are unwilling to consider anything outside of their realm of knowledge.]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>32</wp:comment_id>
        <wp:comment_author>Proloy</wp:comment_author>
        <wp:comment_author_email></wp:comment_author_email>
        <wp:comment_date_gmt>2006-09-04 09:19:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[As long as you wish to project it as a rant -- by definition nothing to pay serious attention to -- it's fine. But if you wish to make a point or present a case, it'd be better to actually lay down what exactly you have the beef with -- what is it that you disagree with and *why* -- and then leave it for readers to compare the respective merits and judge. Without it, no reader can make any assessment whatsoever. 

Moreover, I don't know how aware you are of it, the treatment above would in debating parlance be called as an ad-hominem attack, which is generally considered poor skill, apart from being logically fallacious. 

You have to illustrate your point, and not merely expect readers to accept things at face value. Without it, nobody knows what 'scandalous remark' was made, what 'conspicuous impertinence' was practised or what 'shockingly myopic lack of compassion' was on display.

Besides, just because somebody has been frequently making scandalous remarks -- never mind the fact that readers have no way of figuring out its truth -- does in no way prove that the said person's evaluation of Yesudas, or some specific points about Yesudas's art, can be considered incorrect on its basis. Add to it the fact that you are not countering those arguments on the forum/forums where they were originally made, so that people whom you have complained about could have an opportunity to come up with a rejoinder.

By calling such people 'purists' you might even be unwittingly be according the people in question some sort of status, when it's quite possible that they could just have been trolling.]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>33</wp:comment_id>
        <wp:comment_author>Ranju. V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2006-09-04 17:29:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[I seldom say anything that deserves paying serious attention to!  Rant or no rant.  As for presenting my case, I think I have sufficiently done so and have even been somewhat excessively verbose about it.  To re-state what's there in the entry:

 - My beef is with the making of inconsiderate remarks in an attempt at discrediting competent artistes who, it must be remembered, are only human and therefore not invulnerable to the occasional error.

 - I disagree with such remarks as they only have the effect of belittling and discouraging the artiste.

 - I didnï¿½t know there was a ï¿½debating parlanceï¿½ in the first place.  And I didnï¿½t know what an ï¿½ad-hominemï¿½ was (till I looked it up on Wikipedia that is).  An ad-hominem attack is logically fallacious because it tries to pass a personal fault of the debater as a valid counter argument.  If youï¿½re referring to my indication that inconsiderate remarks are frequently made by the said ï¿½superiorï¿½ type of persons, well itï¿½s a generalization.  And again, as I have mentioned in the entry, all generalizations are false.  To point this out as an instance of an ad-hominem attack is just nit picking.  I was certainly not trying to suggest that the possibility of the speaker of these inconsiderate remarks being a ï¿½superiorï¿½ person somehow discredits his opinions.

 - What illustration is required for the contention that a little exercise of compassion while criticizing artistes is advisable?  ï¿½Cultivate a little compassion, Proloy; and you will become quite a remarkable manï¿½.

 - This entry does not attempt to counter the various arguments put forth by members of the ï¿½Yesudas hatersï¿½ community on Orkut.  I have found the members of the said forum to be musically well informed and their comments tend to point out fine technical deficiencies in Yesudasï¿½s singing (while these deficiencies may very well exist, they certainly do not present a strong enough case for hating Yesudas).  I myself am not sufficiently qualified musically to counter them.

 - I call them (i.e. the members of this community on Orkut) ï¿½puristsï¿½ as their primary argument appears to be that Yesudas is unconventional and resorts to ï¿½gimmicksï¿½ aimed at popularizing carnatic music.  I was speaking with Satish (of Live QA team) the other day who mentioned an instance of how a keertanam rendered by Yesudas in the movie ï¿½Sindhu Bhairaviï¿½ features an improvisation where all the notes were sung so that they were continually increasing in pitch.  At no point would you find Yesudas falling down to a lower pitch from a higher one.  Satish felt that this is the kind of gimmick that purists find offensive.  I counter that by saying that the only thing that any self-respecting music lover should find offensive is when the attempt is made to pass noise off as music.  The only rule that must be conformed with is the rule of ensuring that what is called ï¿½musicï¿½ must be pleasant to the ears.  By this rule even heavy metal rock can (and is) be called music.  Each type of music (regardless of genre) has its appeal if only the patron is willing to listen with a mind that is even more open than the ear!
]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>83</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2009-05-28 16:24:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[I can hardly believe that it is I who have created this blog post and the subsequent arguments in the comments - how patronizing I sound! I am sure I thought I was being quite clever when I came up with this stuff. Now it seems pompous, misinformed and mostly pointless. Sigh!]]>
        </wp:comment_content>
      </wp:comment>
    </item>
    <item>
      <title>Shaw on shame</title>
      <link>http://ghost-nerd.azurewebsites.net/shawonshame</link>
      <dsq:thread_identifier>38</dsq:thread_identifier>
      <wp:post_date_gmt>2006-09-03 18:00:24</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>The character <em>Tanner</em>'s retort to <em>Ramsden</em>'s contention that <em>Tanner</em> is an impudent man. Excerpt from <a href="http://en.wikipedia.org/wiki/George_Bernard_Shaw">George Bernard Shaw</a>'s play - <a href="http://www2.hn.psu.edu/faculty/jmanis/gbshaw/Man-superman.pdf">Man and Superman</a>.</p>

<blockquote>
  <p>&quot;We live in an atmosphere of shame. We are ashamed of everything that is real about us; ashamed of ourselves, of our relatives, of our incomes, of our accents, of our opinions, of our experience, just as we are ashamed of our naked skins. Good Lord, my dear Ramsden, we are ashamed to walk, ashamed to ride in an omnibus, ashamed to hire a hansom instead of keeping a carriage, ashamed of keeping one horse instead of two and a groom-gardener instead of a coachman and footman. The more things a man is ashamed of, the more respectable he is. Why, you're ashamed to buy my book, ashamed to read it: the only thing you're not ashamed of is to judge me for it without having read it; and even that only means that you're ashamed to have heterodox opinions.&quot;</p>
  
  <p>...</p>
  
  <p>&quot;I am only the most impudent person you've ever met. That's your notion of a thoroughly bad character. When you want to give me a piece of your mind, you ask yourself, as a just and upright man, what is the worst you can fairly say of me. Thief, liar, forger, adulterer, perjurer, glutton, drunkard? Not one of these names fit me. You have to fall back on my deficiency in shame. Well, I admit it. I even congratulate myself; for if I were ashamed of my real self, I should cut as stupid a figure as any of the rest of you. Cultivate a little impudence, Ramsden; and you will become quite a remarkable man.&quot;</p>
</blockquote>]]>
      </content:encoded>
    </item>
    <item>
      <title>Organizing your JavaScript with WinJS</title>
      <link>http://ghost-nerd.azurewebsites.net/organizingyourjavascriptwithwi</link>
      <dsq:thread_identifier>39</dsq:thread_identifier>
      <wp:post_date_gmt>2012-05-09 05:04:17</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>While the JavaScript framework for creating metro style apps is surprisingly flexible, in that it allows you to use pretty much any JavaScript framework that's already out there, there is actually some really useful functionality available in the <strong><a href="http://bit.ly/KSAfwq">WinJS</a></strong> library that ships out of the box. And since the JavaScript projection for WinRT itself uses this library it might make sense to use this for our own code as well. In this post I cover some basic ways you can organize your JavaScript code using WinJS.</p>

<h4 id="namespaces">Namespaces</h4>

<p>One common challenge that we tend to encounter with any JavaScript app (whether web or desktop), is the question of being disciplined about introducing symbols into the global namespace. The general guideline is to, well, not do it! Using WinJS it is possible to organize your own classes and functions into well-defined namespaces. Here's an example:</p>

<pre><code>(function () {
    'use strict';

    // export this "enum"
    var ShapeType = Object.freeze({
        None: 0,
        Line: 1,
        Ellipse: 2,
        Rectangle: 3,
        Arc: 4,
        Bezier: 5
    });

    WinJS.Namespace.define("Acme.Shapes", {
        ShapeType: ShapeType
    });

})();
</code></pre>

<p>What this does is to basically create only one new symbol in the global namespace called "Acme". All the remaining objects are child properties of this root object - essentially acting like a namespace. The above given code snippet for instance will enable you to access the <strong>ShapeType</strong> enumeration from pretty much everywhere else like so:</p>

<pre><code>var type = Acme.Shapes.ShapeType.Arc;
</code></pre>

<p>You can see how easy it is to extend this to define pretty much your entire project - grouping all your code under a single root namespace. We'll see further examples of how namespaces can be used as we talk about other capabilities that WinJS brings to the table.</p>

<h4 id="classes">Classes</h4>

<p>While JavaScript itself is a weakly typed language it is possible to pretend like it isn't and create and use "classes". With WinJS you define a class by calling <a href="http://bit.ly/rKtESn">WinJS.Class.define</a>. This method accepts 3 parameters: a constructor function, a JavaScript object defining the instance members and another JavaScript object defining the static members. Here's an example:</p>

<pre><code>(function () {
    "use strict";

    // constructor function
    function initShape(type) {
        this.id = Acme.Shapes.Shape.newId(); // calling a static member
        if (type) {
            this.type = type;
        }
    }

    var instanceMembers = {
        id: null,
        type: Acme.Shapes.ShapeType.None,
        draw: function () {
            console.log("Shape.draw");
        }
    };

    var staticMembers = {
        // private member
        _counter: 0,
        newId: function () {
            return Acme.Shapes.Shape._counter++;
        }
    };

    var Shape = WinJS.Class.define(initShape, instanceMembers, staticMembers);

    // add to namespace
    WinJS.Namespace.define("Acme.Shapes", {
        Shape: Shape
    });
})();
</code></pre>

<p>Now you can create and use instances of Shape like so:</p>

<pre><code>var s = new Acme.Shapes.Shape(); 
s.draw();
</code></pre>

<p>The first parameter to <a href="http://bit.ly/rKtESn">WinJS.Class.define</a> is a constructor function. This gets invoked whenever a new instance is created and is the place where you write your object initialization code. The second parameter is an object that describes the runtime shape of the object, i.e. what instance members it will contain. The third parameter defines the set of static members that you can access directly from the class without creating an instance. In the snippet above you'll note that we invoke the static method <strong>newId</strong> from <strong>Shape</strong>'s constructor.</p>

<p>Finally, you can have static and instance non-enumerable members by prefixing the name with an underscore character. This has the effect of the member not being available when you reflect on the object and try to access its members. In the example above the static member <strong>_counter</strong>is not intended to be accessed directly by client code. We express this by prefixing an underscore character and WinJS makes sure that it sets the <em>enumerable</em> property descriptor to <strong>false</strong> when it creates the property. When we call <a href="http://bit.ly/slawwN">Object.keys</a> for instance, on the <strong>Shape</strong> constructor, here's what we get:</p>

<pre><code>console.log(Object.keys(Acme.Shapes.Shape));
// prints "newId"
</code></pre>

<p>As you can see it does not indicate <strong>_counter</strong> as being a member of <strong>Shape</strong>. Having said that if you do go ahead and access <strong>_counter</strong> anyway, it'll still work! If you want a member to be really inaccessible then you might want to <a href="http://blogorama.nerdworks.in/entry-JavaScriptclosuresactlikeimpli.aspx">use closures</a>.</p>

<h4 id="inheritingfromclasses">Inheriting from classes</h4>

<p>You can inherit one class from another by calling <a href="http://bit.ly/v48nOX">WinJS.Class.derive</a>. Here's an example:</p>

<pre><code>(function () {
    'use strict';

    // constructor function
    function initLine() {
        // call the base constructor
        Acme.Shapes.Shape.call(this, Acme.Shapes.ShapeType.Line);
    }

    var instanceMembers = {
        // overriding Shape.draw
        draw: function () {
            // call base
            Acme.Shapes.Shape.prototype.draw.call(this);
            console.log("Line.draw");
        }
    };

    // inherit from Shape
    var Line = WinJS.Class.derive(Acme.Shapes.Shape, initLine, instanceMembers);

    WinJS.Namespace.define("Acme.Shapes", {
        Line: Line
    });
})();
</code></pre>

<p>The first parameter is a reference to the base class, followed by the constructor function and the instance members. Just like class definition, you can also pass static members if need be as the fourth argument. Note that when you inherit from another class, you <em>do not</em> inherit the static members. In the example above you cannot call <strong>newId</strong> via <strong>Line</strong>. You'll also note that we call base class methods via <a href="http://bit.ly/sTarX6">Function.call</a> instead of directly invoking them, i.e. we do not, for instance, do the following from <strong>Line.draw</strong>.</p>

<pre><code>Acme.Shapes.Shape.prototype.draw(); // DO NOT do this
</code></pre>

<p>This won't work because in this case the "<strong>this</strong>" pointer inside <strong>Shape.draw</strong> will point to the <strong>Shape</strong>'s prototype and not to the <strong>Line</strong> instance on which <strong>Line.draw</strong> was called. We will therefore need to explicitly specify the context for the call via <a href="http://bit.ly/sTarX6">Function.call</a>.</p>

<h4 id="mixingfunctionalityin">Mixing functionality in</h4>

<p>Let's say you find this awesome piece of code somewhere that you think would be a great fit for one of the classes you are defining and it'd simply be too much trouble to manually copy and paste all of that code into your class definition (besides being error prone and quite simply a bad idea). In this case you can choose to "mix-in" that functionality into your existing class by calling <a href="http://bit.ly/ty6B6q">WinJS.Class.mix</a>. Here's an example:</p>

<pre><code>// mix-in some functionality from somewhere; pretend
// that we got this by including a JS or something
var SuperDrawModule = {
    superDraw: function() {
        console.log("SuperDrawModule.superDraw");
    }
};

Line = WinJS.Class.mix(Line, SuperDrawModule);
</code></pre>

<p>Now the method <strong>superDraw</strong> becomes a part of <strong>Line</strong> which means I can do the following now:</p>

<pre><code>var l = new Acme.Shapes.Line();
l.draw();

// call mixin method
l.superDraw();
</code></pre>

<h4 id="addingeventingcapabilities">Adding eventing capabilities</h4>

<p>WinJS ships with a useful little mixin object that automatically adds the ability to call <strong>addEventListener</strong>, <strong>removeEventListener</strong> and <strong>dispatchEvent</strong> on your own objects. The mixin in question is <a href="http://bit.ly/txjWh0">WinJS.Utilities.eventMixin</a>. Here's how you can use it:</p>

<pre><code>(function () {
    "use strict";

    // constructor function
    function initShape(type) {
        this.id = Acme.Shapes.Shape.newId(); // calling a static member
        if (type) {
            this.type = type;
        }
    }

    var instanceMembers = {
        id: null,
        type: Acme.Shapes.ShapeType.None,
        draw: function () {
            // fire event "draw" via "dispatchEvent"
            this.dispatchEvent("draw", { source: this });
            console.log("Shape.draw");
        }
    };

    var staticMembers = {
        // private member
        _counter: 0,
        newId: function () {
            return Acme.Shapes.Shape._counter++;
        }
    };

    var Shape = WinJS.Class.define(initShape, instanceMembers, staticMembers);

    // add eventing capability to Shape
    Shape = WinJS.Class.mix(Shape, WinJS.Utilities.eventMixin);

    // add to namespace
    WinJS.Namespace.define("Acme.Shapes", {
        Shape: Shape
    });
})();
</code></pre>

<p>Take note of the lines in bold. We add the event mixin to <strong>Shape</strong> like any other mixin and call <a href="http://bit.ly/sDaohn">eventMixin.dispatchEvent</a> to actually fire the event. Client code that handles the event would look like any other event handling code that you might have written to handle DOM events.</p>

<pre><code>var l = new Acme.Shapes.Line();
l.addEventListener("draw", function () {
    console.log("Line was drawn.");
});
l.draw();
</code></pre>

<p>Note that stuff that you add to a base class via a mixin does in fact get inherited in sub-classes. In the sample snippet above, though the event mixin was added to <strong>Shape</strong> I am able to call <strong>addEventListener</strong> on the sub-class <strong>Line</strong>.</p>

<h4 id="turningyoureventsintoproperties">Turning your events into properties</h4>

<p><a href="http://bit.ly/txjWh0">WinJS.Utilities.eventMixin</a> allowed us to make our classes act like DOM objects in supporting the registering of event handlers and in dispatching events. We can take things to the next level and add properties to our classes and add an alternative mechanism for registering event handlers. Our <strong>Shape</strong> class for instance, supports the raising of the "draw" event. Wouldn't it be nice if it supported a property called <strong>ondraw</strong> to which we can assign a callback function and have it invoked whenever the event is raised? Turns out that is exactly the sort of thing that <a href="http://bit.ly/u7evi6">WinJS.Utilities.createEventProperties</a> enables. Here's an example:</p>

<pre><code>// add "onevent" properties for all events we support
var eventPropMixin = WinJS.Utilities.createEventProperties("initialized", "draw", "disposed");
Shape = WinJS.Class.mix(Shape, eventPropMixin);
</code></pre>

<p><code>WinJS.Utilities.createEventProperties</code> basically creates a mixin object that contains properties which have the same name as the strings passed to it as parameters except for the prefixing of the word "on" to them. This function can accept a variable number of parameters - one for each event that your class supports. With this in place, now you can write code such as the following:</p>

<pre><code>var l = new Acme.Shapes.Line();
l.ondraw = function () {
    console.log("Line was drawn.");
};
l.draw();
</code></pre>

<p>One benefit of using WinJS is that you automatically get intellisense support in VisualStudio for stuff you add to your classes using it. Here's a screen shot:</p>

<blockquote>
  <p><a href="http://blogorama.nerdworks.in/images/_img12.png"><img src="http://blogorama.nerdworks.in/images/_img13.png" alt="p1" title="p1" /></a></p>
</blockquote>

<p>That's pretty much all I wanted to talk about. With these few simple methods from WinJS it is quite possible to be fairly disciplined about your JavaScript code and believe me, JavaScript being JavaScript, you're going to need all the help you can get! <img src="http://blogorama.nerdworks.in/images/_img14.png" alt="Winking smile" title="" /> I have created a small project with all of the code snippets given above <a href="http://blogorama.nerdworks.in/downloads/WinJS101.zip">here</a>.</p>]]>
      </content:encoded>
      <wp:comment>
        <wp:comment_id>195</wp:comment_id>
        <wp:comment_author>Deepika</wp:comment_author>
        <wp:comment_author_email>deepikakuls@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2012-08-05 07:22:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Nice Article. It helps me a lot to understand the basics of javascript object base programming]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>196</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2012-08-07 13:34:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks Deepika.]]>
        </wp:comment_content>
      </wp:comment>
    </item>
    <item>
      <title>Pay attention to that demo</title>
      <link>http://ghost-nerd.azurewebsites.net/payattentiontothatdemo</link>
      <dsq:thread_identifier>40</dsq:thread_identifier>
      <wp:post_date_gmt>2006-11-31 07:38:43</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>It seems implicitly apparent to me that when someone bothers to create and distribute a demo version of their software product, it must be because they want people to have a go at it and hopefully so impress them that they will want to fork up money and actually buy it. So when somebody invests thousands upon thousands of American dollars on carefully designing and building a product and expends further effort creating a less functional demo edition, the least that one expects is being able to actually use it. For some mysterious reason however the demo of the game <em><a href="http://battlefield.ea.com/battlefield/bf2142/">Battlefield 2142</a></em> does everything except allowing you to play it!</p>

<p>The demo edition does not allow you to play solo even though the full version supports it (doesn't it make more sense to make the demo edition single player only and reserve multi-player for the full version?). You absolutely have to go multi-player. When you launch the game it takes you to a page where presumably it would list all the game servers that are currently available. After waiting a while it listed exactly 1 server! When you try joining that server however it doesn't work. I forget what exactly the problem was.</p>

<p>But there is this other tab called "Advanced" where it lists lots of servers (why is this the <em>advanced</em> tab again?). At last, I thought I was making some progress. When you trying joining a server for the first time it makes you wait for like 5 full minutes assuring you that it is only "caching shaders" or something like that. Once you are through that you finally enter the game and are plonked into a spawn point (you are actually made to select a spawn point - how on earth is the gamer supposed to know where on the map s/he should spawn - at least while joining a game afresh?).</p>

<p>After sitting through all of this you're finally in the game world. You have the gun in your hand and you've just looked around for like 5 seconds when it suddenly pops up a message saying you've been kicked out of the server because everybody else voted on it. Clearly it was some kind of private game server (I think it is about time game developers used less brutal messages for notifying somebody that they have been ejected from a server for whatever reason; kicked out is quite. demeaning eh?).</p>

<p>I had just about run out of patience by this time. Figuring I'll give one more shot at it I tried joining another server. A couple of minutes later I was back at square one - kicked out of the server by something called <em><a href="http://en.wikipedia.org/wiki/PunkBuster">punkbuster</a></em>. Turns out <em>punkbuster</em> is some kind of bot that looks for gamers who have got cheats turned on in their game and kicks them out. Needless to say I had done nothing of the sort. But that really was the last straw. Not only am I not likely to buy that game; I'd probably be giving it some bad publicity too!</p>

<p>Moral of the story: pay more attention to your demo software!</p>]]>
      </content:encoded>
      <wp:comment>
        <wp:comment_id>40</wp:comment_id>
        <wp:comment_author>Proloy</wp:comment_author>
        <wp:comment_author_email></wp:comment_author_email>
        <wp:comment_date_gmt>2007-00-02 09:13:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Isn't 'kicking out' a very polite piece of action, considering that it was meant to be a battlefield of gun-toting killers? One should be thankful that one is only 'kicked out' instead of something like terminated, slaughtered, butchered, suicide-bombed etc...]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>41</wp:comment_id>
        <wp:comment_author>Ranju. V</wp:comment_author>
        <wp:comment_author_email></wp:comment_author_email>
        <wp:comment_date_gmt>2007-00-02 10:44:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Oh! You can trust the game developers to come up with innovative invectives for describing a feature as central to the game as killing people. It is commonly called as &quot;fragging&quot;.

See http://en.wikipedia.org/wiki/Frag_%28video_gaming%29]]>
        </wp:comment_content>
      </wp:comment>
    </item>
    <item>
      <title>Building an Instagram clone - Part 1</title>
      <link>http://ghost-nerd.azurewebsites.net/buildinganinstagramclonepart1</link>
      <dsq:thread_identifier>41</dsq:thread_identifier>
      <wp:post_date_gmt>2013-03-17 12:01:26</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<h3 id="introduction">Introduction</h3>

<p>When I started out on this app I was only really just interested in seeing if the web platform had really evolved to a point where an app like the hugely popular <a href="http://instagram.com/">Instagram</a> app could be built using just HTML, JavaScript and CSS. As it turns out we can in fact do exactly that. This article walks you through the technologies that make this possible and shows how it is entirely feasible today to build interoperable web applications that provide a great user experience no matter what brand of browser the user is running.</p>

<p>If you happen to be one of the two or so people who have not heard about <em>Instagram</em> then you might be pleased to hear that it is a hugely popular photo sharing and social networking service that allows you to take pictures, apply interesting digital filters on them and share them with the world to see. The service got so popular that it was <a href="http://finance.fortune.cnn.com/2012/04/09/breaking-facebook-buying-instagram-for-1-billion/">acquired by Facebook</a> for a bag full of cash and stock in April of 2012.</p>

<p><a href="http://blogorama.nerdworks.in/arbit/InstaFuzz/">InstaFuzz</a> is the name of the app I put together and while I don't expect to be acquired by Facebook or anybody else for a billion green it does however make the case that an app such as this one can be built using only standards compliant web technologies such as Canvas, File API, Drag/Drop, Web Workers, ES5 and CSS3 and still manage to run well on modern browsers such as Internet Explorer 10, Google Chrome and Firefox.</p>

<h3 id="abouttheapp">About the app</h3>

<p>If you'd like to take a look at the app, then here's where it is hosted at:</p>

<blockquote>
  <p><a href="http://blogorama.nerdworks.in/arbit/InstaFuzz/">http://blogorama.nerdworks.in/arbit/InstaFuzz/</a></p>
</blockquote>

<p>You can download the source and run locally from <a href="http://sdrv.ms/14B672O">here</a>.  While this is a Visual Studio 2012 project there really isn't any server code or anything like that.  You can use your favorite editor to look at the source and run it from the file system if you are so inclined.</p>

<p>As soon as you load it up, you're presented with a screen that looks like this:</p>

<blockquote>
  <p><a href="http://blogorama.nerdworks.in/images/_img1.jpg"><img src="http://blogorama.nerdworks.in/images/_img2.jpg" alt="clip_image002" title="clip_image002" /></a></p>
</blockquote>

<p>The idea is that you can load up a photograph into the app either by clicking on the big red "Add" button on the bottom left hand corner or drag and drop an image file into the blackish/blue area on the right. Once you do that you get something that looks like this:</p>

<blockquote>
  <p><a href="http://blogorama.nerdworks.in/images/_img15.png"><img src="http://blogorama.nerdworks.in/images/_img16.png" alt="clip_image003" title="clip_image003" /></a></p>
</blockquote>

<p>You'll note that a list of digital filters are listed on the left of the screen showing a preview of what the image would look like if you were to apply the said filter. Applying a filter is a simple matter of clicking on one of the filter previews on the left. Here's what it looks like after applying the "Weighted Grayscale" filter followed by a "Motion Blur". As you can tell filters are <em>additive</em> - as you keep clicking on filters, they are applied on top of what was applied earlier:</p>

<blockquote>
  <p><a href="http://blogorama.nerdworks.in/images/_img17.png"><img src="http://blogorama.nerdworks.in/images/_img18.png" alt="clip_image004" title="clip_image004" /></a></p>
</blockquote>

<p>Let's next take a look at how the UI layout has been put together.</p>

<h3 id="uilayout">UI Layout</h3>

<p>The HTML markup is actually so little that I can actually reproduce the contents of the BODY tag in its entirety here (excluding the SCRIPT includes):</p>

<pre><code>&lt;header&gt;
    &lt;div id="title"&gt;InstaFuzz&lt;/div&gt;
&lt;/header&gt;
&lt;section id="container"&gt;
    &lt;canvas id="picture" width="650" height="565"&gt;&lt;/canvas&gt;
    &lt;div id="controls"&gt;
        &lt;div id="filters-list"&gt;&lt;/div&gt;
        &lt;button id="loadImage"&gt;Add&lt;/button&gt;
        &lt;input type="file" id="fileUpload"
               style="display: none;"
               accept="image/gif, image/jpeg, image/png" /&gt;
    &lt;/div&gt;
&lt;/section&gt;

&lt;!-- Handlebar template for a filter UI button --&gt;
&lt;script id="filter-template" type="text/x-handlebars-template"&gt;
    &lt;div class="filter-container" data-filter-id="{{filterId}}"&gt;
        &lt;div class="filter-name"&gt;{{filterName}}&lt;/div&gt;
        &lt;canvas class="filter-preview" width="128" height="128"&gt;&lt;/canvas&gt;
    &lt;/div&gt;
&lt;/script&gt;
</code></pre>

<p>There's nothing much going on here. Pretty much everything should be standard fare. I will however draw attention to the fact that I am using the <a href="http://handlebarsjs.com/">Handlebars</a> JavaScript templating system here for rendering the markup for the list of filters on the left of the screen. The template markup is declared in the HTML file (the SCRIPT tag in the snippet shown above) and then used from JavaScript. The template markup is then bound to a JavaScript object that supplies the values for handlebars expressions such as <em>{{filterId}}</em> and <em>{{filterName}}.</em> Here's the relevant piece of JS from the app with a bit of DOM manipulation help from <a href="http://jquery.com/">jQuery</a>:</p>

<pre><code>var templHtml = $("#filter-template").html(),
    template = Handlebars.compile(templHtml),
    filtersList = $("#filters-list");
var context = {
    filterName: filter.name,
    filterId: index
};

filtersList.append(template(context));
</code></pre>

<p>As you can tell from the HTML markup all the filter preview boxes feature a CANVAS tag as does the big box on the right where the final output is rendered. We'll go into a bit more detail later on in the article as to how canvas technology is used to achieve these effects.</p>

<p>The app also uses <a href="http://msdn.microsoft.com/en-us/library/ie/ms530757(v=vs.85).aspx">CSS3 @font-face</a> fonts to render the text in the header and the "Add" button. The fonts have been taken from the excellent <a href="http://fontsquirrel.com/">Font Squirrel</a> site and here's what the declaration looks like:</p>

<pre><code>@font-face {
    font-family: 'TizaRegular';
    src: url('fonts/tiza/tiza-webfont.eot');
    src: url('fonts/tiza/tiza-webfont.eot?#iefix')
           format('embedded-opentype'),
         url('fonts/tiza/tiza-webfont.woff') format('woff'),
         url('fonts/tiza/tiza-webfont.ttf') format('truetype'),
         url('fonts/tiza/tiza-webfont.svg#TizaRegular') format('svg');
    font-weight: normal;
    font-style: normal;
}
</code></pre>

<p>This directive causes the user agent to embed the font in the page and make it available under the name assigned to the <em>font-family</em> rule which in this case is "TizaRegular". After this we can assign this font to any CSS <em>font-family</em> rule like how we normally do. In <em>InstaFuzz</em> I use the following rule to assign the font to the header element:</p>

<pre><code>font-family: TizaRegular, Cambria, Cochin, Georgia, Times,
   "Times New Roman", serif;
</code></pre>

<p>You might also have noticed that there is a subtle shadow being dropped on the page by the container element.</p>

<blockquote>
  <p><a href="http://blogorama.nerdworks.in/images/_img19.png"><img src="http://blogorama.nerdworks.in/images/_img20.png" alt="clip_image001[4]" title="clip_image001[4]" /></a></p>
</blockquote>

<p>This is made possible using the <a href="http://msdn.microsoft.com/library/ie/jj127322.aspx">CSS3 box-shadow</a> rule and here's how it's used in <em>InstaFuzz</em>.</p>

<pre><code>-moz-box-shadow: 1px 0px 4px #000000, -1px -1px 4px #000000;
-webkit-box-shadow: 1px 0px 4px #000000, -1px -1px 4px #000000;
box-shadow: 1px 0px 4px #000000, -1px -1px 4px #000000;
</code></pre>

<p>This causes the browser to render a shadow around the relevant element. Each comma separated section in the value specifies the following attributes of the shadow:</p>

<ol>
<li><p>Horizontal offset</p></li>
<li><p>Vertical offset</p></li>
<li><p>Spread distance - positive values have the effect of softening the shadow</p></li>
<li><p>Shadow color</p></li>
</ol>

<p>One can specify multiple shadow values separated by comma as in fact has been done above. Note that I've also specified the shadow using vendor prefix syntax for Firefox and Chrome/Safari using the <em>moz</em> and <em>webkit</em> prefixes. This causes the shadow to continue to work in versions of those browsers where support for this capability was provided using the vendor prefixed version of the rule. Note that the W3C version of the rule - <em>box-shadow</em> - is specified last. This is done deliberately to ensure that in case the browser supports both the forms then only the W3C behavior is actually applied to the page.</p>

<p>One often finds that web developers either fail to include vendor prefixed version of a given CSS3 rule for all the browsers that support that rule and/or fail to include the W3C version as well. Often developers just put the <em>webkit</em> version of the rule ignoring other browsers and the W3C standard version. This causes two problems - [1] poor user experience for users who are using non-webkit browsers and [2] it ends up resulting in webkit becoming a de-facto standard for the web. Ideally we want W3C to be driving the future of the web and not one specific browser implementation. So here are some things to remember when playing with experimental implementations of CSS features:</p>

<ol>
<li><p>Use vendor prefixed versions of CSS rules by all means but remember to specify the rule for all supported browsers and not just the one that you happen to be testing the page in (if you're using <a href="http://www.microsoft.com/visualstudio/eng/products/visual-studio-express-products">Visual Studio</a> to edit your CSS then you might be interested in the supremely excellent extension for Visual Studio called <a href="http://visualstudiogallery.msdn.microsoft.com/6ed4c78f-a23e-49ad-b5fd-369af0c2107f"><em>Web Essentials</em></a> that makes the job of managing vendor prefixes about as simple as it can possibly get).</p></li>
<li><p>Remember to specify the W3C version of the rule as well.</p></li>
<li><p>Remember to order the occurrence of the rules so that the W3C version shows up last. This is to allow clients that support both the vendor prefixed version and the W3C version to use the W3C specified semantics for the rule.</p></li>
</ol>

<p>That's all for now.  In the <a href="http://blogorama.nerdworks.in/entry-BuildinganInstagramclonePart2.aspx">next and final post</a> in this series we'll take a look at how the app supports drag/drop of files, the use of File API, how the filters themselves work and how we prevent the UI thread from freezing by delegating the core number crunching work to web workers.</p>]]>
      </content:encoded>
    </item>
    <item>
      <title>Forced software updates?</title>
      <link>http://ghost-nerd.azurewebsites.net/forcedsoftwareupdates</link>
      <dsq:thread_identifier>42</dsq:thread_identifier>
      <wp:post_date_gmt>2006-07-18 17:38:46</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>Vendors of "free" software programs have started getting into this annoying habit of forcing updates down users throats these days! The sad thing is that these updates aren't <em>updates</em> in the traditional sense of the word; they just make you re-download the entire software again!</p>

<p>The funny thing is that the software seems to just give up the ghost after a preset period of time has expired! There are no discreet checks with an internet server to see whether a new version is in fact available! I wonder what would happen if the time expires and the vendor doesn't manage to release a newer version! So far I've found <a href="http://sketchup.google.com/">Google SketchUp</a> and the <a href="http://www.vmware.com/">VMWare</a> virtualization server behaving this way. When they say its free, it should be free forever! It is pretty silly making people download <em>updates</em> when the user is not looking for one especially when these <em>updates</em> are king size files (around 19MB for Google Sketchup and around 150MB for VMWare server)!</p>

<p>Now don't get me wrong. I think it is really cool that these corporations are letting people use their software for free and it is even cooler that they want them to always use the latest and the greatest version. Its just that I don't want <em>them</em> deciding when I need the software updated (<em>security</em> updates are an entirely different issue altogether though; they're like medicine, you just hold your breath and swallow!).</p>]]>
      </content:encoded>
    </item>
    <item>
      <title>On Bugs and Destiny</title>
      <link>http://ghost-nerd.azurewebsites.net/onbugsanddestiny</link>
      <dsq:thread_identifier>43</dsq:thread_identifier>
      <wp:post_date_gmt>2007-01-10 08:04:00</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>A recent experience at work has left me convinced that sometimes a bug is quite simply just meant to be. I do not refer mind you to bugs that choose to make an appearance only after the user has performed a jiggle in front of the monitor having muttered strange incantations while standing on his/her head with the planets aligned in just the right manner. I refer rather, to bugs that a blind man in a dark room would have been hard pressed to miss (now, if you feel the need to clarify with me the fine point of how a dark room can make the process of locating an object harder than it would otherwise have been to a blind man, then I strongly urge you to resist that need).</p>

<p>Any given feature in the product that I am working on must necessarily pass through the following quality checks before it ever sees the light of day. It must first negotiate a series of unit test cases cunningly designed to trip it up when it's not looking. It must then survive the traumatic experience of system testing where the entire development team has a go at it. This is followed by days upon days of unending torment by the quality assurance team. Only those features that display the resilience to pass through all this without blemish make it to the final release. And yet, a bug that failed the most basic of test cases managed to escape notice and show up in front of the customer!</p>

<p>Like I said, some bugs are just <em>meant to be</em>!</p>]]>
      </content:encoded>
    </item>
    <item>
      <title>Concurrency with an STA?</title>
      <link>http://ghost-nerd.azurewebsites.net/concurrencywithansta</link>
      <dsq:thread_identifier>44</dsq:thread_identifier>
      <wp:post_date_gmt>2007-08-08 09:50:31</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>I was recently experimenting with the Windows <a href="http://msdn2.microsoft.com/en-us/library/ms695276.aspx">Running Object Table</a> (ROT) when I ran into a peculiar problem. Here's the scenario: I had a simple in-process COM component configured to run in a <a href="http://msdn2.microsoft.com/en-us/library/ms680112.aspx">single threaded apartment</a> (STA). The STA apartment configuration, if you didn't know, is an indication to the COM runtime that the component does not know anything about thread synchronization and will miserably stomp over itself and do other unpleasant things if unbridled concurrent access to an instance of it is made available from multiple threads. Wanting to test whether the COM runtime's call serialization guarantee would continue to hold true even when we remote an in-process component to remote processes via the ROT, I put together a quick sample containing the following:</p>

<ul>
<li><p>A simple in-process STA COM component named <code>Dong</code> that contained a single method, again, called <code>Dong</code> that simply popped up a message box to announce to the world the fact that it had indeed been found worthy of being invoked.</p></li>
<li><p>A console application called <em>AddToROT.exe</em> that created an instance of <code>Dong</code> and added it to the ROT. After that it hung around running a windows message loop set to terminate upon a key press. The message loop is needed because the COM runtime's call serialization implementation depends on it. We'll learn why exactly in a moment. Here's what the loop looks like:</p>

<pre><code>while( !_kbhit() )
{
    MSG msg;
    if( PeekMessage( &amp;msg, NULL, 0, 0, PM_REMOVE ) )
    {
        TranslateMessage( &amp;msg );
        DispatchMessage( &amp;msg );
    }
    else
        Sleep( 500 );
}
</code></pre>

<p>As you can see, a fairly straightforward message loop that keeps spinning till you hit a key on the keyboard.</p></li>
<li><p>The last piece in the sample was a console application called <em>GetFromROT.exe</em> that fetched a reference to <code>Dong</code> from the ROT and invoked its sole method.</p></li>
</ul>

<p>My plan was to first run <em>AddToROT</em> and then launch multiple instances of <em>GetFromROT</em>. I expected that the message box from <code>Dong.Dong()</code> would get displayed one after the other even though the client processes were running more or less concurrently. I expected this because that's what the COM runtime guarantees for components marked as an STA. How exactly does it provide this guarantee? It's quite simple actually.</p>

<p>Whenever a method call is made on a component from the thread on which it was created, it behaves like a regular method call, i.e. your call results in a simple transfer of control to the called method in the component. When you wish to call the method from another thread however, the COM powers that be have mandated that you first <em>marshal</em> the interface pointer across the thread boundary before invoking methods on it. You do this via <code>CoMarshalInterThreadInterfaceInStream</code> and <code>CoGetInterfaceAndReleaseStream</code>, i.e. you call the former from the thread on which the component was created to be handed an <code>IStream</code> pointer which you somehow pass to the second thread from where you call the latter to be handed a component pointer which in turn you can use to call its methods. If you do all this the COM runtime guarantees that the calls will get serialized and peace shall reign everywhere.</p>

<p>Now if all that sounds a bit confusing here's a small code snippet that'll hopefully clear the air for you (the code below is meant to just illustrate the concept which means that there are no error checks; and what's more, it won't even compile!).</p>

<h3 id="thread1">Thread 1</h3>

<pre><code>//
// let's assume this is a global variable
//
IStream *g_pStream;

//
// create an instance of dong
//
IDong *pDong;
CoCreateInstance( ..., &amp;pDong );

//
// marshal the interface pointer into a stream
//
CoMarshalInterThreadInterfaceInStream(
   __uuidof( IDong ),
   pDong,
   &amp;g_pStream );

//
// simple straightforward method call
//
pDong-&gt;Dong();
</code></pre>

<h3 id="thread2">Thread 2</h3>

<pre><code>IDong *pDong;

//
// un-marshal the interface pointer
//
CoGetInterfaceAndReleaseStream(
   g_pStream,
   __uuidof( IDong ),
   &amp;pDong );

//
// "pDong" is in truth a proxy object that marshalls the call
// across thread/process boundaries; the COM runtime ensures that
// the component gets only one call at a time
//
pDong-&gt;Dong();
</code></pre>

<p>Now that you know how marshalling interface pointers across threads is accomplished, let's go back to our question of how the COM runtime provides the call serialization guarantee and what it has to do with running message loops. As it turns out whenever you create an STA COM component, the COM runtime secretly goes and creates a hidden window. When you marshal the interface pointer across to another thread (or another process for that matter) what you are actually handed is a proxy object. When you invoke a method on the proxy all that it does is to serialize the method parameters and post (or rather, <em>send</em>) a regular window message to the hidden window. The window procedure that handles the message unpacks the parameters and calls the method on the actual component. Simple! No matter how many concurrent clients exist for the component, as long as all the method calls are routed through the hidden window, call serialization is automatically guaranteed!</p>

<p>As must be evident, in order for windows (hidden or otherwise) to receive messages there <strong>must</strong> be a message loop that's retrieving and dispatching the messages. This is the reason why COM's call serialization guarantee works only so long as the thread on which the component was created has a message loop going. So far so good!</p>

<p>In our sample setup therefore you couldn't have blamed me too much for expecting that when I run 2 instances of <em>GetFromROT</em> one after the other without dismissing the message box shown as a result of the first instance the 2nd instance would essentially block on the method call till I dismissed the first message box. After it had been dismissed however I would see the message box appearing a second time, courtesy the 2nd instance of <em>GetFromROT</em>. Here's a screenshot of what I actually saw!</p>

<blockquote>
  <p><img src="http://blogorama.nerdworks.in/images/concsta-s1.png" alt="" title="" /></p>
</blockquote>

<p>As you can see, the second instance of <em>GetFromROT</em> was also somehow given access to <code>Dong</code> while the first invocation still hadn't returned! What's even more stranger is that both the calls seem to have occurred on the same thread!! This is evident from the fact that both the message boxes show the same thread ID as returned by the <code>GetCurrentThreadId</code> API.</p>

<p>For a couple of days there I walked about with tousled hair, unshaved chin and rumpled shirt with a murderous look in my eye. What has world come to if one can't trust the COM runtime to do what it had promised to do?! This sorry state of affairs ended finally one day as I was performing my morning ablutions (and I could hear mother nature letting out a sigh of relief) when it dawned upon me with startling clarity that the windows message box spawns a little message loop of its own!</p>

<p>That was indeed the problem here! As it turns out whenever you pop up a message box (or any modal dialog box for that matter) a local message loop is executed from that dialog. This is done because of the modal nature of the dialog. The thread that has the message pump running is now blocked on the call to the modal dialog which means that the message pump isn't doing a whole lot while the dialog is active. It would also mean that the dialog itself would remain unresponsive since there's nobody picking the messages from the queue and having it processed. To counter all this, modal dialog boxes always run their own message loop till the dialog is dismissed.</p>

<p>So, in our case the 2nd call to <code>Dong.Dong</code> was facilitated not by the message loop running in <em>AddToROT</em> but from the one running in the message box that had been invoked from the previous call to <code>Dong.Dong</code>. We can easily verify this by taking a look at the call-stack of the primary thread in <em>AddToROT</em> while <code>Dong.Dong</code> is running.</p>

<p>Here's the call-stack while the message box is being shown as a result of running the first instance of <em>GetFromROT</em>. The stack was captured using the excellent <a href="http://www.microsoft.com/technet/sysinternals/Utilities/ProcessExplorer.mspx">Process Explorer</a> tool written by <a href="http://www.microsoft.com/presspass/exec/techfellow/Russinovich/default.mspx">Mark Russinovich</a> of <a href="http://www.microsoft.com/technet/sysinternals/default.mspx">Sysinternals</a> fame. I have snipped some of the function calls from the stack so that we can focus on the relevant stuff.</p>

<pre><code>snip.. snip..

USER32.dll!NtUserWaitMessage+0xc
USER32.dll!InternalDialogBox+0xd0
USER32.dll!SoftModalMessageBox+0x938
USER32.dll!MessageBoxWorker+0x2ba
USER32.dll!MessageBoxTimeoutW+0x7a
USER32.dll!MessageBoxExW+0x1b
USER32.dll!MessageBoxW+0x45
SampleCOM.dll!CDong::Dong+0x7e          &lt;-- this is our function
RPCRT4.dll!Invoke+0x30
RPCRT4.dll!NdrStubCall2+0x297

snip.. snip..

ole32.dll!StubInvoke+0xa7
ole32.dll!CCtxComChnl::ContextInvoke+0xe3
ole32.dll!MTAInvoke+0x1a
ole32.dll!STAInvoke+0x4a

snip.. snip..

USER32.dll!DispatchMessageWorker+0x306
USER32.dll!DispatchMessageW+0xf         &lt;-- and this is the
                                            DispatchMessage call
AddToROT.exe!wmain+0x135
AddToROT.exe!__tmainCRTStartup+0x1a6
AddToROT.exe!wmainCRTStartup+0xd
kernel32.dll!BaseProcessStart+0x23
</code></pre>

<p>Now take a look at what the stack looks like after the second instance of <em>GetFromROT</em> is launched without dismissing the first message box.</p>

<pre><code>snip.. snip..

USER32.dll!NtUserWaitMessage+0xc
USER32.dll!InternalDialogBox+0xd0
USER32.dll!SoftModalMessageBox+0x938
USER32.dll!MessageBoxWorker+0x2ba
USER32.dll!MessageBoxTimeoutW+0x7a
USER32.dll!MessageBoxExW+0x1b
USER32.dll!MessageBoxW+0x45
SampleCOM.dll!CDong::Dong+0x7e          &lt;-- second invocation
                                            of Dong.Dong
RPCRT4.dll!Invoke+0x30
RPCRT4.dll!NdrStubCall2+0x297

snip.. snip..

ole32.dll!StubInvoke+0xa7
ole32.dll!CCtxComChnl::ContextInvoke+0xe3
ole32.dll!MTAInvoke+0x1a
ole32.dll!STAInvoke+0x4a

snip.. snip..

USER32.dll!DispatchMessageWorker+0x306
USER32.dll!DispatchMessageW+0xf         &lt;-- dispatch message from
                                            the loop in MessageBox
USER32.dll!DialogBox2+0x15a
USER32.dll!InternalDialogBox+0xd0
USER32.dll!SoftModalMessageBox+0x938
USER32.dll!MessageBoxWorker+0x2ba
USER32.dll!MessageBoxTimeoutW+0x7a
USER32.dll!MessageBoxExW+0x1b
USER32.dll!MessageBoxW+0x45
SampleCOM.dll!CDong::Dong+0x7e          &lt;-- first invocation of
                                            Dong.Dong
RPCRT4.dll!Invoke+0x30
RPCRT4.dll!NdrStubCall2+0x297

snip.. snip..

ole32.dll!StubInvoke+0xa7
ole32.dll!CCtxComChnl::ContextInvoke+0xe3
ole32.dll!MTAInvoke+0x1a
ole32.dll!STAInvoke+0x4a

snip.. snip..

USER32.dll!DispatchMessageWorker+0x306
USER32.dll!DispatchMessageW+0xf         &lt;-- original dispatch msg
                                            for first invocation
AddToROT.exe!wmain+0x135
AddToROT.exe!__tmainCRTStartup+0x1a6
AddToROT.exe!wmainCRTStartup+0xd
kernel32.dll!BaseProcessStart+0x23
</code></pre>

<p>As is evident, the fact that the message loop in the <code>MessageBox</code> API does not filter for messages that are applicable only to the message box window and its descendants results in this side effect. Inadvertently our STA component has actually become re-entrant! The behaviour we were expecting to see is evident the moment you change the <code>MessageBox</code> call to a <code>_tprintf</code> and make the method wait for user input via a call to <code>_getch</code>. The following implementation of <code>Dong.Dong</code> causes the second launch of <em>GetFromROT</em> to wait till the first launch has been responded to by the pressing a key in the <em>AddToROT</em> console window.</p>

<pre><code>STDMETHODIMP CDong::Dong(LONG* plRetVal)
{
    *plRetVal = 50;

    TCHAR szBuf[1024];
    _stprintf( szBuf, _T( "Dong - Thread ID = 0x%X, " \
    "Object ID = %d\n" ),
        GetCurrentThreadId(), m_iObjectID );
    _tprintf( _T( "%s\nPress any key to return from "\
    "CDong::Dong\n" ), szBuf );
    _getch();
    return S_OK;
}
</code></pre>

<p>A nasty sort of issue to run into wouldn't you think?!</p>]]>
      </content:encoded>
    </item>
    <item>
      <title>Switching threads - my second article for Code Project!</title>
      <link>http://ghost-nerd.azurewebsites.net/switchingthreadsmysecondarticl</link>
      <dsq:thread_identifier>45</dsq:thread_identifier>
      <wp:post_date_gmt>2007-08-16 17:59:19</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>After much grievous toil my second <a href="http://www.codeproject.com/">Code Project</a> article has finally been posted (phew)! It talks about a thread switching technique that lets you switch the thread on which a routine is running by messing around with stack pointers, CPU registers and window messages. You'll find the article here:</p>

<blockquote>
  <p><a href="http://www.codeproject.com/useritems/threadswitch.asp">http://www.codeproject.com/useritems/threadswitch.asp</a></p>
</blockquote>

<p>I have written another article for Code Project by the way, an article that had its origin here as a <a href="http://blogorama.nerdworks.in/comment.aspx?entryID=21">blog post</a>. It talks about writing self-deleting executables. You'll find it here:</p>

<blockquote>
  <p><a href="http://www.codeproject.com/useritems/selfdel.asp">http://www.codeproject.com/useritems/selfdel.asp</a></p>
</blockquote>

<p>Feel free to leave comments about the articles and to vote for them on Code Project!</p>]]>
      </content:encoded>
    </item>
    <item>
      <title>Gmail - Can&apos;t take security for granted!</title>
      <link>http://ghost-nerd.azurewebsites.net/gmailcanttakesecurityforgrante</link>
      <dsq:thread_identifier>46</dsq:thread_identifier>
      <wp:post_date_gmt>2008-02-10 10:04:15</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>A couple of disturbing stories about how your email account can be compromised!</p>

<ul>
<li><a href="http://www.davidairey.com/google-gmail-security-hijack/">Google's GMail security failure leaves my business sabotaged</a></li>
<li><a href="http://www.codinghorror.com/blog/archives/001072.html">A Question of Programming Ethics</a></li>
</ul>]]>
      </content:encoded>
    </item>
    <item>
      <title>Custom windows with WPF</title>
      <link>http://ghost-nerd.azurewebsites.net/customwindowswithwpf</link>
      <dsq:thread_identifier>47</dsq:thread_identifier>
      <wp:post_date_gmt>2009-02-10 15:17:07</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>I am working on a little <a href="http://en.wikipedia.org/wiki/Windows_Presentation_Foundation">WPF</a> app to build a UI for the <a href="http://www.freebase.com/">Freebase</a> web database and decided that the entry point to the app will be a simple textbox where the user can type in the search text. Here's what it looks like:</p>

<p><img src="http://blogorama.nerdworks.in/images/cwin.png" alt="Screenshot of the search textbox." /></p>

<p>While this was the look that I had envisioned I did not really expect to be able to achieve it as easily as I did with WPF! I at first started off with a simple window and set its size to what I wanted.</p>

<pre><code>&lt;Window x:Class="TextboxApp.Window1"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Freebase Search"
        Height="65"
        WindowStyle="None"
        Width="708"
        MinHeight="65"
        MinWidth="400"
        WindowStartupLocation="CenterScreen"
        x:Name="MainWindow"&gt;
...
</code></pre>

<p>I then plonked a <code>DockPanel</code> into the window with a <code>TextBox</code> in it.</p>

<pre><code>&lt;DockPanel Background="Transparent"&gt;
    &lt;TextBox x:Name="txtSearch"
             FontSize="40"
             TextAlignment="Center"
             VerticalAlignment="Center"
             Foreground="Wheat"
    &lt;/TextBox&gt;
&lt;/DockPanel&gt;
</code></pre>

<p>I wanted a swanky gradient background and also get the nice rounded corners for the window. After a few attempts with less than stellar results I settled upon the following structure.</p>

<pre><code>&lt;DockPanel Background="Transparent"&gt;
    &lt;Border CornerRadius="9,9,9,9"&gt;
        &lt;Border.Background&gt;
            &lt;LinearGradientBrush StartPoint="0,0" EndPoint="2,1" x:Name="WindowBackground"&gt;
                &lt;GradientStop Color="#CC000000"  Offset="0.0" /&gt;
                &lt;GradientStop Color="#CCFFFFFF" Offset="1.0" /&gt;
            &lt;/LinearGradientBrush&gt;
        &lt;/Border.Background&gt;
        &lt;TextBox x:Name="txtSearch"
                 FontSize="40"
                 TextAlignment="Center"
                 VerticalAlignment="Center"
                 KeyDown="txtSearch_KeyDown"
                 Background="Transparent"
                 Foreground="Wheat"
                 BorderBrush="Transparent"
                 BorderThickness="0"
                 Visibility="Hidden"&gt;
        &lt;/TextBox&gt;
    &lt;/Border&gt;
&lt;/DockPanel&gt;
</code></pre>

<p>I now had a textbox with nice rounded corners but the window itself was a standard rectangle. A little googling revealed the pixy dust you've got to sprinkle to get it going. First you enable transparency on the window itself and make its background transparent like so (note the tags in bold below):</p>

<pre><code>&lt;Window x:Class="TextboxApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Freebase Search"
        Height="65"
        Width="708"
        WindowStyle="None"
        MinHeight="65"
        MinWidth="400"
        WindowStartupLocation="CenterScreen"
        x:Name="TheMainWindow"
        AllowsTransparency="True"
        Background="Transparent"
        ShowInTaskbar="False"&gt;
</code></pre>

<p>The basic idea is to make all backgrounds and borders transparent except for the <code>Border</code> tag in the <code>DockPanel</code> so that only the rouned corners in the border element are visible. Here's the modified code (again, note the stuff in bold):</p>

<pre><code>&lt;DockPanel Background="Transparent"&gt;
    &lt;Border CornerRadius="9,9,9,9"&gt;
        &lt;Border.Background&gt;
            &lt;LinearGradientBrush StartPoint="0,0" EndPoint="2,1" x:Name="WindowBackground"&gt;
                &lt;GradientStop Color="#CC000000"  Offset="0.0" /&gt;
                &lt;GradientStop Color="#CCFFFFFF" Offset="1.0" /&gt;
            &lt;/LinearGradientBrush&gt;
        &lt;/Border.Background&gt;
        &lt;TextBox x:Name="txtSearch"
                 FontSize="40"
                 TextAlignment="Center"
                 VerticalAlignment="Center"
                 KeyDown="txtSearch_KeyDown"
                 Background="Transparent"
                 Foreground="Wheat"
                 BorderBrush="Transparent"
                 BorderThickness="0"&gt;
        &lt;/TextBox&gt;
    &lt;/Border&gt;
&lt;/DockPanel&gt;
</code></pre>

<p>That's it! Now I had the nice custom round cornered window! I added some pizzazz with some fade-in/fade-out animation and I was in business!</p>

<p><img src="http://blogorama.nerdworks.in/images/cwin.png" alt="Screenshot of the search textbox." /></p>

<p>If you'd like to take a look at the code, here's the link you'll need.</p>

<ul>
<li><a href="http://blogorama.nerdworks.in/downloads/TextboxAppSrc.zip">Download Source</a></li>
</ul>]]>
      </content:encoded>
    </item>
    <item>
      <title>How to create a simple Workflow Foundation (WF) activity</title>
      <link>http://ghost-nerd.azurewebsites.net/howtocreatingasimpleworkflowfo</link>
      <dsq:thread_identifier>48</dsq:thread_identifier>
      <wp:post_date_gmt>2008-07-14 03:51:41</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>Quite suddenly, with no prior warning whatsoever, I resolved with firm determination that I will without further delay inflict upon unsuspecting world, my first screen recorded, poorly narrated technical tutorial. After many failed attempts with many miserable little screen capture programs, I finally managed to put something together using a trial edition of <a href="http://www.techsmith.com/camtasia.asp">Camtasia</a> which in my opinion is a stunningly useful piece of software if you dig this sort of impulsive screen recording fits. I just wish it didn't cost quite as much as it does.</p>

<p>The tutorial is a short 20 minute video that shows you how you can create an extremely simple, fairly useless workflow activity using the <a href="http://msdn.microsoft.com/en-us/netframework/aa663328.aspx">Windows Workflow Foundation</a> (WF). It shows you how you can create a workflow that uses the activity and then how you can host the runtime and execute the workflow.</p>

<p>The <em>Camtasia</em> produced Flash file has been hosted on a site called <a href="http://www.hotlinkfiles.com">Hot Link Files</a> who in their boundless magnanimity allow basically everybody to host whatever they want on their servers and happily provide URLs to those files. Go <em>Hot Link Files</em>! They do have a clause however that they'll delete this file after 30 days of inactivity (note to self: figure out another cheap stingy way of hosting files and not spend American dollars).</p>

<p><strong>[Update (22-Aug):<em></strong>I have since then changed my hosting provider and now have a gigabyte of disk space which is considerably more than the 20 MB that I used to scrounge with earlier and have therefore moved the SWF file for this movie on to my web server itself. It did cost American dollars though (dang!).<strong></em>]</strong></p>

<p>Without further mindless blathering then, here's the tutorial. Oh, one more thing - unless you take great delight in squinting at the screen trying to make out extremely small text you might want to click the <em>full-screen</em> button on the video player below; you should find a small button that looks like a cross-hair on the bottom right hand corner of the player once you start playback and clicking it will hopefully launch the player in full-screen mode.</p>

<div id="media">  
            <object id="csSWF" classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="640" height="480" codebase="http://active.macromedia.com/flash7/cabs/swflash.cab#version=9,0,28,0">
                <param name="src" value="http://blogorama.nerdworks.in/movies/basic-wf.swf">
                <param name="bgcolor" value="#1a1a1a">
                <param name="quality" value="best">
                <param name="allowScriptAccess" value="always">
                <param name="allowFullScreen" value="true">
                <param name="scale" value="showall">
                <param name="flashVars" value="autostart=false">
                <embed name="csSWF" src="http://blogorama.nerdworks.in/movies/basic-wf.swf" width="640" height="480" bgcolor="#1a1a1a" quality="best" allowscriptaccess="always" allowfullscreen="true" scale="showall" flashvars="autostart=false" pluginspage="http://www.macromedia.com/shockwave/download/index.cgi?P1_Prod_Version=ShockwaveFlash">
            </object>
        </div>]]>
      </content:encoded>
      <wp:comment>
        <wp:comment_id>81</wp:comment_id>
        <wp:comment_author>Balasubramanian</wp:comment_author>
        <wp:comment_author_email>message_to_bala@yahoo.com</wp:comment_author_email>
        <wp:comment_date_gmt>2009-05-26 20:12:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Hi Raj,

This video tutorial would really be useful to the beginners of WF.

Nice effort.

Thanks and Regards,
Balasubramanian A]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>82</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2009-05-27 03:20:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks Bala! :)]]>
        </wp:comment_content>
      </wp:comment>
    </item>
    <item>
      <title>Animating CSS3 2D Transforms</title>
      <link>http://ghost-nerd.azurewebsites.net/animatingcss32dtransforms</link>
      <dsq:thread_identifier>49</dsq:thread_identifier>
      <wp:post_date_gmt>2011-05-12 23:31:35</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>There was a little "poke fun at the boss" mail trail at work recently (yep, we do that sometimes and everybody just takes it in stride; it just so happened that boss was the target this time but it might just as well have been yours truly or anybody else) and I contributed to the joint exercise with a little video cooked up with <a href="http://explore.live.com/windows-live-movie-maker?os=other">Windows Live Movie Maker</a> (nope, I am <em>not</em> posting the video here!). Somebody wondered if that video could have been built with a HTML5, JavaScript and CSS3 solution and I figured I'd give it a shot.</p>

<p>The basic idea was to show a sequence of "scenes" where each scene animates one or more HTML elements in some fashion. My first choice was to consider using CSS3 transitions but given that I wanted this to work in Internet Explorer 9 (IE9) which does not support CSS3 transitions, I decided to go with a JavaScript based animation approach.</p>

<p>Being an ardent <a href="http://jquery.com/">jQuery</a> user I thought I'd extend jQuery's effects system (primarily via the <code>animate</code> function) by writing a little plugin that would let me animate CSS3 2D transform matrices. I couldn't use <code>jQuery.animate</code> as is because it requires the property being animated to be a numeric value (width, opacity, left, top etc.) and CSS3 2D transform values are essentially 3x2 matrices.</p>

<h3 id="sowhatarecss32dtransforms">So what are CSS3 2D Transforms?</h3>

<p>Before we talk about the plugin though let's quickly review how CSS3 2D transforms work. Here's a <code>div</code> for example that has been rotated clock-wise about its center by 45 degrees (you'll need to use IE9 or a recent version of Firefox, Chrome, Safari or Opera to see the rotation):</p>

<blockquote>
  <div style="text-align: center; font-style: normal; font-size: 23px; line-height: 60px; background-color: black; margin-top: 20px; width: 60px; font-family: cambria, cochin, georgia, times, serif; margin-bottom: 20px; height: 60px; color: white; font-weight: bold; -o-transform: rotate(45deg); -moz-transform: rotate(45deg); -webkit-transform: rotate(45deg); -ms-transform: rotate(45deg); transform: rotate(45deg); -o-box-shadow: 2px 2px 8px #0f0f0f; -moz-box-shadow: 2px 2px 8px #0f0f0f; -webkit-box-shadow: 2px 2px 8px #0f0f0f; box-shadow: 2px 2px 8px #0f0f0f; -moz-border-radius: 2px; -webkit-border-radius: 2px; -o-border-radius: 2px; border-radius: 2px">:-)</div>
</blockquote>

<p>The rotation was achieved by a bit of CSS3 code like so:</p>

<pre><code>transform: rotate(45deg);
</code></pre>

<p>Since the CSS3 2D transform spec is a <a href="http://www.w3.org/Style/CSS/specs#transform2d">working draft standard</a> at the time of this writing, all browsers currently provide support for this only through vendor prefixed CSS3 attributes. So to make this work today you'd have to actually write all of the following:</p>

<pre><code>-o-transform: rotate(45deg);
-moz-transform: rotate(45deg);
-webkit-transform: rotate(45deg);
-ms-transform: rotate(45deg);
transform: rotate(45deg);
</code></pre>

<p>The vendor prefixes given above are for Opera, Firefox (Mozilla), WebKit based browsers (Chrome and Safari) and IE - in that order. Note that I have supplied the standard name for the attribute - "<code>transform</code>" - last in the list. This has been deliberately done so that when these browsers do start supporting the standard name for the attribute, that behavior (i.e., the standard behavior) will take precedence over the vendor prefixed versions by virtue of it showing up last in the rule.</p>

<p>Apart from rotation, the spec also supports the specification of translation, scaling and skew transforms. Multiple transforms can be applied to a single element at the same time by separating each transform by a space. Here's another <code>div</code> that has been rotated about its center by 45 degrees and skewed along the X axis by 15 degrees.</p>

<blockquote>
  <div style="text-align: center; font-style: normal; font-size: 23px; line-height: 60px; background-color: black; margin-top: 30px; width: 60px; font-family: cambria, cochin, georgia, times, serif; margin-bottom: 30px; height: 60px; color: white; font-weight: bold; -o-transform: rotate(45deg) skewx(15deg); -moz-transform: rotate(45deg) skewx(15deg); -webkit-transform: rotate(45deg) skewx(15deg); -ms-transform: rotate(45deg) skewx(15deg); transform: rotate(45deg) skewx(15deg); -o-box-shadow: 2px 2px 8px #0f0f0f; -moz-box-shadow: 2px 2px 8px #0f0f0f; -webkit-box-shadow: 2px 2px 8px #0f0f0f; box-shadow: 2px 2px 8px #0f0f0f; -moz-border-radius: 2px; -webkit-border-radius: 2px; -o-border-radius: 2px; border-radius: 2px">:-)</div>
</blockquote>

<p>And here're the CSS3 rules that produced this output:</p>

<pre><code>-o-transform: rotate(45deg) skewX(15deg);
-moz-transform: rotate(45deg) skewX(15deg);
-webkit-transform: rotate(45deg) skewX(15deg);
-ms-transform: rotate(45deg) skewX(15deg);
transform: rotate(45deg) skewX(15deg);
</code></pre>

<h3 id="readingtransformdatabackfromtheelement">Reading transform data back from the element</h3>

<p>Now that we have the basic transform applied, let's see what we get back if we query the transform via jQuery. We use jQuery's <a href="http://api.jquery.com/css/"><code>css</code></a> function to retrieve the value. On IE9 for instance here's the code you'd use to get the transform:</p>

<pre><code>var transform = $("div").css("msTransform");
</code></pre>

<p>And here's the value IE9 returns for the second <code>div</code>above (the one which has both a rotate and a skew applied):</p>

<pre><code>matrix(0.707107, 0.707107, -0.517638, 0.896575, 0, 0)
</code></pre>

<p>As you can tell, that doesn't look anything like the way we specified the transform. It turns out that the browser is free to convert our transform specification into a matrix representation and discard the original string given in the style sheet. As you might expect we can also specify the transform in this format, should we choose to do so, instead of using the the syntax we used earlier. While we are reviewing matrices, it might be useful to consider the following matrix - known as the <em>identity matrix</em>. This is a transform matrix applying which produces basically no change in the source matrix - similar to the effect that multiplying a number by one produces on it.</p>

<pre><code>matrix(1, 0, 0, 1, 0, 0)
</code></pre>

<p>Since we'll need to work with these numbers individually, it might be useful to write a helper routine that can parse a string in this form and produce an array of 6 numbers.</p>

<pre><code>(function ($) {
    //
    // regular expression for parsing out the matrix
    // components from the matrix string
    //
    var matrixRE = /\([0-9epx\.\, \t\-]+/gi;

    //
    // parses a matrix string of the form
    // "matrix(n1,n2,n3,n4,n5,n6)" and
    // returns an array with the matrix
    // components
    //
    var parseMatrix = function (val) {
        return val.match(matrixRE)[0].substr(1).
                  split(",").map(function (s) {
            return parseFloat(s);
        });
    }
})(jQuery);
</code></pre>

<p>We basically use a regular expression to extract the relevant portion and convert it into an array of numbers. You'll note that I've used the self-calling anonymous function technique above. This was done to prevent polluting the global namespace with variables such as <code>matrixRE</code>.</p>

<p>Another factor to consider while reading transform matrix values back from the DOM is the fact that browsers today implement CSS3 2D transforms through vendor prefixes. This means that code such as the following, where we use the standard name for the CSS attribute, simply won't work!</p>

<pre><code>var transform = $("div").css("transform");
</code></pre>

<p>We're going to have to use the appropriate vendor prefix while setting and retrieving transform matrices from script. As this can quickly get quite cumbersome to do, it makes sense to wrap this activity up in a couple of utility routines. Here goes:</p>

<pre><code>(function ($) {
    //
    // transform css property names with vendor prefixes; the plugin
    // will check for values in the order the names are listed here and
    // return as soon as there is a value; so listing the W3 std name
    // for the transform results in that being used if its available
    //
    var transformPropNames = [
        "transform",
        "msTransform",
        "-webkit-transform",
        "-moz-transform",
        "-o-transform"
    ];

    var getTransformMatrix = function (el) {
        //
        // iterate through the css3 identifiers till we
        // hit one that yields a value
        //
        var matrix = null;
        transformPropNames.some(function (prop) {
            matrix = el.css(prop);
            return (matrix !== null &amp;&amp; matrix !== "");
        });

        //
        // if "none" then we supplant it with an identity matrix so
        // that our parsing code below doesn't break
        //
        matrix = (!matrix || matrix === "none") ?
                      "matrix(1,0,0,1,0,0)" : matrix;
        return parseMatrix(matrix);
    };

    //
    // set the given matrix transform on the element; note that we
    // apply the css transforms in reverse order of how its given
    // in "transformPropName" to ensure that the std compliant prop
    // name shows up last
    //
    var setTransformMatrix = function (el, matrix) {
        var m = "matrix(" + matrix.join(",") + ")";
        for (var i = transformPropNames.length - 1; i &gt;= 0; --i) {
            el.css(transformPropNames[i], m);
        }
    };
})(jQuery);
</code></pre>

<p>With these functions handy, we can set and retrieve transforms like so and it should work well on all modern browsers:</p>

<pre><code>setTransformMatrix($("div"),
   [0.707107, 0.707107, -0.517638, 0.896575, 0, 0]);
var matrix = getTransformMatrix($("div"));
</code></pre>

<h3 id="thejqueryplugin">The jQuery plugin</h3>

<p>The jQuery plugin uses jQuery's animation function to take advantage of its "easing" system. The animation is driven by having jQuery animate a phantom property called "percentAnim" from 0 through 100 on the element(s) in question and uses the "step" callback function to guide the actual animation of the transform matrix. Here's the source of the jQuery plugin (assuming the functions defined above are available):</p>

<pre><code>(function ($) {
    //
    // interpolates a value between a range given a percent
    //
    var interpolate = function (from, to, percent) {
        return from + ((to - from) * (percent / 100));
    }

    $.fn.transformAnimate = function (opt) {
        //
        // extend the options passed in by caller
        //
        var options = {
            transform: "matrix(1,0,0,1,0,0)"
        };
        $.extend(options, opt);

        //
        // initialize our custom property on the element
        // to track animation progress
        //
        this.css("percentAnim", 0);

        //
        // supplant "options.step" if it exists with our own
        // routine
        //
        var sourceTransform = getTransformMatrix(this);
        var targetTransform = parseMatrix(options.transform);
        options.step = function (percentAnim, fx) {
            //
            // compute the interpolated transform matrix for
            // the current animation progress
            //
            var $this = $(this);
            var matrix = sourceTransform.map(function (c, i) {
                return interpolate(c, targetTransform[i], percentAnim);
            });

            //
            // apply the new matrix
            //
            setTransformMatrix($this, matrix);

            //
            // invoke caller's version of "step" if one was supplied;
            //
            if (opt.step) {
                opt.step.apply(this, [matrix, fx]);
            }
        };

        //
        // animate!
        //
        return this.animate({ percentAnim: 100 }, options);
    };
})(jQuery);
</code></pre>

<p>There isn't a whole lot going on there. The "step" function is called by jQuery every time a frame update is needed. It passes the current value of the property jQuery is animating over the given duration as an argument to the "step" function. In our case this will be a number that ranges between 0 and 100 and we take it as an indication of how far we are into the animation and use it to appropriately interpolate the values in the transform matrix. Here's an example of how we might use this function to translate and rotate an element over 1 second:</p>

<pre><code>var box = $("#box");
box.transformAnimate({
    transform: "matrix(-0.707107, 0.707107, " +
                 "-0.707107, -0.707107, 150, 0)",
    duration: 1000
});
</code></pre>

<p>If you're wondering how I got those numbers in the matrix, well, I used the JavaScript console that ships as a part of IE9's debugging tools (just hit F12 if you're running IE) and then manually applied the said transform and then retrieved the resulting matrix via jQuery! Not exactly rocket science, I know!</p>

<p>The jQuery plugin has been used to trigger an animation on the box shown below when you click on it. It uses the animation plugin defined above to translate the box 150 pixels along the X axis and also rotate it 135 degrees around the center in a clock-wise direction over 1 second and then does the reverse. Go ahead, give it a shot - try clicking the smiley!</p>

<script src="http://ajax.aspnetcdn.com/ajax/modernizr/modernizr-2.7.2.js"></script>

<script>  
var sprintfWrapper = {  
    init: function () {

        if (typeof arguments == "undefined") { return null; }
        if (arguments.length < 1) { return null; }
        if (typeof arguments[0] != "string") { return null; }
        if (typeof RegExp == "undefined") { return null; }

        var string = arguments[0];
        var exp = new RegExp(/(%([%]|(\-)?(\+|\x20)?(0)?(\d+)?(\.(\d)?)?([bcdfosxX])))/g);
        var matches = new Array();
        var strings = new Array();
        var convCount = 0;
        var stringPosStart = 0;
        var stringPosEnd = 0;
        var matchPosEnd = 0;
        var newString = '';
        var match = null;

        while (match = exp.exec(string)) {
            if (match[9]) { convCount += 1; }

            stringPosStart = matchPosEnd;
            stringPosEnd = exp.lastIndex - match[0].length;
            strings[strings.length] = string.substring(stringPosStart, stringPosEnd);

            matchPosEnd = exp.lastIndex;
            matches[matches.length] = {
                match: match[0],
                left: match[3] ? true : false,
                sign: match[4] || '',
                pad: match[5] || ' ',
                min: match[6] || 0,
                precision: match[8],
                code: match[9] || '%',
                negative: parseInt(arguments[convCount]) < 0 ? true : false,
                argument: String(arguments[convCount])
            };
        }
        strings[strings.length] = string.substring(matchPosEnd);

        if (matches.length == 0) { return string; }
        if ((arguments.length - 1) < convCount) { return null; }

        var code = null;
        var match = null;
        var i = null;

        for (i = 0; i < matches.length; i++) {

            if (matches[i].code == '%') { substitution = '%' }
            else if (matches[i].code == 'b') {
                matches[i].argument = String(Math.abs(parseInt(matches[i].argument)).toString(2));
                substitution = sprintfWrapper.convert(matches[i], true);
            }
            else if (matches[i].code == 'c') {
                matches[i].argument = String(String.fromCharCode(parseInt(Math.abs(parseInt(matches[i].argument)))));
                substitution = sprintfWrapper.convert(matches[i], true);
            }
            else if (matches[i].code == 'd') {
                matches[i].argument = String(Math.abs(parseInt(matches[i].argument)));
                substitution = sprintfWrapper.convert(matches[i]);
            }
            else if (matches[i].code == 'f') {
                matches[i].argument = String(Math.abs(parseFloat(matches[i].argument)).toFixed(matches[i].precision ? matches[i].precision : 6));
                substitution = sprintfWrapper.convert(matches[i]);
            }
            else if (matches[i].code == 'o') {
                matches[i].argument = String(Math.abs(parseInt(matches[i].argument)).toString(8));
                substitution = sprintfWrapper.convert(matches[i]);
            }
            else if (matches[i].code == 's') {
                matches[i].argument = matches[i].argument.substring(0, matches[i].precision ? matches[i].precision : matches[i].argument.length)
                substitution = sprintfWrapper.convert(matches[i], true);
            }
            else if (matches[i].code == 'x') {
                matches[i].argument = String(Math.abs(parseInt(matches[i].argument)).toString(16));
                substitution = sprintfWrapper.convert(matches[i]);
            }
            else if (matches[i].code == 'X') {
                matches[i].argument = String(Math.abs(parseInt(matches[i].argument)).toString(16));
                substitution = sprintfWrapper.convert(matches[i]).toUpperCase();
            }
            else {
                substitution = matches[i].match;
            }

            newString += strings[i];
            newString += substitution;

        }
        newString += strings[i];

        return newString;

    },

    convert: function (match, nosign) {
        if (nosign) {
            match.sign = '';
        } else {
            match.sign = match.negative ? '-' : match.sign;
        }
        var l = match.min - match.argument.length + 1 - match.sign.length;
        var pad = new Array(l < 0 ? 0 : l).join(match.pad);
        if (!match.left) {
            if (match.pad == "0" || nosign) {
                return match.sign + pad + match.argument;
            } else {
                return pad + match.sign + match.argument;
            }
        } else {
            if (match.pad == "0" || nosign) {
                return match.sign + match.argument + pad.replace(/0/g, ' ');
            } else {
                return match.sign + match.argument + pad;
            }
        }
    }
}
sprintf = sprintfWrapper.init;  
</script>

<script>  
function waitForDocumentReady(callback) {  
    var id = setInterval(function() {
        if(document.readyState !== "complete") {
            return;
        }

        clearInterval(id);
        callback(jQuery);
    }, 500);
}
</script>

<script>  
waitForDocumentReady(function(jQuery) {  
        (function ($) {
            //
            // regular expression for parsing out the matrix
            // components from the matrix string
            //
            var matrixRE = /\([0-9epx\.\, \t\-]+/gi;

            //
            // parses a matrix string of the form "matrix(n1,n2,n3,n4,n5,n6)" and
            // returns an array with the matrix components
            //
            var parseMatrix = function (val) {
                return val.match(matrixRE)[0].substr(1).split(",").map(function (s) {
                    return parseFloat(s);
                });
            }

            //
            // transform css property names with vendor prefixes; the plugin
            // will check for values in the order the names are listed here and
            // return as soon as there is a value; so listing the W3 std name for
            // the transform results in that being used if its available
            //
            var transformPropNames = [
            "transform",
            "msTransform",
            "-webkit-transform",
            "-moz-transform",
            "-o-transform"
        ];

            var getTransformMatrix = function (el) {
                //
                // iterate through the css3 identifiers till we
                // hit one that yields a value
                //
                var matrix = null;
                transformPropNames.some(function (prop) {
                    matrix = el.css(prop);
                    return (matrix !== null && matrix !== "");
                });

                //
                // if "none" then we supplant it with an identity matrix so that
                // our parsing code below doesn't break
                //
                var identity = (Modernizr.prefixed("transform") === "MozTransform") ? "matrix(1,0,0,1,0px,0px)" : "matrix(1,0,0,1,0,0)";
                matrix = (!matrix || matrix === "none") ? identity : matrix;

                return parseMatrix(matrix);
            };

            //
            // set the given matrix transform on the element; note that we apply the
            // css transforms in reverse order of how its given in "transformPropName"
            // to ensure that the std compliant prop name shows up last
            //
            var setTransformMatrix = function (el, matrix) {
                if (Modernizr.prefixed("transform") === "MozTransform") {
                    matrix[4] = sprintf("%dpx", matrix[4]);
                    matrix[5] = sprintf("%dpx", matrix[5]);
                }

                var m = "matrix(" + matrix.join(",") + ")";
                for (var i = transformPropNames.length - 1; i >= 0; --i) {
                    el.css(transformPropNames[i], m);
                }
            };

            //
            // interpolates a value between a range given a percent
            //
            var interpolate = function (from, to, percent) {
                return from + ((to - from) * (percent / 100));
            }

            $.fn.transformAnimate = function (opt) {
                //
                // extend the options passed in by caller
                //
                var options = {
                    transform: "matrix(1,0,0,1,0,0)"
                };
                $.extend(options, opt);

                //
                // initialize our custom property on the element
                // to track animation progress
                //
                this.css("percentAnim", 0);

                //
                // supplant "options.step" if it exists with our own
                // routine
                //
                var sourceTransform = getTransformMatrix(this);
                var targetTransform = parseMatrix(options.transform);
                options.step = function (percentAnim, fx) {
                    //
                    // compute the interpolated transform matrix for
                    // the current animation progress
                    //
                    var $this = $(this);
                    var matrix = sourceTransform.map(function (c, i) {
                        return interpolate(c, targetTransform[i], percentAnim);
                    });

                    //
                    // apply the new matrix
                    //
                    setTransformMatrix($this, matrix);

                    //
                    // invoke caller's version of "step" if one was supplied;
                    //
                    if (opt.step) {
                        opt.step.apply(this, [matrix, fx]);
                    }
                };

                //
                // animate!
                //
                return this.animate({ percentAnim: 100 }, options);
            };
        })(jQuery);

        (function () {
            var box1 = $("#box1")
            box1.css("cursor", "pointer");
            box1.click(function () {
                box1.transformAnimate({
                    transform: "matrix(-0.707107, 0.707107, -0.707107, -0.707107, 150, 0)",
                    duration: 1000,
                    complete: function () {
                        box1.transformAnimate({
                            transform: "matrix(1, 0, 0, 1, 0, 0)",
                            duration: 1000
                        });
                    }
                });
            });
        })();
});
</script>

<blockquote>
  <div style="text-align: center; line-height: 60px; font-style: normal; 60px; margin-top: 20px; width: 60px; font-family: cambria, cochin, georgia, times, serif; margin-bottom: 20px; height: 60px; color: white; font-size: 23px; font-weight: bold; -webkit-box-shadow: rgb(15, 15, 15) 2px 2px 8px; box-shadow: rgb(15, 15, 15) 2px 2px 8px; border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; cursor: pointer; -webkit-transform: matrix(1, 0, 0, 1, 0, 0); background-color: black;" id="box1">:-)</div>
</blockquote>

<h3 id="greatnowmakeitrotatealltheway5times">Great, now make it rotate all the way 5 times!</h3>

<p>At one point I needed to make a certain element rotate about 5 times around the center over a few seconds. So I figured I'll just use my plugin to get it done. Turns out it isn't quite as simple as that! The problem you see is that the plugin works purely by interpolating the values of the transform matrix from the source to the target matrix over the given duration. Interpolation does not imply that things will progress in a linear fashion. For example, imagine that I wish to rotate an element from 0 degrees through 270 degrees. One can achieve this by incrementing the rotation angle from 0 to 270. However, when represented as a transform matrix it turns out that we can just as easily achieve this by rotating counter-clockwise from 0 degrees to -90 degrees! Not quite what we want! To make this kind of mindless animation work I had to put together a mini-animation framework (if you can call it that) myself.</p>

<p>First, I copied the <code>setTransformMatrix</code> function from the transform jQuery plugin:</p>

<pre><code>var Utils = {
    //
    // utility for applying transform matrix
    //
    applyTransform: (function () {
        var transformPropNames = [
            "transform",
            "msTransform",
            "-webkit-transform",
            "-moz-transform",
            "-o-transform"
        ];

        return function (el, transform) {
            for (var i = transformPropNames.length - 1; i &gt;= 0; --i) {
                el.css(transformPropNames[i], transform);
            }
        };
    })()
};
</code></pre>

<p>And then implemented a simple animate routine whose job is to simply invoke a callback function at a predefined interval for a specified duration.</p>

<pre><code>var Utils = {
    //
    // simple custom animation
    //
    animate: (function () {
        var ANIMATION_INTERVAL = 17;

        return function (duration, frame, done) {
            var start = Date.now();

            //
            // our animation routine
            //
            var anim = function () {
                //
                // compute animation progress
                //
                var elapsed = (Date.now() - start);
                var percent = elapsed / duration;

                //
                // invoke callback
                //
                frame(percent);

                //
                // schedule next frame update if need be
                //
                if (elapsed &lt; duration) {
                    window.setTimeout(anim, ANIMATION_INTERVAL);
                } else {
                    done();
                }
            };

            //
            // schedule first frame update
            //
            window.setTimeout(anim, ANIMATION_INTERVAL);
        };
    })()
};
</code></pre>

<p>Finally, I put together a routine to animate the transform by animating the transform options individually, i.e., you can for instance, translate along Y axis from 10 pixels to 200 pixels and skew along X axis from 20 degrees to 0 degrees and so forth. Here's the function definition:</p>

<pre><code>var Utils = {
    //
    // wrapper for animating transforms; "opt" might look like this:
    //  opt: {
    //      scale: {
    //          from: 0.01, to: 1.0
    //      },
    //      rotate: {
    //          from: 0.0, to: 360.0 * 2.0
    //      },
    //      translateX: {
    //          from: 10, to: 300
    //      }
    //  }
    //
    transformAnimate: (function () {
        var suffix = {
            scale: "",
            scaleX: "",
            scaleY: "",
            rotate: "deg",
            translate: "px",
            translateX: "px",
            translateY: "px",
            skew: "deg",
            skewX: "deg",
            skewY: "deg"
        };

        return function (duration, el, opt, done) {
            Utils.animate(duration, function (percent) {
                var transform = "";
                for (var p in opt) {
                    var val = opt[p].from +
                        ((opt[p].to - opt[p].from) * percent);
                    transform += sprintf("%s(%f%s) ",
                                   p, val, suffix[p]);
                }
                Utils.applyTransform(el, transform);
            }, done);
        };
    })()
};
</code></pre>

<p>If I wanted to implement the same animation I did earlier, i.e. translate the box 150 pixels along the X axis and also rotate it 135 degrees around the center in a clock-wise direction over 1 second using this new framework, then I'd do something like this:</p>

<pre><code>Utils.transformAnimate(1000, $("#box1"), {
        translateX: { from: 0.0, to: 150.0 },
        rotate: { from: 0.0, to: 135.0 }
}, function() {});
</code></pre>

<p>Here's another box for you that you can click to make it rotate and translate a bit.</p>

<blockquote>
  <div style="text-align: center; line-height: 60px; font-style: normal; margin-top: 20px; width: 60px; font-family: cambria, cochin, georgia, times, serif; margin-bottom: 20px; height: 60px; color: white; font-size: 23px; font-weight: bold; -webkit-box-shadow: rgb(15, 15, 15) 2px 2px 8px; box-shadow: rgb(15, 15, 15) 2px 2px 8px; border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; cursor: pointer; -webkit-transform: matrix(1, 0, 0, 1, 0, 0); background-color: black;" id="box2">:-)</div>
</blockquote>

<script type="text/javascript">  
waitForDocumentReady(function() {  
    var Utils = {
        //
        // utility for applying transform matrix
        //
        applyTransform: (function () {
            //
            // transform css property names with vendor prefixes; the plugin
            // will check for values in the order the names are listed here and
            // return as soon as there is a value; so listing the W3 std name for
            // the transform results in that being used if its available
            //
            var transformPropNames = [
            "transform",
            "msTransform",
            "-webkit-transform",
            "-moz-transform",
            "-o-transform"
        ];

            return function (el, transform) {
                for (var i = transformPropNames.length - 1; i >= 0; --i) {
                    el.css(transformPropNames[i], transform);
                }
            };
        } ()),

        //
        // simple custom animation
        //
        animate: (function () {
            var ANIMATION_INTERVAL = 17;

            return function (duration, frame, done) {
                var start = Date.now();

                //
                // our animation routine
                //
                var anim = function () {
                    //
                    // compute animation progress
                    //
                    var elapsed = (Date.now() - start);
                    var percent = elapsed / duration;

                    //
                    // invoke callback
                    //
                    frame(percent);

                    //
                    // schedule next frame update if need be
                    //
                    if (elapsed < duration) {
                        window.setTimeout(anim, ANIMATION_INTERVAL);
                    } else {
                        done();
                    }
                };

                //
                // schedule first frame update
                //
                window.setTimeout(anim, ANIMATION_INTERVAL);
            };
        } ()),

        //
        // wrapper for animating transforms; "opt" might look like this:
        //  opt: {
        //      scale: {
        //          from: 0.01, to: 1.0
        //      },
        //      rotate: {
        //          from: 0.0, to: 360.0 * 2.0
        //      },
        //      translateX: {
        //          from: 10, to: 300
        //      }
        //  }
        //
        transformAnimate: (function () {
            var suffix = {
                scale: "",
                scaleX: "",
                scaleY: "",
                rotate: "deg",
                translate: "px",
                translateX: "px",
                translateY: "px",
                skew: "deg",
                skewX: "deg",
                skewY: "deg"
            };

            return function (duration, el, opt, done) {
                Utils.animate(duration, function (percent) {
                    var transform = "";
                    for (var p in opt) {
                        var val = opt[p].from + ((opt[p].to - opt[p].from) * percent);
                        transform += sprintf("%s(%f%s) ", p, val, suffix[p]);
                    }
                    Utils.applyTransform(el, transform);
                }, done);
            };
        } ())
    };

    (function () {
        var box = $("#box2")
        box.css("cursor", "pointer");
        box.click(function () {
            Utils.transformAnimate(1000, box, {
                translateX: { from: 0.0, to: 150.0 },
                rotate: { from: 0.0, to: 360.0 * 3 }
            }, function () {
                Utils.transformAnimate(1000, box, {
                    translateX: { from: 150.0, to: 0.0 },
                    rotate: { from: 360.0 * 3, to: 0.0 }
                }, function () {
                    Utils.applyTransform(box, "matrix(1,0,0,1,0,0)");
                });
            });
        });
    })();
});
</script>

<p>Pretty cool don't you think?</p>]]>
      </content:encoded>
      <wp:comment>
        <wp:comment_id>204</wp:comment_id>
        <wp:comment_author>Jose Rui Santos</wp:comment_author>
        <wp:comment_author_email>ruisoftware@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2013-01-03 12:04:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Great work! However, you really don&#39;t need to use a phantom property &quot;percentAnim&quot;. jQuery animate() animates any scalar data, not restricted to CSS properties. This means, you can animate any json variables directly, which is more elegant than using phantom CSS properties. See http://stackoverflow.com/a/9324325/607874]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>205</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2013-01-04 01:40:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks Jose Rui Santos. Your suggestion makes sense. That is indeed much better than animating a phantom CSS property.]]>
        </wp:comment_content>
      </wp:comment>
    </item>
    <item>
      <title>System API call hooking</title>
      <link>http://ghost-nerd.azurewebsites.net/systemapicallhooking</link>
      <dsq:thread_identifier>50</dsq:thread_identifier>
      <wp:post_date_gmt>2006-08-24 08:08:49</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>I have for sometime been meaning to investigate into how exactly one set about hooking system API calls, i.e., be able to intercept/instrument calls to Win32 APIs made by any given process on the system. Surprisingly, there are quite a few good, informed articles on the subject. Here're some links to a few of them:</p>

<blockquote>
  <p><a href="http://www.codeproject.com/system/hooksys.asp">API hooking revealed</a> <br />
  A good article that covers all the options available to achieve this.</p>
  
  <p><a href="http://www.codeproject.com/system/api_spying_hack.asp">Process-wide API spying - an ultimate hack</a> <br />
  Describes Import Address Table (IAT) patching in fair detail.</p>
  
  <p><a href="http://www.codeproject.com/threads/winspy.asp">Three Ways to Inject Your Code into Another Process</a> <br />
  Another API spying DLL injection article.</p>
  
  <p><a href="http://www.ddj.com/showArticle.jhtml;jsessionid=BX0BHRAY3GW4MQSNDLRCKHSCJUNN2JVN?articleID=184410109">Windows NT System-Call Hooking</a> <br />
  A great article from Mark Russinovich and Bryce Cogswell of <a href="http://www.sysinternals.com">Sysinternals</a> fame detailing interception of system calls by patching system call dispatch tables from the kernel mode.</p>
  
  <p><a href="http://www.ddj.com/showArticle.jhtml;jsessionid=BX0BHRAY3GW4MQSNDLRCKHSCJUNN2JVN?articleID=184416246">Tracing NT Kernel-Mode Calls</a> <br />
  Talks about intercepting kernel mode APIs such as <code>IoAllocateIrp</code> and <code>IoCallDriver</code>.</p>
  
  <p>My primary interest was in being able to intercept calls to APIs like <code>CopyFile</code>, <code>MoveFile</code> and <code>DeleteFile</code>. Having recently developed an interest in kernel mode programming I initially figured that I'll write this as some sort of kernel mode filter driver and roll a super-cool interception system. But I came to realise in the end that this was not going to be possible without writing some fairly intricate and basically shaky code. As the articles I've given links to above indicate, it is quite possible to do this with a lot less fuss from user mode itself.</p>
</blockquote>

<p>To avoid duplicating information already available in these articles I'll just briefly describe the approach I took:</p>

<ul>
<li>I created a DLL that would hook routines that I am interested in from <code>DllMain</code>.</li>
<li>I would then inject this DLL into the process that I am interested in using the <code>CreateRemoteThread</code> technique.</li>
<li>The injected DLL would call back to the EXE whenever the relevant APIs were called by sending <code>WM_COPY_DATA</code> messages.</li>
</ul>

<p>That's all! One thing that I did not do however is implementing the fancy IAT patching code myself. I used the <a href="http://research.microsoft.com/sn/detours/">Microsoft Research Detours</a> library for doing this which does it in a very clean structured fashion. And finally, the whole thing will work only on systems running Windows 2000 and later (who uses Windows 95, 98 and ME anyway!).</p>

<p>Here's a screen shot of what the UI for this program that I wrote looks like:</p>

<p><img src="http://blogorama.nerdworks.in/images/iospy.png" alt="IOSpy screenshot" /></p>

<p>And here're the binaries and the source code should you feel like taking a look. Please note that I haven't included the <a href="http://research.microsoft.com/sn/detours/"><em>Detours</em></a> library here. You'll have to download it from the link given here yourself (it's only 519 KB in size) and set your build environment up so that the compiler and the linker can find the "detours.h", "detours.lib" and the "detoured.lib" files.</p>

<ul>
<li><a href="http://blogorama.nerdworks.in/downloads/IOSpy.zip">Download source code</a></li>
<li><a href="http://blogorama.nerdworks.in/downloads/IOSpyBin.zip">Download binaries</a></li>
</ul>]]>
      </content:encoded>
      <wp:comment>
        <wp:comment_id>230</wp:comment_id>
        <wp:comment_author>saad</wp:comment_author>
        <wp:comment_author_email></wp:comment_author_email>
        <wp:comment_date_gmt>2014-04-10 06:28:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[thank you]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>231</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2014-04-10 08:13:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks for coming by saad!]]>
        </wp:comment_content>
      </wp:comment>
    </item>
    <item>
      <title>Learning Common Lisp</title>
      <link>http://ghost-nerd.azurewebsites.net/learninglisp</link>
      <dsq:thread_identifier>51</dsq:thread_identifier>
      <wp:post_date_gmt>2009-06-18 09:08:15</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>As is frequently the case with such things (at least with me) I have decided, for no compelling reason whatsoever, that I will learn to program in the <a href="http://en.wikipedia.org/wiki/Common_Lisp">Common Lisp</a> programming language. It might perhaps have something to do with the fact that I stumbled upon the following impassioned pleas for that language and the functional style of programming, all of which are in my opinion well worth your while should you choose to spend the next hour or so of your life reading them, even if you have no plans of learning Lisp:</p>

<ul>
<li><p><a href="http://www.defmacro.org/ramblings/fp.html">Functional Programming For The Rest of Us</a> -
an introduction to functional programming designed to appeal to us <a href="http://en.wikipedia.org/wiki/Imperative_programming">imperative</a> grunt programmers.  </p></li>
<li><p><a href="http://www.defmacro.org/ramblings/lisp.html">The Nature of Lisp</a> -
an admirable attempt at showing to the Lisp noob what its all really about.  </p></li>
<li><p><a href="http://www.paulgraham.com/avg.html">Beating The Averages</a> -
if you thought Lisp was only for "intellectual" academicians, then you've got to hear from this <a href="http://en.wikipedia.org/wiki/Paul_Graham">guy</a> who made, like 50 million bucks by selling a piece of software to Yahoo - and guess what he wrote it in?  </p></li>
<li><p><a href="http://www.paulgraham.com/iflisp.html">If Lisp is So Great</a> - 
tries to answer this question: <em>if Lisp is so great, why don't more people use it?</em></p></li>
</ul>

<p>This being my blog and everything, I plan to use it to post what I hope will be a series of entries chronicling my experiments with Common Lisp. There is frequent reference in popular Lisp literature to this so called moment of enlightenment that you apparently experience at some point as you work your way through the language. If this occurs with me, well, you'll know about it!</p>

<p>Here's what I am using to learn the thing:</p>

<ul>
<li><a href="http://gigamonkeys.com/book/">Practical Common Lisp</a> by Peter Seibel - a great free book that teaches you ANSI Common Lisp</li>
<li><a href="http://clisp.cons.org/">CLISP</a> - a free open source implementation of the ANSI Common Lisp language (running on <a href="http://www.cygwin.com/">Cygwin</a> on Windows boxes - just remember to select the "clisp" package when you install Cygwin)</li>
</ul>

<p>Here's what this dude called <a href="http://en.wikipedia.org/wiki/Eric_S._Raymond">Eric Raymond</a> had to say about Lisp:</p>

<blockquote>
  <p><em>Lisp is worth learning for the profound enlightenment experience you will have when you finally get it; that experience will make you a better programmer for the rest of your days...</em></p>
</blockquote>

<p>I intend to personally find out if there's any truth to this or if Eric was just high when he wrote it (OK, so I do have a reason for learning Common Lisp - I never said I'll never contradict myself you know).</p>]]>
      </content:encoded>
    </item>
    <item>
      <title>Using closures as backing fields for ECMAScript5 properties</title>
      <link>http://ghost-nerd.azurewebsites.net/usingclosuresasbackingfieldsfo</link>
      <dsq:thread_identifier>52</dsq:thread_identifier>
      <wp:post_date_gmt>2011-06-12 05:58:08</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>One of the things that <a href="http://en.wikipedia.org/wiki/ECMAScript">ECMAScript</a> version 5 brings to the JavaScript world is the ability to define "getter" and "setter" properties, i.e., the ability to define object members that look like regular fields to clients but are really member methods. The best way to understand this is with an example. Here goes:</p>

<pre><code>var person = Object.create({}, {
    name: {
        get: function() {
            print("name.get");
            return "foo";
        },
        set: function(v) {
            print("name.set - " + v);
        },
        enumerable: true,
        configurable: false
    }
});

person.name = "boo";  // calls the "set" function above
print(person.name);   // calls the "get" function above
</code></pre>

<p>We've defined an object called "person" above with one property called "name". We've defined "get" and "set" functions which will cause the JavaScript runtime to call the respective methods whenever an attempt is made to access the property or set a value for it. This works exactly the same way as how properties work in C#. If you run the snippet given above here's the output we get:</p>

<pre><code>name.set - boo
name.get
foo
</code></pre>

<p>You'll note that I really haven't actually saved the value being passed as a parameter to the "set" function of the "name" property above. In a real program you'd typically want to save this in a backing field of some sort. Now, the question is, where do we save this? One approach could be to do something like the following:</p>

<pre><code>var person = Object.create({}, {
    nameVal: {
        value: null,
        enumerable: false,
        writable: true,
        configurable: false
    },

    name: {
        get: function() {
            return this.nameVal;
        },
        set: function(v) {
            this.nameVal = v;
        },
        enumerable: true,
        configurable: false
    }
});

person.name = "boo";
print(person.name);
</code></pre>

<p>While this works, it does however defeat the purpose of defining separate getter and setter methods since the client of this object is anyway able to directly write to "nameVal". We need a mechanism of somehow hiding the backing field so that it is accessible only from the getter/setter methods and not through an object instance.</p>

<p>Enter closures! It turns out that the descriptors for a property can actually be defined dynamically at runtime. It can be for instance, be returned from a function. We should be able to leverage this to define a self-calling function that results in the creation of a separate execution scope where the backing field for the property can be stored as a part of the closure for the scope. Again, an example should make the idea clear.</p>

<pre><code>var person = Object.create({}, {
    name: (function() {
        var nv = ""; // backing store in closure

        //
        // the property descriptor is actually
        // returned from this function
        //
        return {
            get: function() {
                print("name.get");
                return nv;
            },
            set: function(v) {
                print("name.set");
                nv = v;
            },
            enumerable: true,
            configurable: false
        };
    })()
});

person.name = "foo";
print(person.name);
</code></pre>

<p>This snippet is identical to the first example except that the property descriptor for "name" is being returned from an anonymous self-calling function. The backing store for the property is stored in a variable that becomes a part of the closure for the setter and the getter methods. This achieves our goal of creating a backing field that is accessible only from the getter/setter routines.</p>

<p>The dynamism of JavaScript can get a bit unwieldy sometimes but this is one occasion where being able to dynamically generate the property descriptor ends up providing an elegant solution to the problem of creating backing stores for member properties!</p>]]>
      </content:encoded>
    </item>
    <item>
      <title>The Conman</title>
      <link>http://ghost-nerd.azurewebsites.net/theconman</link>
      <dsq:thread_identifier>53</dsq:thread_identifier>
      <wp:post_date_gmt>2009-08-01 07:45:35</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>The conman was seated at his usual vantage point, a place that afforded a clear view of the populace exiting the railway station. As he stubbed out his morning cigarette, he was sure he'd spotted his first quarry.</p>

<p>"Aren't you from Sivan Master's household?" the conman accosted him as he was crossing the subway under M--- Road across the Central railway station.</p>

<p>"Sivan who?"</p>

<p>"Err... Are you from Kerala?"</p>

<p>"Yes, Palakkad."</p>

<p>"Where in Palakkad?"</p>

<p>"It's a village, about 12 kms from the town."</p>

<p>"Ah! I am not mistaken then! Do you know postmaster Balan?"</p>

<p>"No"</p>

<p>"Well, I am his son. I knew I had seen you somewhere before! You're on your way back from home I gather?"</p>

<p>"Yes". The conman appeared to ponder this awhile.</p>

<p>"What is your ancestral name?"</p>

<p>"I am from the <em>Mele Paadam</em> house."</p>

<p>That seemed to clear the matter at once. With the widest grin he'd ever seen, the conman remarked, "Indeed! I know your family very well. You should ask your parents about Balan postmaster's son Vasu. You perhaps don't remember, but I have been to your house many times."</p>

<p>He just smiled pleasantly and continued making his way through the morning rush of work and school bound humanity.</p>

<p>"You won't believe the trip I had yesterday night!" Vasu persisted, "The train we were in was stopped by dacoits!" This halted the quarry in his tracks.</p>

<p>"Dacoits?!"</p>

<p>"Oh yes! Rumor has it that it was Veerappan! Haven't you read the papers?" he paused, "It perhaps hasn't made it to the press yet. But I am sure you'll read all about it in the evening edition! Suffice it to say that I am extremely lucky to be alive!"</p>

<p>He looked at Vasu with concern and remarked, "That's quite awful!"</p>

<p>"Yes! Yes! My wife wasn't quite so lucky though. She has been admitted to the general hospital which is where I am headed right now. Oh! I don't know what I'll do!" Vasu was visibly distraught. They were out of the subway by now.</p>

<p>"They took everything you see." Vasu continued, "We escaped only with the clothes on our back!"</p>

<p>"Tragic! Quite tragic!"</p>

<p>"Yes! Yes! Quite! And I am so new to this city. I am so glad I saw you - you're a God send!"</p>

<p>He faced Vasu and said abruptly, "Well, Vasu it was nice meeting you. Hope your wife recovers soon. Goodbye!"</p>

<p>"Yes, thank you! Goodbye then!" Vasu replied and turned away walking towards the hospital.</p>

<p>The quarry had waved an auto rickshaw and got into it before he heard the familiar voice call out to him again.</p>

<p>"I feel so embarrassed saying this to somebody I've just met, but it is a desperate situation you see. Like I said, they took everything; even the money in my wallet! May they be struck by lightning!" Vasu cursed, "I am completely broke right now. Would you be able to spare some money? I will personally return it to the <em>Mele Paadam</em> house once I get back. It will be a big help."</p>

<p>Seeing him hesitate, Vasu was quick to remark, "No, that's quite alright. I completely understand. Please forget that I ever asked. I apologize. Please give my regards to your parents." And made as if he would leave.</p>

<p>He stopped Vasu and said with feeling, "No Vasu, that's not it. It's just that... I don't have change you see. All I have is a Rs. 1000/- note. If you can spare Rs.100/- for this auto I'd happily hand it over to you. I am sure you need it more right now than I do."</p>

<p>There was an expression of genuine surprise on Vasu's face. He quickly recovered and said, "Thank you so much Sir! I was right, you truly are a God send! I do in fact happen to have this one Rs.100/- note. They forgot my secret pant pocket you see!"</p>

<p>They quickly exchanged the money and Vasu said as he handed his hundred rupee note, "I promise to return this money as soon as I get back home. I shall never forget this favor! Again, thank you Sir, may God shower His blessings upon you."</p>

<p>"Oh! That's quite alright. Please go attend to your wife now. Goodbye!"</p>

<p>As the rickshaw sped away from the station, he thought, "Now, if only the rest of the fake notes were as easily spent!"</p>

<blockquote>
  <p><strong>PS:</strong> <em>My colleague cum boss cum general pain in the wrong part of the anatomy (otherwise known as Aravind) is writing a series of really short stories over at his blog <a href="http://movinghorizons.blogdrive.com/">Moving Horizons</a> and doing a pretty good job of it - so much so that the writing bug seems to have bit me too now! This little short here is my first shot at the genre (or any genre in writing any kind of ficitonal prose actually). Feel free to critique, slobber mindlessly at its sheer blinding genius etc.</em></p>
</blockquote>]]>
      </content:encoded>
      <wp:comment>
        <wp:comment_id>85</wp:comment_id>
        <wp:comment_author>sandhya</wp:comment_author>
        <wp:comment_author_email></wp:comment_author_email>
        <wp:comment_date_gmt>2009-08-02 00:57:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[A good start.. am sure you will get better at it Ranju.. ]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>86</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email></wp:comment_author_email>
        <wp:comment_date_gmt>2009-08-02 01:03:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks Sandhya!]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>87</wp:comment_id>
        <wp:comment_author>Sandy</wp:comment_author>
        <wp:comment_author_email></wp:comment_author_email>
        <wp:comment_date_gmt>2009-08-02 01:11:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Good work Ranju... very well written.. ]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>88</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email></wp:comment_author_email>
        <wp:comment_date_gmt>2009-08-02 02:14:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Err.. Thanks Sandy.. I guess..]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>89</wp:comment_id>
        <wp:comment_author>Pradeep</wp:comment_author>
        <wp:comment_author_email>pravarrge@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2009-08-02 03:28:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Developer... Architect... Novelist (or storyteller)... What's next?? Actor/ Politician ;-)]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>90</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email></wp:comment_author_email>
        <wp:comment_date_gmt>2009-08-02 03:53:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks Pradeep! :)]]>
        </wp:comment_content>
      </wp:comment>
    </item>
    <item>
      <title>On (Im)Possibilities</title>
      <link>http://ghost-nerd.azurewebsites.net/onimpossibilities</link>
      <dsq:thread_identifier>54</dsq:thread_identifier>
      <wp:post_date_gmt>2007-01-15 04:12:19</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>There I was, boarding a train on the day lovers consider special filled with the blooming hope that large scale celebration of love in global proportions will somehow cause the very atmosphere to be so infused with the romantic spirit that it would prove to be all but impossible that I will find myself not sharing my cabin in the train with a ravishing coy charming single female. By the time the first hour had passed however it dawned upon me with unusual distinctness just how possible the impossible can actually be. For to my right sat a slumbering sardar whose stupendous snores seemed to provide additional forward momentum to the train. Opposite him sat a middle aged gentleman who seemed to have only recently discovered the joy of leering at lurid pictures of scantily clad women in seedy magazines. To my left sat a government servant with an iPod firmly lodged in his ears and completely oblivious to the strange disturbing sounds that were emanating from his person apparently in tune with some melody that only he was privy to. In their midst sat the glum author of this post who before quietly crawling up to his berth spent a solemn moment in silent wonder of what the good saint Valentine must have in truth perpetrated to produce an effect of such undiluted strangeness upon circumstances long long after a tear was shed and a sermon was said upon his grave!</p>]]>
      </content:encoded>
    </item>
    <item>
      <title>Random Lisp thoughts</title>
      <link>http://ghost-nerd.azurewebsites.net/randomlispthoughts</link>
      <dsq:thread_identifier>55</dsq:thread_identifier>
      <wp:post_date_gmt>2009-06-23 03:34:37</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>I have covered about 4 chapters from the book <a href="http://gigamonkeys.com/book/">Practical Common Lisp</a> and what I have learnt so far is quite fascinating to say the least. Here're some random observations that I happened to make about Commmon Lisp. Please note that whenever I use the term <em>Lisp</em> below I refer to the <em>Common Lisp</em> dialect of the language.</p>

<ul>
<li><p>Contrary to what one might conclude upon encountering a typical Lisp program, the basic Lisp syntax is actually quite minimalistic. It is so minimalistic in fact that I can probably explain all of Lisp syntax in about one line (OK, not <em>all</em> of it, but maybe a significant chunk of it - the point is, the basic structure of Lisp code is fairly straightforward)! Here goes:</p>

<blockquote>
  <p><em>Any Lisp code is a line of space delimited list of "things" and nested lists enclosed in parentheses.</em></p>
</blockquote>

<p>By "things", I mean pretty much everything that can go into Lisp code. Here's some lisp code:</p>

<pre><code>(believe it or not but this is some lisp code!)
</code></pre>

<p>And here's another example with nested lists:</p>

<pre><code>(lisp code (with nested lists))
</code></pre>

<p>If you tried entering this stuff at an <a href="http://en.wikipedia.org/wiki/Read-eval-print_loop">interactive</a> Lisp shell prompt however, you are bound to have been slapped with some errors and that's because even though this conforms to Lisp code structure it really doesn't mean anything. Its like trying to feed some random bit of <a href="http://en.wikipedia.org/wiki/XML">XML</a> to an <a href="http://en.wikipedia.org/wiki/Extensible_Stylesheet_Language">XSL</a> parser, or trying to pass an XSL file to the <a href="http://en.wikipedia.org/wiki/Apache_Ant">ANT</a> program. In each of these cases, though we are passing well-formed XML they don't exactly have the tags that the respective programs are looking for.</p>

<p>What we have accomplished with our definition above therefore is to specify what Lisp expressions are to look like. Imagine specifying the entire XML <a href="http://www.w3.org/TR/REC-xml/">specification</a> in one line (which of course is quite impossible because the actual spec runs to about 50 pages)! For a fully featured multi-paradigm programming language I think this is quite an incredible feat!</p>

<p>The technical Lisp term for what we have defined above is an <em>s-expression</em>. Any piece of valid Lisp code is always a valid s-expression but as you might have discovered if you tried getting a Lisp interpreter to parse the examples given above, not all valid s-expressions are valid Lisp code. And that is where the typical Lisp noob (such as yours truly) spends time learning the language. But as is perhaps self evident, the terseness of the basic syntax for Lisp code goes a long way in accelerating the learning process and all the apparently confounding parentheses actually end up being a rather natural way of doing things.</p></li>
<li><p>The basic Lisp form is so simple that I was able to whip up a little Lisp parser in JavaScript in about half an hour! Here's the complete parser:</p>

<pre><code>//
// Each node in the parse tree can be a list or a symbol.
//
var NodeType = {
    List: 0,
    Symbol: 1
};


//
// Each node is defined by its type and content which in
// turn can be another node (list) or a symbol name.
//
function Node(type, content) {
    this.type = type;
    this.content = content;
}


//
// Helper function that generates a "Node" object given
// a symbol name.
//
function symbol(sym) {
    return new Node(NodeType.Symbol, sym);
}


//
// Helper function that generates a "Node" object given
// a list object.
//
function list(lst) {
    return new Node(NodeType.List, lst);
}


//
// Helper function that trims a string for leading/trailing white space.
//
String.prototype.trim = function() {
    return this.replace(/^\s+|\s+$/g, "");
}


//
// The Lisp lexer that can tokenize a string of Lisp code.
//
function Lexer(code) {
    this.code = code;
    var current = 0;
    var delims = "( )";
    this.nextToken = function() {
        var token = null;
        //
        // skip all white-space only tokens
        //
        while (((token = internalNextToken.apply(this)) != null)
                &amp;&amp; (token.trim().length == 0));
        return token;
    }
    function internalNextToken() {
        //
        // if we have reached end of code then return null
        //
        if (current &gt;= this.code.length)
            return null;
        //
        // accumulate characters into token till one of
        // the delimiters are encountered
        //
        var token = "";
        for (; current &lt; this.code.length; ++(current)) {
            var ch = this.code.charAt(current);
            if (isDelim(ch)) {
                if (token.length == 0) {
                    token += ch;
                    ++current;
                }
                break;
            }
            token += ch;
        }
        return token;
    }
    function isDelim(ch) {
        return (delims.indexOf(ch) != -1);
    }
}


//
// The Lisp parser class that generates a parse tree composed of
// "Node" object given a lexer object.
//
function Parser(lexer) {
    this.lexer = lexer;
    this.parseList = function() {
        var token;
        var lst = [];
        while (((token = this.lexer.nextToken()) != null)
                &amp;&amp; (token != ")")) {
            switch (token) {
                case "(":
                    lst.push(this.parseList());
                    break;
                default:
                    lst.push(symbol(token));
                    break;
            }
        }
        return list(lst);
    };
    this.parse = function() {
        //
        // the first token MUST be a "("
        //
        if (this.lexer.nextToken() != "(")
            return null;
        return this.parseList();
    };
}


//
// Parse some lisp code.
//
var code = "(sum (gen-multiples (gen-series 1000) 3 5))";
var parser = new Parser(new Lexer(code));
var root = parser.parse();
</code></pre>

<p>This code simply generates an in-memory tree representation of the Lisp expression without performing any validation to check for correctness. This is akin to writing a non-validating DOM parser for XML - it simply hands you an object graph that you can programmatically traverse and do stuff with. I wrote a little HTML page to generate parse-tree visualizations given Lisp expressions of arbitrary complexity using the <a href="http://code.google.com/apis/visualization/">Google Visualization API</a> and the <a href="http://code.google.com/apis/visualization/documentation/gallery/orgchart.html">Organizational Chart</a> visualization in particular. Given the following Lisp expression for instance:</p>

<pre><code>(sum (gen-multiples (gen-series 1000) 3 5))
</code></pre>

<p>Here's the tree representation:</p>

<blockquote>
  <p><img src="http://blogorama.nerdworks.in/images/p1.png" alt="Parse tree for Lisp expression (sum (gen-multiples (gen-series 1000) 3 5))" title="" /></p>
</blockquote>

<p>And for the following slightly more complex Lisp expression:</p>

<pre><code>(sqrt (1+ (* (- (/ 28 2) 10) 2)))
</code></pre>

<p>Here's the tree representation:</p>

<blockquote>
  <p><img src="http://blogorama.nerdworks.in/images/p2.png" alt="Parse tree for Lisp expression (sqrt (1+ (* (- (/ 28 2) 10) 2)))" title="" /></p>
</blockquote>

<p>You can try building Lisp expression trees of your own at the following location:</p>

<blockquote>
  <p><a href="http://blogorama.nerdworks.in/arbit/webstuff/lisp-graph.html">Build your own Lisp expression trees</a></p>
</blockquote></li>
<li><p>Lisp s-expressions (i.e. valid Lisp form s-expressions) are of 3 types:</p>

<ol><li>Function calls</li>
<li>Macro invocations</li>
<li>Special forms</li></ol>

<p>Function calls, are, well, function calls! In keeping with the minimalistic syntax philosophy, almost everything in Lisp is a function call (except of course, <em>macros</em> and <em>special forms</em>). Take for instance, arithmetic operators. In most languages, the compiler is able to natively recognize operators such as [<code>+ - / *</code>] and assign special meanings depending on the context where they are used and for that reason must, among other things, differentiate between unary, binary and ternary operators. In Lisp however, these are all function calls!</p>

<p>The general form of a function call is like so:</p>

<pre><code>(function-name [arg1 arg2 ... argN])
</code></pre>

<p>As is perhaps obvious, a function call is expressed simply as a list where the first element is considered to be the function name and everything else its arguments. As always, the arguments can be Lisp s-expressions themselves. If you wanted to add 2 numbers for instance, here's what you'd do:</p>

<pre><code>(+ 1 2)
</code></pre>

<p>Here, <code>+</code> is the name of the function being invoked and <code>1</code> and <code>2</code> are its arguments. The function <code>+</code> can accept a variable number of arguments (like the C <code>printf</code> function), which means that in order to add 4 numbers for instance, you can simply do this:</p>

<pre><code>(+ 1 2 3 4)
</code></pre>

<p>You can build compound lists by nesting s-expressions like so:</p>

<pre><code>(+ 1 2 (+ 3 4))
</code></pre>

<p>Lisp will always evaluate the function arguments first from left to right (evaluating nested s-expressions if any) and only then invoke the function with the result of evaluating the argument forms. In the example above therefore, it will evaluate <code>1</code> and <code>2</code> first - which evaluate to themselves, i.e. <code>1</code> and <code>2</code> - followed by <code>(+ 3 4)</code> - which evaluates to <code>7</code>. The resulting 3 numbers (<code>1</code>, <code>2</code> and <code>7</code>) are then passed to <code>+</code> which evaluates the composite expression to the value <code>10</code>.</p></li>
</ul>

<p>There's a lot more that one can say about functions. I'll cover some of it in a subsequent post and also talk a bit about <em>macros</em> (which while a rather unique feature of Lisp is also at the same time quite powerful) and <em>special forms</em>.</p>]]>
      </content:encoded>
      <wp:comment>
        <wp:comment_id>106</wp:comment_id>
        <wp:comment_author>Ani</wp:comment_author>
        <wp:comment_author_email></wp:comment_author_email>
        <wp:comment_date_gmt>2010-05-25 20:26:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Hi,
This was the only page where I found a simple way to build a lisp parse tree.
Though I am not a javascript developer
I could get some ideas to develop lisp
parse tree in C.
Thanks Ranju.]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>107</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2010-05-26 03:22:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks for your comment Ani.  I am working on porting the parser to C.  I'll email it to you as soon as I am done.]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>220</wp:comment_id>
        <wp:comment_author>Burak Koray</wp:comment_author>
        <wp:comment_author_email>burakkorayk@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2013-10-08 09:40:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Have you done parser in C.I need it c++ version but.It is easy to convert to C to C++ for me :)]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>221</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2013-10-09 01:03:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks for the comment Burak. I did port the parser to C when Ani put his comment way back in 2010. I digged it up from my email and have put it up here now: http://blogorama.nerdworks.in/downloads/lispp.zip

Hope this helps!]]>
        </wp:comment_content>
      </wp:comment>
    </item>
    <item>
      <title>&quot;JavaScript Techniques&quot; session at Mahindra Satyam</title>
      <link>http://ghost-nerd.azurewebsites.net/javascripttechniquessessionatm</link>
      <dsq:thread_identifier>56</dsq:thread_identifier>
      <wp:post_date_gmt>2011-04-01 19:04:18</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>Thanks to all of you who attended the web cast today (2-May-2011) on interesting JavaScript programming techniques at Mahindra Satyam. Hope it was useful for everybody. I am trying to work out a follow up session. You will hopefully hear about it soon! For folks who wanted access to the PowerPoint file, I've to linked it below (must warn that there isn't a whole lot on the slides - I mostly just intended to use it to as a guide for myself!). If you'd like access to the "eval" console then I've linked to the post on that as well.</p>

<blockquote>
  <ul>
  <li><a href="downloads/jstech.pptx">JS Techniques PPT file</a></li>
  <li><a href="entry-JavaScriptevalconsole.aspx">JavaScript Eval Console</a></li>
  </ul>
</blockquote>]]>
      </content:encoded>
      <wp:comment>
        <wp:comment_id>128</wp:comment_id>
        <wp:comment_author>Manas Mohanty</wp:comment_author>
        <wp:comment_author_email>manas.ku.mohanty@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2011-04-08 18:42:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[  ]]>
        </wp:comment_content>
      </wp:comment>
    </item>
    <item>
      <title>Silverlight Tic-Tac-Toe</title>
      <link>http://ghost-nerd.azurewebsites.net/silverlighttictactoe</link>
      <dsq:thread_identifier>57</dsq:thread_identifier>
      <wp:post_date_gmt>2008-00-17 10:39:33</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>I got it into my head one fine day that I will try to find out what this <a href="http://silverlight.net/">Silverlight</a> thingy is all about. I read the <a href="http://silverlight.net/quickstarts/">quickstart</a> tutorials a bit, read some arbit blogs and finally decided to write up a <a href="http://en.wikipedia.org/wiki/Tic-tac-toe">tic-tac-toe</a> implementation using the alpha version of Silverlight 1.1 (or is it 2.0 now?). If you have Silverlight 1.1 <a href="http://msdn2.microsoft.com/en-us/silverlight/bb419317.aspx">installed</a> on your Windows box and happen to use <a href="http://www.microsoft.com/windows/downloads/ie/getitnow.mspx">Internet Explorer</a> or <a href="http://www.mozilla.com/en-US/firefox/">Firefox</a> then you can <a href="http://blogorama.nerdworks.in/tictactoe/index.htm">click here</a> to take a look at the game. The game AI isn't exactly <a href="http://en.wikipedia.org/wiki/HAL_9000">HAL 9000</a> but does an admirable job of appearing to be intelligent by making inexplicable random moves. If you're a geeky kind of person and want to look at the source then the links are available below.</p>

<ul>
<li><a href="http://blogorama.nerdworks.in/tictactoe/index.htm">Click here</a> to run the game using your current browser.</li>
<li><a href="http://blogorama.nerdworks.in/downloads/TicTacToeSrc.zip">Click here</a> to download the source code. You'll need to install <a href="http://msdn2.microsoft.com/en-us/vstudio/default.aspx">Visual Studio 2008</a> and the <a href="http://www.microsoft.com/downloads/details.aspx?FamilyId=25144C27-6514-4AD4-8BCB-E2E051416E03&amp;displaylang=en">tools alpha for Visual Studio 2008</a> if you want to build the project.</li>
</ul>]]>
      </content:encoded>
    </item>
    <item>
      <title>JavaScript eval console</title>
      <link>http://ghost-nerd.azurewebsites.net/javascriptevalconsole</link>
      <dsq:thread_identifier>58</dsq:thread_identifier>
      <wp:post_date_gmt>2011-02-31 02:52:31</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>One of the things I frequently find myself needing to do as I explore the JavaScript language is to quickly code up little snippets of JavaScript code and run them. Once I'd tired myself of spinning up little HTML files scattered all over the place, I figured I'd write an interactive console of sorts where I can quickly experiment with JS code. Starting with a simple <code>textarea</code> embedded in an HTML page I eventually ended up with the page in its current incarnation. Here's a screen shot of the console in action:</p>

<blockquote>
  <p><img src="http://blogorama.nerdworks.in/images/eval.png" alt="" title="" /></p>
</blockquote>

<p>The console uses <a href="http://www.ajax.org">Ajax.org</a> and <a href="http://www.mozilla.com/">Mozilla</a>'s <strong><a href="http://ace.ajax.org/">Ace web editor</a></strong> to get support for things like auto-indent and syntax highlighting. You can hit the keyboard combination <code>Ctrl+Enter</code> to make the console run the code that is currently in the console. The page automatically loads the latest version of <a href="http://jquery.com/">jQuery</a> for you so you have all the <code>$</code> goodness available to you. There are also a bunch of built-in utility functions available that you can call. Here's a list:</p>

<table>  
<thead>  
<tr class="header">  
<th align="left">Function</th>  
<th align="left">What it does</th>  
<th align="left">Example</th>  
</tr>  
</thead>  
<tbody>  
<tr class="odd">  
<td align="left"><code>print(msg)</code></td>  
<td align="left">Prints the string passed to it to the output console.</td>  
<td align="left"><code>print(&quot;Hello.&quot;);</code></td>  
</tr>  
<tr class="even">  
<td align="left"><code>pprint(msg)</code></td>  
<td align="left">Prints the string passed to it to the output console using <code>&lt;pre&gt;</code> tag.</td>  
<td align="left"><code>pprint(&quot;Pre-formatted hello.&quot;);</code></td>  
</tr>  
<tr class="odd">  
<td align="left"><code>sprintf(fmt, ...)</code></td>  
<td align="left">Similar to the 'C' <code>sprintf</code> function. Returns formatted string. Credit for function goes to <a href="http://www.webtoolkit.info/javascript-sprintf.html">http://www.webtoolkit.info/javascript-sprintf.html</a></td>  
<td align="left"><code>print(sprintf(&quot;ms since 1/1/1970: %d&quot;,   Date.now()));</code></td>  
</tr>  
<tr class="even">  
<td align="left"><code>escapeHTML</code></td>  
<td align="left">Use this function if you're trying to <code>print</code> a bit of HTML snippet to the console. If you directly print HTML then the console will simply render it!</td>  
<td align="left"><code>print(escapeHTML(&quot;&lt;div&gt;markup&lt;/div&gt;&quot;));</code></td>  
</tr>  
<tr class="odd">  
<td align="left"><code>clear</code></td>  
<td align="left">Clears the message log pane.</td>  
<td align="left"><code>clear();</code></td>  
</tr>  
</tbody>  
</table>

<p>If you'd like to access an online version of the console that you can run right away, then use this:</p>

<blockquote>
  <p><a href="http://blogorama.nerdworks.in/arbit/webstuff/eval/">Run JavaScript Eval</a></p>
</blockquote>

<p>If you'd prefer to use an offline version instead then download it here (note that Google Chrome seems to have problems running this page if served from the disk - so if you're running offline then please stick to IE9, FF or Safari):</p>

<blockquote>
  <p><a href="http://blogorama.nerdworks.in/downloads/eval.zip">Download JavaScript Eval</a></p>
</blockquote>]]>
      </content:encoded>
      <wp:comment>
        <wp:comment_id>120</wp:comment_id>
        <wp:comment_author>Ganeshji Marwaha</wp:comment_author>
        <wp:comment_author_email>ganeshmax@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2011-03-17 21:08:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Ever since I attended your javascript session i have been using this console myself and I can guarantee that my desktop has far fewer testxxx.html files... Thanks a ton... ]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>121</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2011-03-17 21:13:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Glad you find it useful! I am working on a small enhancement to this console that'll let you save the snippets you write to local storage (using HTML5 DOM Storage API). Should get done in a few days. Will put up the update here.]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>126</wp:comment_id>
        <wp:comment_author>Shankar</wp:comment_author>
        <wp:comment_author_email>k_sankar_rao@yahoo.co.in</wp:comment_author_email>
        <wp:comment_date_gmt>2011-04-08 18:25:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks a lot for sharing these tools, 
Very usefull ,


]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>127</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2011-04-08 18:28:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks Shankar. Glad you found it useful.]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>129</wp:comment_id>
        <wp:comment_author>Pratap Madgulkar</wp:comment_author>
        <wp:comment_author_email>pratap_madgulkar@mahindrasatyam.com</wp:comment_author_email>
        <wp:comment_date_gmt>2011-04-08 19:01:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[This one is too good and simple .. 

No need to make temp.html file on desktop .]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>130</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2011-04-08 19:03:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Yep! Glad you liked it Pratap. Thanks for your comment.]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>177</wp:comment_id>
        <wp:comment_author>Sarfraz Ahmed</wp:comment_author>
        <wp:comment_author_email>sarfraznawaz2005@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2012-01-16 21:01:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Great tool, I was also looking for one. Thanks for sharing.

BTW, one can still run it Chrome on WAMP or other server setup locally. Syntax highlighting, on-fly error checking etc all work fine that way.

I have started using this tool, modified layout a bit, added other utility functions such as assert, perf :)]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>178</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2012-01-16 21:08:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks Sarfraz. Yes, it should work on a WAMP or LAMP or any other setup. In fact you don&#39;t even need a server, you can just run off the file system. Care to share your utility functions? I can integrate and put it up here. Thanks!]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>179</wp:comment_id>
        <wp:comment_author>Sarfraz Ahmed</wp:comment_author>
        <wp:comment_author_email>sarfraznawaz2005@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2012-01-16 22:35:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[My Pleasure. Basically simple ones but nice to have around for testing:


function perf(times, fn) {

   times = times || 10;

   var start = (new Date).getTime();

   while (times--) fn();

   show (&#39;Time: &#39; + ((new Date).getTime() - start));

}



/*

perf(50, function(){

  for(var i=0; i&lt; 20; i++){

  }

});

*/



         function assert(expression, msg){

            Loggers.message.log(expression ? &#39;TRUE: &#39; + msg : &#39;FALSE: &#39; + msg);

         }
]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>180</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2012-01-16 22:38:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks Sarfraz! Will integrate these. Quite useful.]]>
        </wp:comment_content>
      </wp:comment>
    </item>
    <item>
      <title>What&apos;s a good error message?</title>
      <link>http://ghost-nerd.azurewebsites.net/whatsagooderrormessage</link>
      <dsq:thread_identifier>59</dsq:thread_identifier>
      <wp:post_date_gmt>2008-07-20 21:57:46</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>In general, when writing code for handling the case for when something goes wrong, the programmer's natural instinct seems to be to just get over with it as soon as is possible and move on to other more exciting things. I speak, of course, from first hand experience. Now, there are a class of errors for which even the programmer is at a loss for providing guidance on what is an appropriate recourse, but really, if one is honest with oneself they are in truth few and far between. If you're willing to put in the effort required, more often than not, an error message that allows the end user to actually <em>do</em> something about the problem is only a few minutes and a few key strokes away.</p>

<p>I was working with <a href="http://msdn.microsoft.com/en-us/library/ms365247.aspx">SQL Server Management Studio Express</a> edition today when I came across this error:</p>

<blockquote>
  <p><img src="http://blogorama.nerdworks.in/images/ssmsee_err.PNG" alt="SQL Server Management Studio Express Edition - Error message. Database diagram support objects cannot be installed because this database does not have a valid owner. To continue, first use the Files page of the Database Properties dialog box or the ALTER AUTHORIZATION statement to set the database owner to a valid login, then add the database diagram support objects." title="" /></p>
</blockquote>

<p>I present this as an example of a <em>good</em> error message. I knew exactly what I had to do to remedy the situation once I actually paid attention to what the message said (I admit, however, to having pig-headedly re-tried what I was trying to do a few times, unabashedly dismissing this message box every time, before admitting defeat and reading the message!). I did what this message box told me to do and the thing just worked! This might not sound like a big deal, but it makes me that little bit happier and as <a href="http://joelonsoftware.com">Joel</a> puts it, these <a href="http://www.joelonsoftware.com/uibook/fog0000000249.html">tiny victories</a> tend to add up and contributes to one's feeling positively disposed towards the product at a subconcious level!</p>]]>
      </content:encoded>
    </item>
    <item>
      <title>Memoization - Optimize your function calls</title>
      <link>http://ghost-nerd.azurewebsites.net/memoizationoptimizeyourfunctio</link>
      <dsq:thread_identifier>60</dsq:thread_identifier>
      <wp:post_date_gmt>2009-06-31 06:34:34</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p><a href="http://en.wikipedia.org/wiki/Memoization">Memoization</a> is an optimization technique where the idea is to create functions that cache computed values for various input sets so that subsequent invocations can return the value from the cache instead of re-computing the results. It is a simple space for time trade-off where processing time is reduced at the expense of increased memory use. I figured I'd implement an <em>automatic memoization</em> mechanism in JavaScript that will work well under certain well defined constraints. Here's what I came up with:</p>

<pre><code>function memoize( fn ) {
    //
    // check if this function has already been memoized
    //
    if( typeof( fn.__fn ) == "undefined" ) {
        //
        // the cache where the results are to be stored
        //
        fn.__cache = {};

        //
        // memoized version of the function
        //
        fn.__fn = function() {
            //
            // build the key that represents the given input set;
            // note that this thing works only so long as the operation
            // "toString" returns a meaningful result on all of the
            // parameters
            //
            var key = "";
            for( var i = 0 ; i &lt; arguments.length ; ++i )
                key += arguments[i].toString() + "-";

            //
            // if the result for the current parameter set already exists
            // in the cache then return that; otherwise call the original
            // routine and store the result
            //
            if( typeof( fn.__cache[key] ) == "undefined" )
                fn.__cache[key] = fn.apply( null, arguments );
            return fn.__cache[key];
        }
    }

    return fn.__fn;
}
</code></pre>

<p>Imagine that you are tasked with the job of writing a Javascript function that returns the factorial given a number. If you wished to write a <em>memoized</em> version of the function here's what you'd do:</p>

<pre><code>var fac = memoize( function( n ) {
    if( n &lt;= 0 )
        return 1;
    return ( n * fac( n - 1 ) );
} );
</code></pre>

<p>If you invoked <code>fac</code> passing <code>5</code> for instance, and traced the control flow, here's the sequence of calls you'd see:</p>

<pre><code>. __fn(5)
.. fac(5)
... __fn(4)
.... fac(4)
..... __fn(3)
...... fac(3)
....... __fn(2)
........ fac(2)
......... __fn(1)
.......... fac(1)
........... __fn(0)
............ fac(0)
</code></pre>

<p>The number of dots to the left of the function names indicates the stack depth and here it tends to increase because <code>fac</code> is a recursive function and keeps calling itself till the termination criteria is met. This seems like a drawback since where you'd have had a sequence of calls to just <code>fac</code> now we see it interspersed with calls to <code>__fn</code> also, effectively doubling the number of function calls that needs to be made. The benefit however, is realized when we observe what happens when <code>fac</code> is invoked again, a second time, passing <code>5</code>.</p>

<pre><code>. __fn(5)
</code></pre>

<p>As you can see, this time around, there was only a single function call. No further computation was needed as the required result was already available in the cache and only a simple look-up operation was performed. Observe what happens when we pass <code>3</code> next.</p>

<pre><code>. __fn(3)
</code></pre>

<p>This was resolved via cache look-up also because the first call with <code>5</code> had recursively invoked <code>fac</code> with <code>3</code> as well. On a similar note, passing <code>7</code> produces the following call sequence:</p>

<pre><code>. __fn(7)
.. fac(7)
... __fn(6)
.... fac(6)
..... __fn(5)
</code></pre>

<p>Automatic memoization ensures that the original routine is called only the bare minimum number of times - in this case, for the values <code>7</code> and <code>6</code>. The implementation of <code>memoize</code> given above is useful only so long as the following are held true:</p>

<ol>
<li>Each parameter passed to the actual function has a <code>toString</code> method that returns a meaningful value; if you passed a custom object for instance, you're going to have to define a <code>toString</code> method on it.  </li>
<li>The CPU overhead of constructing a unique key for a given parameter set and doing hashtable lookups should be lower (preferably <em>significantly</em>) than simply performing the actual work.  </li>
<li>For obvious reasons, the function should have at least 1 parameter!</li>
</ol>

<p>If you've been following this blog, you know that I am trying to learn the <a href="http://en.wikipedia.org/wiki/Common_Lisp"><em>Common Lisp</em></a> programming language. I figured, I'll try and implement <code>memoize</code> in <em>Common Lisp</em> as well, to see if I'd learned enough of it to be able to do this. After looking up the <a href="http://www.lispworks.com/documentation/HyperSpec/Front/">Common Lisp Hyperspec</a> a few times, I was in fact able to come up with an implementation that does essentially the same thing as what the JavaScript version above does. Here goes:</p>

<pre><code>(defun make-key (lst)
  (format nil "~{~A-~}" lst))

(defun memoize (fn)
  (let ((cache (make-hash-table :test 'equal)))
    #'(lambda (&amp;rest p)
    (let ((key (make-key p)))
      (if (not (gethash key cache))
        (setf (gethash key cache) (apply fn p)))
      (gethash key cache)))))

(setf fac (memoize #'(lambda (n)
                        (if (&lt;= n 0) 1
                            (* n (funcall fac (- n 1)))))))
</code></pre>]]>
      </content:encoded>
    </item>
    <item>
      <title>Web Camps, Virtual Tech Days and jsFoo</title>
      <link>http://ghost-nerd.azurewebsites.net/webcampsvirtualtechdaysandjsfo</link>
      <dsq:thread_identifier>61</dsq:thread_identifier>
      <wp:post_date_gmt>2011-09-16 23:37:14</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>So I've had a busy few weeks recently doing a bunch of sessions at <a href="http://bit.ly/r56sCs">Web Camps</a> (in Delhi and Hyderabad), <a href="http://bit.ly/qgtuFu">Virtual Tech Days</a> and <a href="http://jsfoo.hasgeek.com/">jsFoo</a>. At each of those events I promised attendees that I'd put up the demos and the decks on my blog "soon". Well, truth be told I've not been exactly conscientious about doing this quickly and I apologize for that. At any rate here's the material for folks who came by for these sessions:</p>

<h4 id="webcamps">Web Camps</h4>

<ol>
<li><strong>Bold and Beautiful with CSS3</strong> - <a href="http://bit.ly/q9tEsP">deck</a> / <a href="https://skydrive.live.com/?cid=2c5064cb54b16f50&amp;sc=documents#cid=2C5064CB54B16F50&amp;id=2C5064CB54B16F50%21516&amp;sc=documents">demo</a>  </li>
<li><strong>Spice it up - Advanced HTML5</strong> - <a href="http://bit.ly/pmHizA">deck</a> / <a href="https://skydrive.live.com/?cid=2c5064cb54b16f50&amp;sc=documents#cid=2C5064CB54B16F50&amp;id=2C5064CB54B16F50%21516&amp;sc=documents">demo</a></li>
</ol>

<p>Folks who attended the Hyderabad event might remember that I used a HTML5/CSS3 version of the decks during the session. If you'd like a copy of that code then hang tight because I hope to put up a post here on how I built it and intend to share the source with that post.</p>

<h4 id="virtualtechdays">Virtual Tech Days</h4>

<ol>
<li><strong>Socket programming on the web</strong> - <a href="http://bit.ly/pAMvjI">deck</a> / <a href="https://skydrive.live.com/?cid=2c5064cb54b16f50&amp;sc=documents#cid=2C5064CB54B16F50&amp;id=2C5064CB54B16F50%21523&amp;sc=documents">demo</a>  </li>
<li><strong>Threading and async programming on the web</strong> - <a href="http://bit.ly/o7MQbF">deck</a> / <a href="https://skydrive.live.com/?cid=2c5064cb54b16f50&amp;sc=documents#cid=2C5064CB54B16F50&amp;id=2C5064CB54B16F50%21526&amp;sc=documents">demo</a>  </li>
<li><strong>Baking some HTML5 goodness into your ASP.NET apps</strong> - <a href="http://bit.ly/q5F2fD">deck</a> / <a href="https://skydrive.live.com/?cid=2c5064cb54b16f50&amp;sc=documents#cid=2C5064CB54B16F50&amp;id=2C5064CB54B16F50%21529&amp;sc=documents">demo</a></li>
</ol>

<h4 id="jsfoo">jsFoo</h4>

<ol>
<li><strong>A primer on ECMAScript 5</strong> - <a href="http://bit.ly/pJbCU5">deck</a>  </li>
<li><strong>Advanced JavaScript Techniques</strong> - <a href="http://bit.ly/o9tEfl">deck</a>  </li>
<li><strong>Best practices for building async apps with JavaScript</strong> - <a href="http://bit.ly/nHCJPh">deck</a> / <a href="https://skydrive.live.com/?cid=2c5064cb54b16f50&amp;sc=documents#cid=2C5064CB54B16F50&amp;id=2C5064CB54B16F50%21539&amp;sc=documents">demo</a></li>
</ol>

<p>A number of jsFoo attendees requested that I share the "eval" console that I used to geek out on many of the advanced JS and ES5 samples during the session. I already have a post on that here:</p>

<blockquote>
  <p><a href="http://bit.ly/js-eval" title="http://bit.ly/js-eval">http://bit.ly/js-eval</a></p>
</blockquote>

<p>You should be able to download a copy for your own use from that post or use the <a href="http://blogorama.nerdworks.in/arbit/webstuff/eval/">online version</a> if you prefer that.</p>]]>
      </content:encoded>
    </item>
    <item>
      <title>JavaScript closures act like implicit function state?</title>
      <link>http://ghost-nerd.azurewebsites.net/javascriptclosuresactlikeimpli</link>
      <dsq:thread_identifier>62</dsq:thread_identifier>
      <wp:post_date_gmt>2009-06-12 10:06:27</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>Consider this JavaScript code:</p>

<pre><code>function acc( n ) {
    return function( i ) {
        return n += i;
    };
}

var fn = acc( 5 );
var n1 = fn( 1 );
var n2 = fn( 2 );
</code></pre>

<p>The question, of course, is what the values of <code>n1</code> and <code>n2</code> will be. It is perhaps evident that <code>n1</code> must now equal to <code>6</code>. But what about <code>n2</code>? Will it now contain <code>7</code> (i.e. <code>2 + 5</code>) or will successive calls to <code>fn</code> result in the parameters being accumulated by addition with the value that was passed to <code>acc</code> (<code>5</code>)? We find by experimentation that the latter turns out to be true. <code>n2</code> now equals <code>8</code>, i.e., <code>5 + 1 + 2</code>!</p>

<p>The conclusion to draw here therefore is that JavaScript function <a href="http://en.wikipedia.org/wiki/Closure_(computer_science)">closures</a> are essentially implicit function state. In the code snippet given above, if you treat <code>fn</code> as a regular object (which in fact it is), then the variable <code>n</code> which is part of the closure captured by the function object when it was returned from <code>acc</code> now acts like member state of <code>fn</code>. This is why multiple calls to <code>fn</code> causes the mutation to <code>n</code> to persist across those calls.</p>

<p>This is further corroborated by the fact that a subsequent call to <code>acc</code> to create another function object results in that instance getting a separate copy of the closure containing <code>n</code>. Here's an example:</p>

<pre><code>function acc( n ) {
    return function( i ) {
        return n += i;
    };
}

var fn = acc( 5 );
var n1 = fn( 1 );
var n2 = fn( 2 );

var fn2 = acc( 10 );
var n3 = fn2( 1 );
var n4 = fn2( 2 );
</code></pre>

<p>Here, <code>n3</code> and <code>n4</code> hold <code>11</code> and <code>13</code> respectively. The function <code>fn</code> has no effect whatsoever on <code>fn2</code> (or vice versa). This in fact, is the basis for creating the C++ equivalent of <em>private</em> member data in JavaScript. Imagine that you wish to create the equivalent of the .NET <a href="http://msdn.microsoft.com/en-us/library/system.text.stringbuilder.aspx">StringBuilder</a> class and want to make the buffer where the string is actually stored a private member of the class. If you did this:</p>

<pre><code>function StringBuilder() {
    this.buffer = [];
}
</code></pre>

<p>Then <code>buffer</code> is a <em>public</em> member and can be accessed via an instance. To make it private, simply declare <code>buffer</code> as a local variable inside <code>StringBuilder</code>. Like this:</p>

<pre><code>function StringBuilder() {
    var buffer = [];

    this.getBuffer = function() {
        //
        // TODO:
        // return a copy so the original buffer is
        // left intact
        //
        return buffer;
    }
}
</code></pre>

<p>Now <code>buffer</code> is not visible to routines defined outside <code>StringBuilder</code> via an instance. But all methods defined inside <code>StringBuilder</code> can access <code>buffer</code> like any other member. You'd have to add <a href="http://en.wikipedia.org/wiki/Accessor">accessor</a> methods if you wished to provide access to private data. The same principle applies to member methods as well. Any local functions that you defined inside <code>StringBuilder</code> remain accessible only from other functions defined inside that class.</p>

<p>Cool eh?!</p>]]>
      </content:encoded>
      <wp:comment>
        <wp:comment_id>116</wp:comment_id>
        <wp:comment_author>Guandalino</wp:comment_author>
        <wp:comment_author_email>guandalino@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2011-02-03 20:13:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks, your explanation is very clear and the examples are really easy to understand. Great work.]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>117</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2011-02-03 20:17:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks Guandalino. Glad you found it useful.]]>
        </wp:comment_content>
      </wp:comment>
    </item>
    <item>
      <title>preventExtensions, seal and freeze</title>
      <link>http://ghost-nerd.azurewebsites.net/preventextensionssealandfreeze</link>
      <dsq:thread_identifier>63</dsq:thread_identifier>
      <wp:post_date_gmt>2011-03-24 03:44:03</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p><a href="http://en.wikipedia.org/wiki/ECMAScript">ECMAScript</a> version 5 is the latest, official, approved standard version of the <em>ECMAScript</em> programming language. If you've never heard of ECMAScript, well, don't feel too bad as it is better known, used, loved (and hated) by its other name - <em>JavaScript</em>. As far as names go <em>JavaScript</em> is probably not a whole lot better than <em>ECMAScript</em> either - as <a href="http://en.wikipedia.org/wiki/Douglas_Crockford">Douglas Crockford</a> so eloquently (half joking actually) put it in a <a href="http://channel9.msdn.com/Events/MIX/MIX11/RES02">recent session</a> that he did during Microsoft's <a href="http://visitmix.com/">MIX</a> event:</p>

<blockquote>
  <p>"<em>Maybe it's time to change the name of it. Because if it isn't Java and if it isn't script then the name is completely wrong!</em>"</p>
</blockquote>

<p>Douglas was actually responding to a comment from <a href="http://channel9.msdn.com/Events/Speakers/allen+wirfs-brock">Allen Wirfs-Brock</a> that JavaScript really isn't a "scripting" language if you think of scripting languages as being programming languages that are somewhat limited in capabilities or are designed to be used with very specific use cases in mind. JavaScript is a full-fledged general purpose programming language that is <a href="http://en.wikipedia.org/wiki/Turing_completeness">turing complete</a> which has been used with great success in contexts other than the browser with the <a href="http://en.wikipedia.org/wiki/Nodejs">node.js</a> project perhaps being the most renowned. It kind of goes to show how things might end up being given names that have little to do with the thing that is being named!</p>

<p>So then, ECMAScript version 5 (referred to as <strong>ES5</strong> henceforth) brings a nifty set of features designed, among other things, to introduce an element of discipline to JavaScript development. As far as being a dynamic language is concerned, JavaScript is about as dynamic as a language could probably get! While that dynamism grants considerable expressive power, it also makes it rather trivial to write incorrect code. Consider the following snippet for instance (<strong>Note</strong>: I have used the <a href="http://blogorama.nerdworks.in/entry-JavaScriptevalconsole.aspx">JavaScript Eval Console</a> for testing all of the code given below; so when you see calls to functions such as <code>print</code> and <code>sprintf</code> please understand that those are functions provided by the console; please read that post to see what those functions do if it isn't clear from the context):</p>

<pre><code>var data = [
    {
        month: 1,
        revenue: 102010,
        expense: 95000
    },

    {
        month: 2,
        revenue: 143232,
        expense: 98000
    },

    {
        month: 3,
        revenue: 323212,
        expense: 195000
    }
];

function Results() {
    this.totalRevenue = 0;
    this.totalExpense = 0;
    this.netProfit = 0;
}

var r = new Results();

//
// iterate through the data set and compute total
// revenue and expense
//
data.forEach(function(d) {
    r.totalrevenue += d.revenue;
    r.totalExpense += d.expense;
});

//
// net profit is revenue - expense
//
r.netProfit = r.totalRevenue - r.totalExpense;
print(r.netProfit);
</code></pre>

<p>Here's the output we get.</p>

<pre><code>-388000
</code></pre>

<p>Clearly, something is not right here because when you look at the data the revenue exceeds expenses for every single month - so we really shouldn't be ending up with a net loss. Let's take a closer look at the code that's iterating through the array and computing total revenue and expense. Pay particular attention to the part highlighted in bold:</p>

<pre><code>data.forEach(function(d) {
    r.totalrevenue += d.revenue;
    r.totalExpense += d.expense;
});
</code></pre>

<p>As you can see, there's a typo there. The 'r' in <code>totalrevenue</code> should have been upper case. Instead of flagging that as an error the JavaScript engine just went right ahead and created a new property on the <code>Results</code> instance with a lower case 'r'. This of course messed up the net profit computation later on. Wouldn't it be nice if we could somehow prevent the arbitrary creation of new members on objects? It is precisely for situations such as this that the ES5 spec includes a slew of new methods (well, three of them at least) on the <code>Object</code> type that allow you to exercise greater control on the extensibility aspects of your objects. Let's review what they are and what they do.</p>

<h3 id="objectpreventextensions">Object.preventExtensions</h3>

<p><code>Object.preventExtensions</code> does exactly what it sounds like it would do - it prevents arbitrary properties from being tacked on to the object in question. Here's an example:</p>

<pre><code>var o = {};

o.newFangledProperty1 = "zoo";
print(typeof(o.newFangledProperty1));

Object.preventExtensions(o);

o.newFangledProperty2 = "moo";
print(typeof(o.newFangledProperty2));
</code></pre>

<p>And here's the output we get:</p>

<pre><code>string
undefined
</code></pre>

<p>As is evident from the output, the attempt to create <code>newFangledProperty2</code> was not successful. The JavaScript engine silently ignored the creation of the new property and it did this because we marked the object as <em>permanently</em> non-extensible by calling <code>Object.preventExtensions</code> on it. You can verify whether an object is extensible or not by calling <code>Object.isExtensible</code> on it which would return a boolean indicating <code>true</code> if it is extensible and <code>false</code> otherwise.</p>

<pre><code>print(Object.isExtensible(o));
</code></pre>

<p>Output:</p>

<pre><code>false
</code></pre>

<p>We can easily use this method on our <code>Results</code> object above to prevent the creation of arbitrary properties on it like so:</p>

<pre><code>var r = new Results();
Object.preventExtensions(r);
</code></pre>

<p>Now the line with the typo will end up being a no-op statement having no effect on the object. The result will still be wrong of course since the <code>totalRevenue</code> property will continue to have the value zero. So what's the point of using <code>preventExtensions</code> you might wonder. In scenarios such as this, using <code>Object.preventExtensions</code> makes the most sense when used in tandem with ES5's support for "<a href="http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/">strict mode</a>". ES5's "strict mode" is a new feature that causes the JavaScript engine to interpret the relevant section of code (i.e. the part that you have marked as being strict) with a stricter set of rules than what is allowed in ES3. One of the consequences of switching the engine into strict mode is that it'll throw more errors in situations where it would otherwise have simply silently failed/ignored the error. Assigning an arbitrary property to an object that has been marked as not being extensible via <code>preventExtensions</code> for instance causes an exception to be thrown. Here's the updated profit computation snippet using strict mode and <code>preventExtensions</code>. Take note of the lines highlighted in bold.</p>

<pre><code>"use strict"; // make engine switch into strict mode

var data = [
    {
        month: 1,
        revenue: 102010,
        expense: 95000
    },

    {
        month: 2,
        revenue: 143232,
        expense: 98000
    },

    {
        month: 3,
        revenue: 323212,
        expense: 195000
    }
];

function Results() {
    this.totalRevenue = 0;
    this.totalExpense = 0;
    this.netProfit = 0;
}

var r = new Results();
Object.preventExtensions(r); // disallow arbitrary extensibility

//
// iterate through the data set and compute total
// revenue and expense
//
data.forEach(function(d) {
    r.totalrevenue += d.revenue;
    r.totalExpense += d.expense;
});

//
// net profit is revenue - expense
//
r.netProfit = r.totalRevenue - r.totalExpense;
print(r.netProfit);
</code></pre>

<p>And here's the output we get on running the script in a browser that can understand strict modes (<a href="http://ie.microsoft.com/testdrive/info/downloads/Default.html">IE10 Platform Preview 1</a> in this case; but recent versions of Chrome, FireFox, Safari and Opera should be able to handle it as well).</p>

<pre><code>Cannot create property for a non-extensible object
</code></pre>

<p>As you can tell, an exception was thrown upon encountering the line where an attempt was made to create a new property on the object <code>r</code>.</p>

<h3 id="objectseal">Object.seal</h3>

<p><code>Object.seal</code> is a superset of <code>Object.preventExtensions</code> in functionality in that while it prevents tacking on of arbitrary properties to objects it also prevents altering the attributes of the properties that already exist on the object. Also, it disallows deleting properties. First we'll define a little helper function that will allow us to enumerate and print all the "own" properties (i.e. properties defined directly on the object instead of its prototype) that are present on a given object which we'll use to examine the object's property state as we go along.</p>

<pre><code>//
// prints the property descriptors for all the "own"
// properties on the object "o"
//
function printDesc(o) {
    Object.getOwnPropertyNames(o).forEach(function(p) {
        print(sprintf("%s: %s", p,
            JSON.stringify(Object.getOwnPropertyDescriptor(o, p),
            null, " ")));
    });
}
</code></pre>

<p>With this function in hand let's go ahead and define a simple object with a single property called "name" using <code>Object.defineProperty</code> and print it to the console via <code>printDesc</code>.</p>

<pre><code>//
// define object with one property
//
var person = {};
Object.defineProperty(person, "name", {
    value: "no name",
    writable: true,
    enumerable: true,
    configurable: true
});
print("Default state:");
printDesc(person);
</code></pre>

<p>Here's the output we get on running this:</p>

<pre><code>Default state:
name: {
  "value": "no name",
  "writable": true,
  "enumerable": true,
  "configurable": true
}
</code></pre>

<p>Let's next examine the effect calling <code>Object.preventExtensions</code> has on the attribute state:</p>

<pre><code>//
// prevent extensions
//
Object.preventExtensions(person);
print("preventExtensions:");
printDesc(person);
</code></pre>

<p>Output:</p>

<pre><code>preventExtensions:
name: {
  "value": "no name",
  "writable": true,
  "enumerable": true,
  "configurable": true
}
</code></pre>

<p>As you can tell nothing at all has changed on the attributes of the property <code>name</code>. This makes sense as the only effect that <code>preventExtensions</code> has on the object is to make it non-extensible. Let's next attempt to edit the property descriptor for the property <code>name</code> and see what happens:</p>

<pre><code>//
// manually change property descriptor
//
Object.defineProperty(person, "name", {
    value: "no name",
    writable: false,    // make property read only
    enumerable: false,  // disallow enumeration
    configurable: true  // allow editing prop descriptor
});
print("Manual config reset:");
printDesc(person);
</code></pre>

<p>Output:</p>

<pre><code>Manual config reset:
name: {
  "value": "no name",
  "writable": false,
  "enumerable": false,
  "configurable": true
}
</code></pre>

<p>So far everything seems to be working as expected. Let's continue the experiment and <code>seal</code> the object and see what happens.</p>

<pre><code>//
// seal
//
Object.seal(person);
print("seal:");
printDesc(person);
</code></pre>

<p>Output:</p>

<pre><code>seal:
name: {
  "value": "no name",
  "writable": false,
  "enumerable": false,
  "configurable": false &lt;-- this changed!
}
</code></pre>

<p>Sealing the object seems to have had the effect of setting the <code>configurable</code> attribute on the property descriptor to <code>false</code>. So what happens when we attempt to delete a property or tack on a new property?</p>

<pre><code>//
// delete property "name"
// add a new property
//
delete person.name;
person.age = 10;
print("Delete/add properties:");
printDesc(person);
</code></pre>

<p>Output:</p>

<pre><code>Delete/add properties:
name: {
  "value": "no name",
  "writable": false,
  "enumerable": false,
  "configurable": false
}
</code></pre>

<p>As you can tell, nothing happened! Calling <code>Object.seal</code> on <code>person</code> causes the JavaScript engine to ignore "delete" calls and attempts to introduce new properties. In strict mode both of these attempts would have caused an error to be thrown. Finally, let's try and redefine the property descriptor on the sealed instance of <code>person</code> and see what happens.</p>

<pre><code>//
// manually change property descriptor again
//
Object.defineProperty(person, "name", {
    value: "no name",
    writable: true,
    enumerable: true,
    configurble: true
});
print("Second manual config reset:");
printDesc(person);
</code></pre>

<p>Output:</p>

<pre><code>Cannot redefine non-configurable property 'name'
</code></pre>

<p>The JavaScript engine throws an error indicating that this operation is not allowed on a sealed object. Note that this error is thrown even when we are <em>not</em> running in strict mode. You can check if an object has been sealed by calling <code>Object.isSealed</code> which returns <code>true</code> if the object has been sealed and <code>false</code> otherwise.</p>

<h3 id="objectfreeze">Object.freeze</h3>

<p><code>Object.freeze</code> is a superset of both <code>Object.seal</code> and <code>Object.preventExtensions</code> in that it subsumes the functionality of both of those functions with the added responsibility of making all of the existing properties on the object read-only. Here's an example:</p>

<pre><code>var ShapeType = {
    None: 0,
    Line: 1,
    Ellipse: 2,
    Rectangle: 3,
    RoundedRectangle: 4
};

Object.freeze(ShapeType);

ShapeType.None = 5;
print(ShapeType.None);

ShapeType.Polygon = 5;
print(typeof(ShapeType.Polygon));
</code></pre>

<p>Output:</p>

<pre><code>0
undefined
</code></pre>

<p>Once an object has been frozen attempts to assign a value to an existing property or to define a new property are silently ignored in normal mode. In strict mode this would cause the engine to throw an error. To determine if an object has been frozen call <code>Object.isFrozen</code>.</p>

<p>Here's a table that summarizes the functionalities of <code>preventExtensions</code>, <code>seal</code> and <code>freeze</code> taken from <a href="http://msdn.microsoft.com/en-us/library/ff806186(v=VS.94).aspx">MSDN</a>:</p>

<table>  
<thead>  
<tr class="header">  
<th align="left">Function</th>  
<th align="left">Object made non-extensible?</th>  
<th align="left">&quot;configurable&quot; set to false for all properties?</th>  
<th align="left">&quot;writable&quot; set to false for all properties?</th>  
</tr>  
</thead>  
<tbody>  
<tr class="odd">  
<td align="left"><code>Object.preventExtensions</code></td>  
<td align="left">Yes</td>  
<td align="left">No</td>  
<td align="left">No</td>  
</tr>  
<tr class="even">  
<td align="left"><code>Object.seal</code></td>  
<td align="left">Yes</td>  
<td align="left">Yes</td>  
<td align="left">No</td>  
</tr>  
<tr class="odd">  
<td align="left"><code>Object.freeze</code></td>  
<td align="left">Yes</td>  
<td align="left">Yes</td>  
<td align="left">Yes</td>  
</tr>  
</tbody>  
</table>

<p>In summary therefore, <code>preventExtensions</code>, <code>seal</code> and <code>freeze</code> allow you to exercise very precise control on how extensible or modifiable your objects are going to be. In combination with "strict mode" these new enhancements to JavaScript should help developers catch errors much earlier in the development cycle. And the fact that these capabilities are provided through new methods on the <code>Object</code> type should make it trivial to gracefully degrade when your site runs on older browsers that do not have support for ES5 features. In short there's no reason why you should not start using these features in your web apps from, like, right now!</p>]]>
      </content:encoded>
      <wp:comment>
        <wp:comment_id>122</wp:comment_id>
        <wp:comment_author>Ganeshji Marwaha</wp:comment_author>
        <wp:comment_author_email></wp:comment_author_email>
        <wp:comment_date_gmt>2011-03-24 16:13:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Very nice explanation of ES5. Got a few questions though. What version of JS is ES5 compliant? Is ES5 and its corresponding JS implementation supported by current browsers? ]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>123</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2011-03-24 18:27:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Ganesh,

The JS version numbers seem to be a bit confusing. Each browser has its own versioning scheme for their respective JS engines. From what I can tell (from here: http://en.wikipedia.org/wiki/JavaScript#Versions), looks like some bits of ES5 were implemented in version 1.8.1 and the rest in version 1.8.5. This link here talks about some of the version correspondence between ES5 and JS: http://en.wikipedia.org/wiki/ECMAScript#Version_correspondence.

In short, its a mess!]]>
        </wp:comment_content>
      </wp:comment>
    </item>
    <item>
      <title>What&apos;s wrong with India?</title>
      <link>http://ghost-nerd.azurewebsites.net/whatswrongwithindia</link>
      <dsq:thread_identifier>64</dsq:thread_identifier>
      <wp:post_date_gmt>2006-07-24 17:41:51</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>There was a small article writing contest in the <a href="http://www.virtusa.com/">company</a> that I work for to commemorate the 59<sup>th</sup> anniversary of Indian independence. Two entries were selected as winners; one by yours truly and another by a colleague. We were asked to write what in our opinion was the single most critical issue facing democratic India and what must be done to resolve it. Here are the two winning entries for your reading pleasure! I've hosted both of these articles on Google's <a href="http://www.writely.com">Writely</a> service, which is a free online web word processor. Just incase you didn't know Google has free online <a href="http://spreadsheets.google.com">spreadsheet</a> and <a href="http://www.google.com/calendar">calendar</a> applications too!</p>

<blockquote>
  <p><a href="http://www.writely.com/View.aspx?docid=ddwqj9fq_3gtqjk7">What's wrong with India and how to fix it</a> - (My colleague Parthiban's version) <br />
  Read this for a fun, humorous, tragic perspective!</p>
  
  <p><a href="http://www.writely.com/View.aspx?docid=ddwqj9fq_2fjpbt3">What's wrong with India and how to fix it</a> - (My version) <br />
  Read this for a boring, serious, heavy, preachy perspective!</p>
</blockquote>]]>
      </content:encoded>
    </item>
    <item>
      <title>On the HTML5 Indexed DB API - Part 4 of n</title>
      <link>http://ghost-nerd.azurewebsites.net/onthehtml5indexeddbapipart4ofn</link>
      <dsq:thread_identifier>65</dsq:thread_identifier>
      <wp:post_date_gmt>2011-08-07 22:21:02</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>So far we have looked at creating databases and adding data to them. Let's next take a look at retrieving records from the database. Surprisingly, this turns out to be a bit complex. The indexed DB way of enumerating records from an object store is to use a "cursor" object. A cursor can iterate over records from an underlying object store or an index. A cursor has the following key properties:</p>

<ol>
<li>A <strong><em>range</em></strong> of records in either an index or an object store.  </li>
<li>A <strong><em>source</em></strong> that references the index or object store that the cursor is iterating over.  </li>
<li>A <strong><em>position</em></strong> indicating the current position of the cursor in the given range of records.</li>
</ol>

<p>While the concept of a cursor is fairly straightforward, writing the code to actually iterate over an object store turns out to be somewhat tricky given the asynchronous nature of all the API calls. Let's implement the <code>listNotes</code> method of our <code>NotesStore</code> object and see what the code looks like.</p>

<pre><code>...
listNotes: function (callback) {
    var self = this,
        txn = self.db.transaction(null, TransactionMode.ReadOnly),
        notes = [],
        store = txn.objectStore(self.store_name);

    Utils.request(store.openCursor(), function (e) {
        var cursor = e.result,
            iterate = function () {
                Utils.request(cursor.move(), function (e2) {
                    // if "result" is true then we have data else
                    // we have reached end of line
                    if (e2.result) {
                        notes.push(cursor.value);

                        // recursively get next record
                        iterate();
                    }
                    else {
                        // we are done retrieving rows; invoke callback
                        txn.commit();
                        callback(notes);
                    }
                });
            };

        // set the ball rolling by calling iterate for the first row
        iterate();
    });
},
...
</code></pre>

<p>Let's break this implementation down:</p>

<ol>
<li>First we acquire a transaction object by calling the database object's <code>transaction</code> method. Note that this time we are indicating that we require a "read-only" transaction.  </li>
<li>Next we retrieve a reference to the object store via the <code>objectStore</code> method of the transaction object.  </li>
<li>Then we issue an async call to the <code>openCursor</code> API on the object store. The tricky part here is that every single iteration over a record in the cursor is itself an async operation! To prevent the code from drowning in a sea of callbacks we define a local function called <code>iterate</code> to encapsulate the logic of iterating over every record in the cursor.  </li>
<li>This <code>iterate</code> function makes an async call to the cursor object's <code>move</code> method and recursively invokes itself again in the callback if it detects that there are more rows to be retrieved. Once all the rows in the cursor have been retrieved we finally invoke the callback method passed by the caller handing in the retrieved data as a parameter.</li>
</ol>

<p>That's it for today's post. I'll let you mull over this for a bit till the next post when we'll cover some more scenarios.</p>]]>
      </content:encoded>
    </item>
    <item>
      <title>Building an Instagram clone - Part 2</title>
      <link>http://ghost-nerd.azurewebsites.net/buildinganinstagramclonepart2</link>
      <dsq:thread_identifier>66</dsq:thread_identifier>
      <wp:post_date_gmt>2013-03-19 04:20:27</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>In <a href="http://blogorama.nerdworks.in/entry-BuildinganInstagramclonePart1.aspx">part 1</a> we took a look at some of the UI layout implementation details of the <a href="http://blogorama.nerdworks.in/arbit/InstaFuzz/">InstaFuzz</a> app.  You can get the source code for the app from <a href="http://sdrv.ms/14B672O">here</a> if you wish to run it locally.  In this installment we'll take a look at some of the other bits such as how drag/drop, File API, Canvas and Web Workers are used.</p>

<h3 id="dragdrop">Drag/Drop</h3>

<p>One of the things that <em>InstaFuzz</em> supports is the ability to drag and drop image files directly on to the big blackish/blue box. Support for this is enabled by handling the "drop" event on the CANVAS element. When a file is dropped onto an HTML element the browser fires the "drop" event on that element and passes in a <a href="http://msdn.microsoft.com/library/ie/ms535861.aspx"><em>dataTransfer</em></a> object which contains a <a href="http://msdn.microsoft.com/en-US/library/ie/hh772716.aspx"><em>files</em></a> property that contains a reference to the list of files that were dropped. Here's how this is handled in the app ("picture" is the ID of the CANVAS element on the page):</p>

<pre><code>var pic = $("#picture");
pic.bind("drop", function (e) {
    suppressEvent(e);
    var files = e.originalEvent.dataTransfer.files;
    // more code here to open the file
});
pic.bind("dragover", suppressEvent).bind("dragenter", suppressEvent);
function suppressEvent(e) {
    e.stopPropagation();
    e.preventDefault();
}
</code></pre>

<p>The <em>files</em> property is a collection of <a href="http://msdn.microsoft.com/en-US/library/ie/hh772305.aspx"><em>File</em></a> objects that can then subsequently be used with the File API to access the file contents (covered in the next section). We also handle the <em>dragover</em> and <em>dragenter</em> events and basically prevent those events from propagating to the browser thereby preventing the browser from handling the file drop. IE for instance might unload the current page and attempt to open the file directly otherwise.</p>

<h3 id="fileapi">File API</h3>

<p>Once the file has been dropped, the app attempts to open the image and render it in the canvas. It does this by using the <a href="http://msdn.microsoft.com/en-us/library/ie/hh673542(v=vs.85).aspx">File API</a>. The File API is a W3C specification that allows web apps to programmatically access files from the local file system in a secure fashion. In <em>InstaFuzz</em> we use the <a href="http://msdn.microsoft.com/en-us/library/ie/hh772310(v=vs.85).aspx"><em>FileReader</em></a> object to read the file contents as a <a href="http://msdn.microsoft.com/en-us/library/ie/cc848897.aspx">data URL</a> string like so using the <a href="http://msdn.microsoft.com/en-us/library/ie/hh772313(v=vs.85).aspx"><em>readAsDataURL</em></a> method:</p>

<pre><code>var reader = new FileReader();
reader.onloadend = function (e2) {
    drawImageToCanvas(e2.target.result);
};
reader.readAsDataURL(files[0]);
</code></pre>

<p>Here, <em>files</em> is the collection of <em>File</em> objects retrieved from the function handling the "drop" event on the CANVAS element. Since we are interested only in a single file we simply pick the first file from the collection and ignore the rest if there are any. The actual file contents are loaded asynchronously and once the load completes, the <a href="http://msdn.microsoft.com/en-us/library/ie/hh772337(v=vs.85).aspx"><em>onloadend</em></a> event is fired where we get the file contents as a data URL which we then subsequently draw on to the canvas.</p>

<h3 id="renderingthefilters">Rendering the filters</h3>

<p>Now the core functionality here is of course the application of the filters. In order to be able to apply the filter to the image we need a way to access the individual pixels from the image. And before we can access the pixels we need to have actually rendered the image on to our canvas. So let's first take a look at the code that renders the image that the user picked on to the canvas element.</p>

<h4 id="renderingimagesontothecanvas">Rendering images on to the canvas</h4>

<p>The canvas element supports the rendering of <em>Image</em> objects via the <a href="http://msdn.microsoft.com/en-us/library/ie/ff975414(v=vs.85).aspx"><em>drawImage</em></a> method. To load up the image file in an <em>Image</em> instance, <em>InstaFuzz</em> uses the following utility routine:</p>

<pre><code>App.Namespace.define("InstaFuzz.Utils", {
    loadImage: function (url, complete) {
        var img = new Image();
        img.src = url;
        img.onload = function () {
            complete(img);
        };
    }
});
</code></pre>

<p>This allows the app to load up image objects from a URL using code such as the following:</p>

<pre><code>function drawImageToCanvas(url) {
    InstaFuzz.Utils.loadImage(url, function (img) {
        // save reference to source image
        sourceImage = img;

        mainRenderer.clearCanvas();
        mainRenderer.renderImage(img);

        // load image filter previews
        loadPreviews(img);
    });
}
</code></pre>

<p>Here, <em>mainRenderer</em> is an instance created from the <em>FilterRenderer</em> constructor function defined in <em>filter-renderer.js</em>. The app uses <em>FilterRenderer</em> objects to manage canvas elements - both in the preview pane as well as the main canvas element on the right. The <em>renderImage</em> method on the <em>FilterRenderer</em> has been defined like so:</p>

<pre><code>FilterRenderer.prototype.renderImage = function (img) {
    var imageWidth = img.width;
    var imageHeight = img.height;
    var canvasWidth = this.size.width;
    var canvasHeight = this.size.height;
    var width, height;

    if ((imageWidth / imageHeight) &gt;= (canvasWidth / canvasHeight)) {
        width = canvasWidth;
        height = (imageHeight * canvasWidth / imageWidth);
    } else {
        width = (imageWidth * canvasHeight / imageHeight);
        height = canvasHeight;
    }

    var x = (canvasWidth - width) / 2;
    var y = (canvasHeight - height) / 2;
    this.context.drawImage(img, x, y, width, height);
};
</code></pre>

<p>That might seem like a lot of code but all it does ultimately is to figure out the best way to render the image in the available screen area considering the aspect ratio of the image. The key piece of code that actually renders the image on the canvas occurs on the last line of the method. The <em>context</em> member refers to the 2D context acquired from the canvas object by calling its <a href="http://msdn.microsoft.com/en-us/library/ie/ff975238(v=vs.85).aspx"><em>getContext</em></a> method.</p>

<h4 id="fetchingpixelsfromthecanvas">Fetching pixels from the canvas</h4>

<p>Now that the image has been rendered we will need access to the individual pixels in order to apply all the different filters that are available. This is easily acquired by calling <a href="http://msdn.microsoft.com/en-us/library/ie/ff975418(v=vs.85).aspx"><em>getImageData</em></a> on the canvas's context object. Here's how <em>InstaFuzz</em> calls this from <em>instafuzz.js</em>.</p>

<pre><code>var imageData = renderer.context.getImageData(
    0, 0,
    renderer.size.width,
    renderer.size.height);
</code></pre>

<p>The object returned by <em>getImageData</em> provides access to the individual pixels via its <em>data</em> property which in turn is an array like object that contains a collection of byte values where each value represents the color rendered for a single channel of a single pixel. Each pixel is represented using 4 bytes that specify values for the red, green, blue and alpha channels. It also has a <a href="http://msdn.microsoft.com/en-us/library/ie/ff974921(v=vs.85).aspx"><em>length</em></a> property that returns the length of the buffer. If you have a 2D co-ordinate you can easily transform that into an index into this array using code such as the following. The color intensity values of each channel ranges from 0 through 255. Here's the utility function from <em>filters.js</em> that accepts as input an image data object along with 2D coordinates for the pixel the caller is interested in and returns an object containing the color values:</p>

<pre><code>function getPixel(imageData, x, y) {
    var data = imageData.data, index = 0;

    // normalize x and y and compute index
    x = (x &lt; 0) ? (imageData.width + x) : x;
    y = (y &lt; 0) ? (imageData.height + y) : y;
    index = (x + y * imageData.width) * 4;

    return {
        r: data[index],
        g: data[index + 1],
        b: data[index + 2]
    };
}
</code></pre>

<h4 id="applyingthefilters">Applying the filters</h4>

<p>Now that we have access to the individual pixels, applying the filter is fairly straightforward. Here, for instance is the function that applies a weighted grayscale filter on the image. It simply picks intensities from the red, green and blue channels and sums them up after applying a multiplication factor on each channel and then assigns the result for all 3 channels.</p>

<pre><code>// "Weighted Grayscale" filter
Filters.addFilter({
    name: "Weighted Grayscale",
    apply: function (imageData) {
        var w = imageData.width, h = imageData.height;
        var data = imageData.data;
        var index;
        for (var y = 0; y &lt; h; ++y) {
            for (var x = 0; x &lt; w; ++x) {
                index = (x + y * imageData.width) * 4;
                var luminance = parseInt((data[index + 0] * 0.3) +
                                         (data[index + 1] * 0.59) +
                                         (data[index + 2] * 0.11));
                        data[index + 0] = data[index + 1] =
                    data[index + 2] = luminance;
            }

            Filters.notifyProgress(imageData, x, y, this);
        }

        Filters.notifyProgress(imageData, w, h, this);
    }
});
</code></pre>

<p>Once the filter has been applied we can have that reflected on the canvas by calling the <a href="http://msdn.microsoft.com/en-us/library/ie/ff975423(v=vs.85).aspx"><em>putImageData</em></a> method passing in the modified image data object. While the weighted grayscale filter is fairly simple most of the other filters use an image processing technique known as <em>convolution</em>. The code for all the filters is available in <em>filters.js</em> and the convolution filters were ported from the C code available <a href="http://lodev.org/cgtutor/filtering.html">here</a>.</p>

<h3 id="webworkers">Web Workers</h3>

<p>As you might imagine doing all this number crunching to apply the filters can potentially take a long time to complete. The <em>motion blur</em> filter for instance uses a 9x9 filter matrix for computing the new value for every single pixel and is in fact the most CPU intensive filter among them all. If we were to do all this computation on the UI thread of the browser then the app would essentially freeze every time a filter was being applied. To provide a responsive user experience the app delegates the core image processing tasks to a background script using the support for W3C <a href="http://msdn.microsoft.com/en-us/library/ie/hh673568(v=vs.85).aspxhttp:/msdn.microsoft.com/en-us/library/ie/hh673568(v=vs.85">Web Workers</a>.aspx) in modern browsers.</p>

<p>Web workers allow web applications to have scripts run in a background task that executes in parallel along with the UI thread. Communication between the worker and the UI thread is accomplished by passing messages using the <a href="http://msdn.microsoft.com/library/ie/cc197015.aspx"><em>postMessage</em></a> API. On both ends (i.e. the UI thread and the worker) this manifests as an event notification that you can handle. You can only pass "data" between workers and the UI thread, i.e., you cannot pass anything that has to do with the user interface - you cannot for instance, pass DOM elements to the worker from the UI thread.</p>

<p>In <em>InstaFuzz</em> the worker is implemented in the file <em>filter-worker.js</em>. All it does in the worker is handle the <a href="http://msdn.microsoft.com/library/ie/cc197057.aspx"><em>onmessage</em></a> event and apply a filter and then pass the results back via <em>postMessage</em>. As it turns out, even though we cannot pass DOM elements (which means we cannot just hand a CANVAS element to the worker to have the filter applied) we can in fact pass the image data object as returned by the <em>getImageData</em> method that we discussed earlier. Here's the filter processing code from <em>filter-worker.js</em>:</p>

<pre><code>importScripts("ns.js", "filters.js");

var tag = null;
onmessage = function (e) {
    var opt = e.data;
    var imageData = opt.imageData;
    var filter;

    tag = opt.tag;
    filter = InstaFuzz.Filters.getFilter(opt.filterKey);

    var start = Date.now();
    filter.apply(imageData);
    var end = Date.now();

    postMessage({
        type: "image",
        imageData: imageData,
        filterId: filter.id,
        tag: tag,
        timeTaken: end - start
    });
}
</code></pre>

<p>The first line pulls in some script files that the worker depends on by calling <a href="http://msdn.microsoft.com/library/ie/hh772875.aspx"><em>importScripts</em></a>. This is similar to including a JavaScript file in a HTML document using the SCRIPT tag. Then we set up a handler for the <em>onmessage</em> event in response to which we simply apply the filter in question and pass the result back to the UI thread by calling <em>postMessage</em>. Simple enough!</p>

<p>The code that initializes the worker is in <em>instafuzz.js</em> and looks like this:</p>

<pre><code>var worker = new Worker("js/filter-worker.js");
</code></pre>

<p>Not much is it? When a message is sent by the worker to the UI thread we handle it by specifying a handler for the <em>onmessage</em> event on the worker object. Here's how this is done in <em>InstaFuzz</em>:</p>

<pre><code>worker.onmessage = function (e) {
    var isPreview = e.data.tag;
    switch (e.data.type) {
        case "image":
            if (isPreview) {
                previewRenderers[e.data.filterId].
                    context.putImageData(
                        e.data.imageData, 0, 0);
            } else {
                mainRenderer.context.putImageData(
                    e.data.imageData, 0, 0);
            }

            break;
        // more code here
    }
};
</code></pre>

<p>The code should be fairly self-explanatory. It simply picks the image data object sent by the worker and applies it to the relevant canvas's context object causing the modified image to be rendered on screen. Scheduling a filter for conversion with the worker is equally simple. Here's the routine that performs this function in <em>InstaFuzz</em>:</p>

<pre><code>function scheduleFilter(filterId,
                        renderer,
                        img, isPreview,
                        resetRender) {
    if (resetRender) {
        renderer.clearCanvas();
        renderer.renderImage(img);
    }

    var imageData = renderer.context.getImageData(
        0, 0,
        renderer.size.width,
        renderer.size.height);

    worker.postMessage({
        imageData: imageData,
        width: imageData.width,
        height: imageData.height,
        filterKey: filterId,
        tag: isPreview
    });
}
</code></pre>

<h3 id="inconclusion">In conclusion</h3>

<p>We saw that fairly intricate user experiences are possible today with HTML5 technologies such as Canvas, Drag/Drop, File API and Web Workers. Support for all of these technologies is quite good in pretty much all modern browsers. One thing that we did not address here is the question of making the app compatible with older browsers. That, truth be told, is a non-trivial but necessary task that I will hopefully be able to talk about in a future article.</p>]]>
      </content:encoded>
      <wp:comment>
        <wp:comment_id>209</wp:comment_id>
        <wp:comment_author>Danny</wp:comment_author>
        <wp:comment_author_email>danny_vickers135@hotmail.co.uk</wp:comment_author_email>
        <wp:comment_date_gmt>2013-04-06 15:22:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Hello, I love this app you have developed and I am going to be implementing it into my website, however, I was wondering whether there is a simple way to export the image/save it or create a version of it on the server so that it can be saved to the site and stored? Any pointers or a final tutorial to explain this would be brilliant! Thanks!]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>210</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2013-04-07 14:00:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks for your comment Danny. You should be able to generate a data URL for the image rendered in the canvas by calling &quot;canvas.toDataURL()&quot; which you can then subsequently assign to an &quot;img&quot; element&#39;s &quot;src&quot; attribute. There&#39;s an example here: http://www.html5canvastutorials.com/advanced/html5-canvas-save-drawing-as-an-image/. Hope that helps.]]>
        </wp:comment_content>
      </wp:comment>
    </item>
    <item>
      <title>Writing a sensor driver for the Wiimote on Windows 7</title>
      <link>http://ghost-nerd.azurewebsites.net/writingasensordriverforthewiim</link>
      <dsq:thread_identifier>67</dsq:thread_identifier>
      <wp:post_date_gmt>2010-01-05 11:27:28</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>Ever since I saw <a href="http://johnnylee.net/">Johnny Chung Lee</a>'s <a href="http://johnnylee.net/projects/wii/">demos</a> of the innovative ways in which the <a href="http://en.wikipedia.org/wiki/Wii_Remote">Nintendo Wiimote</a> can be used as an input device for the PC, I've been hooked! The Wiimote is a surprisingly self-contained piece of hardware that is able to operate independently apart from the Wii console. Among other things, the Wiimote features a 3-axis accelerometer which is the primary enabler for letting you do things like wave a virtual tennis racquet or roll a bowling ball down the alley.</p>

<p>When Microsoft released <a href="http://en.wikipedia.org/wiki/Windows_7">Windows 7</a>, one of the new things that they added to the system was a brand new platform for managing a certain class of hardware devices known as "sensors". Sensors are basically devices that, well, sense things! A <a href="http://en.wikipedia.org/wiki/Global_Positioning_System">GPS</a> device for example is a sensor that can provide geographical location information. Another example is an ambient light sensor that lets the system know how bright the ambient light is. Now, these kinds of devices could be written and used even before Windows 7, just that now we have standard ways of exposing and consuming sensor data so that device vendors and application developers are able to communicate with each other in non-proprietary ways.</p>

<p>So, putting the two together, I figured it'd be kind of neat to come up with a sensor driver that exposed the accelerometer data from the Wiimote to the sensor platform. After some bit of head-scratching I managed to put something together. I've written up an article about it and posted it over at <a href="http://codeproject.com">CodeProject.com</a>. If you're interested, you can head over there and read all about it! Here's the link:</p>

<ul>
<li><a href="http://www.codeproject.com/KB/system/wiisensor.aspx">Writing a sensor driver for the Wiimote on Windows 7</a></li>
</ul>]]>
      </content:encoded>
      <wp:comment>
        <wp:comment_id>113</wp:comment_id>
        <wp:comment_author>varadarajan</wp:comment_author>
        <wp:comment_author_email>varadaraajan@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2011-01-12 19:31:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Raj:
I have been very busy with checking into my new house. I always wanted spirit levels to check the horizintal-ness of the structures. Now using these sensors we can create a mobile spirit level on phone. ( I hope this does not exist on the appstore). All I need for this is a mobile that has the sensors loaded as in Wiimote and a Windows 7 OS.
Regards
Varada]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>114</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2011-01-13 02:25:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Varada,

Turns out there's already an app out there for that! For example there's something called &quot;iHandy Level&quot; for the iPhone that simulates the functionality of a physical level checking tool. Looks pretty neat! Thanks for your comment!]]>
        </wp:comment_content>
      </wp:comment>
    </item>
    <item>
      <title>Screen scraping with your browser&apos;s JavaScript console</title>
      <link>http://ghost-nerd.azurewebsites.net/screenscrapingwithyourbrowsers</link>
      <dsq:thread_identifier>68</dsq:thread_identifier>
      <wp:post_date_gmt>2013-04-05 05:34:43</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>I needed to experiment a bit with <a href="http://www.microsoft.com/en-us/download/details.aspx?id=36804&amp;WT.mc_id=rss_alldownloads_all">language packs for IE 10</a> the other day and that involved downloading and installing all the available language packs. Unfortunately I couldn't find a single convenient file for download that'd install everything. The language packs were available as separate downloads for each supported language. Like this:</p>

<blockquote>
  <p><a href="http://blogorama.nerdworks.in/images/_img25.png"><img src="http://blogorama.nerdworks.in/images/_img26.png" alt="image" title="image" /></a></p>
</blockquote>

<p>This was a problem as I was in no mood to download each file individually and there were 100s of "download" buttons there. I figured I'd see if I can screen scrape the links from the DOM of this page and then write a little script to download all of them in one go. So I fired up an instance of IE and hit F12 to launch the developer tools and used the "Select element by click" button to quickly navigate to the markup associated with a "download" button.</p>

<blockquote>
  <p><a href="http://blogorama.nerdworks.in/images/_img1.gif"><img src="http://blogorama.nerdworks.in/images/_img2.gif" alt="select-element" title="select-element" /></a></p>
</blockquote>

<p>As you can tell, all the download buttons are basically anchor tags and the <em>href</em> attribute points to the MSU file for that particular language. Also, you'll note that each such anchor tag has a class called "download" applied on it. So I should be able to fetch all the links by simply iterating through all anchor tags which have the "download" class applied on them. I switched to the "Console" tab in the developer tools window and ran the following script:</p>

<pre><code>document.querySelectorAll("a.download")
</code></pre>

<p>And sure enough this produced a list of all the anchor tags I was interested in. I needed the URL however and not the DOM elements themselves. So I ran this next:</p>

<pre><code>Array.prototype.forEach.call(
    document.querySelectorAll("a.download"),
    function (a) {
        console.log(a.href);
    });
</code></pre>

<p>This produced a list of links such as this (snipped since there are quite a lot of them):</p>

<pre><code>http://download.microsoft.com/download/D/9/A/.../IE10-Windows6.1-LanguagePack-x64-zh-tw.msu 
http://download.microsoft.com/download/D/9/A/.../IE10-Windows6.1-LanguagePack-x64-zu-za.msu 
http://download.microsoft.com/download/D/9/A/.../IE10-Windows6.1-LanguagePack-x86-af-za.msu 
http://download.microsoft.com/download/D/9/A/.../IE10-Windows6.1-LanguagePack-x86-am-et.msu
</code></pre>

<p>If you're wondering why I had to iterate through each element in the list of nodes returned by <em>querySelectorAll</em> via <em>Array.prototype.forEach.call</em> then that's because what <em>querySelectorAll</em> returns isn't a JavaScript array object, i.e., it doesn't inherit from <em>Array.prototype</em>. It is instead a <em>NodeList</em> object which looks a lot like an array! It has numeric properties starting from 0 to N-1 where N is the number of elements returned and it has a <em>length</em> property as well which is equal to N. It turns out that all the <em>Array</em> methods are perfectly capable of dealing with such "array like" objects just as well as genuine, certified JavaScript arrays. Here's an example of what I am talking about:</p>

<pre><code>var notArray = {
    0: "This ",
    1: "is ",
    2: "not ",
    3: "really ",
    4: "an ",
    5: "array.",
    length: 6
};

console.log(Array.prototype.reduce.call(
    notArray,
    function (previous, current) {
        return previous + current;
    },
    ""));
</code></pre>

<p>This snippet prints the following text to the console:</p>

<pre><code>This is not really an array.
</code></pre>

<p>If you take another look at the list of URLs our script printed to the console, you'll notice from the file names that this list includes both x86 files and x64 files. I wanted only x64 files. So, I next changed the script to this:</p>

<pre><code>Array.prototype.forEach.call(
    document.querySelectorAll("a.download[href*=x64]"),
    function (a) {
        console.log(a.href);
    });
</code></pre>

<p>The selector syntax above looks for all anchor tags in the DOM which has a class called "download" applied where the <em>href</em> attribute's value contains the string "x64". I had first implemented this via another call to <em>Array.prototype.filter</em> before learning that CSS3 selector syntax already provides for it! Pretty nifty no? That's pretty much it. I wanted to run a download script for fetching all the files so I slightly modified the script to produce <em><a href="http://www.gnu.org/software/wget/">wget</a></em> calls like so:</p>

<pre><code>Array.prototype.forEach.call(
    document.querySelectorAll("a.download[href*=x64]"),
    function (a) {
        console.log("wget " + a.href);
    });
</code></pre>

<p>And plonked the output into a batch file and ran it. Mission accomplished!</p>

<p>Now, it turned out that this particular page in question includes the jQuery library as well as can be seen when you pull up the files list from the "Script" tab in the developer console.</p>

<blockquote>
  <p><a href="http://blogorama.nerdworks.in/images/_img27.png"><img src="http://blogorama.nerdworks.in/images/_img28.png" alt="image" title="image" /></a></p>
</blockquote>

<p>I could have done the same thing I did above using a slightly terser syntax using jQuery as well. Here's how:</p>

<pre><code>$("a.download[href*=x64]").each(function () {
    console.log("wget " + this.href);
});
</code></pre>

<p>Not having to resort to the <em>Array.prototype</em> weirdness does make the code a lot cleaner doesn't it?</p>]]>
      </content:encoded>
    </item>
    <item>
      <title>Implementing variable sized tiles using WinJS ListView</title>
      <link>http://ghost-nerd.azurewebsites.net/implementingvariablesizedtiles</link>
      <dsq:thread_identifier>69</dsq:thread_identifier>
      <wp:post_date_gmt>2013-05-16 04:34:25</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>Windows Store apps on Windows 8 often use a grouped tile style for rendering user interfaces. The modern desktop on Windows 8 is a classic example. Here's a zoomed out view of my current desktop for instance:</p>

<blockquote>
  <p><a href="http://blogorama.nerdworks.in/images/_img37.png"><img src="http://blogorama.nerdworks.in/images/_img38.png" alt="image" title="image" /></a></p>
</blockquote>

<p>You'll note that the tiles have been grouped into separate sections and each section contains tiles of different sizes. In this case there are only 2 sizes - a wide tile:</p>

<blockquote>
  <p><a href="http://blogorama.nerdworks.in/images/_img39.png"><img src="http://blogorama.nerdworks.in/images/_img40.png" alt="image" title="image" /></a></p>
</blockquote>

<p>And a square tile:</p>

<blockquote>
  <p><a href="http://blogorama.nerdworks.in/images/_img41.png"><img src="http://blogorama.nerdworks.in/images/_img42.png" alt="image" title="image" /></a></p>
</blockquote>

<p>Here's an example of an app that uses different tile sizes in different groups:</p>

<blockquote>
  <p><a href="http://blogorama.nerdworks.in/images/_img43.png"><img src="http://blogorama.nerdworks.in/images/_img44.png" alt="image" title="image" /></a></p>
</blockquote>

<p>I'd been meaning to write down exactly how we can customize the WinJS <a href="http://msdn.microsoft.com/en-us/library/windows/apps/br211837.aspx"><strong>ListView</strong></a> to create interfaces such as this one and, well, here it is. The basic technique for implementing variable tiles with the WinJS <strong>ListView</strong> involves the following things:</p>

<ol>
<li><p>Determine what your "cell unit" is going to be.  This is the width and height of a single "unit" in pixels - the idea is that tile sizes must be a multiple of this.  For example, I might decide that my cell unit is going to be 15x20 pixels.  Then valid tile sizes would be 15x40, 30x20, 45x300 etc.  Once you know what this is, implement the <strong><a href="http://msdn.microsoft.com/en-us/library/windows/apps/br211744.aspx">groupInfo</a></strong> property on the <strong><a href="http://msdn.microsoft.com/en-us/library/windows/apps/br211751.aspx">GridLayout</a></strong> object on your list view's <a href="http://msdn.microsoft.com/en-us/library/windows/apps/br211833.aspx">layout</a> like so.</p>

<pre><code>ready: function (element, options) {
    // more stuff here
    var layout = new WinJS.UI.GridLayout();
    layout.groupInfo = this.getGroupInfo.bind(this);
    // more stuff here
},


getGroupInfo: function () {
    return {
        enableCellSpanning: true,
        cellWidth: 15,
        cellHeight: 20
    }
},
</code></pre></li>
<li><p>Since different tiles in your control can be of different sizes you'll need to tell the <strong>ListView</strong> what those sizes are going to be.  You do this by implementing a method called <strong><a href="http://msdn.microsoft.com/en-us/library/windows/apps/hh758348.aspx">itemInfo</a></strong> on your <strong>GridLayout</strong> object.  The <strong>ListView</strong>calls <strong>itemInfo</strong> for every element it renders from the data source.  The important thing to remember is that the size you return from the <strong>itemInfo</strong> method must be a multiple of the size you returned from <strong>groupInfo</strong>.</p>

<pre><code>ready: function (element, options) {
    // more stuff here
    var layout = new WinJS.UI.GridLayout();
    layout.itemInfo = this.getItemInfo.bind(this);
    // more stuff here
}


getItemInfo: function (index) {
    var data = ImageData.imagesList.getAt(index);
    var size = {
        width: 150,
        height: 200,
        newColumn: false
    };
    if (data.group.name === 
           ImageData.imageGroups.kittens.name) {
        size.height = 100;
    }
    else if (data.group.name ===
           ImageData.imageGroups.portraits.name) {
        size.width = 120;
    }
    return size;
},
</code></pre></li>
<li><p>Associate a JS function for your list view's <strong><a href="http://msdn.microsoft.com/en-us/library/windows/apps/hh700705.aspx">itemTemplate</a></strong> property.  The job of this function is to render an item.</p>

<pre><code>listView.itemTemplate = this.selectItemTemplate.bind(this);
</code></pre>

<p>It is passed a <a href="http://msdn.microsoft.com/en-us/library/windows/apps/br211867.aspx">WinJS.Promise</a> object as a parameter which when resolved will yield the data item which is to be rendered.  We can either manually create DOM elements using <a href="http://msdn.microsoft.com/en-us/library/ie/ms536389(v=vs.85).aspx">document.createElement</a> from this routine or, as is more convenient, use declaratively pre-created <a href="http://msdn.microsoft.com/en-us/library/windows/apps/br229723.aspx">WinJS.Binding.Template</a> instances from the HTML mark-up.  Here's an example implementation showing how to do this:</p>

<pre><code>selectItemTemplate: function(itemPromise, recycle) {
    return itemPromise.then(function (item) {
        var data = item.data;
        var template;
        if (data.group.name ===
                ImageData.imageGroups.kittens.name) {
            template = document.querySelector("#wide-template").
                winControl;
        }
        else if (data.group.name ===
                ImageData.imageGroups.portraits.name) {
            template = document.querySelector("#long-template").
                winControl;
        }
        else {
            template = document.
                querySelector("#default-template").winControl;
        }
        return template.render(item.data);
    });
},
</code></pre></li>
</ol>

<p>As you can tell we first wait for the promise to resolve and then take the data and do some custom template selection logic to pick a template from the DOM and then call its <strong><a href="http://msdn.microsoft.com/en-us/library/windows/apps/br229724.aspx">render</a></strong> method passing in the data object as binding context. You will need to ensure that the styling you use on your template mark-up matches up with the size you return from <strong>itemInfo</strong> as otherwise you might end up with blank spaces in your tiles where the styling doesn't get applied (now, you might want to do this deliberately of course, in which case its totally fine). That's pretty much it!</p>]]>
      </content:encoded>
    </item>
    <item>
      <title>Web Cast on Web Workers</title>
      <link>http://ghost-nerd.azurewebsites.net/webcastonwebworkers</link>
      <dsq:thread_identifier>70</dsq:thread_identifier>
      <wp:post_date_gmt>2011-06-20 23:21:42</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>I did a web cast today on developing web apps with <a href="http://dev.w3.org/html5/workers/">web workers</a>. Hope you folks found it useful. The recording should hopefully be available online soon. In the meantime you can download the deck and the demos from here:</p>

<blockquote>
  <p><a href="https://skydrive.live.com/?cid=2C5064CB54B16F50&amp;id=2C5064CB54B16F50%21314&amp;sc=documents">https://skydrive.live.com/?cid=2C5064CB54B16F50&amp;id=2C5064CB54B16F50%21314&amp;sc=documents</a></p>
</blockquote>

<p>Do feel free to leave any questions you might have as a comment on this post or <a href="http://blogorama.nerdworks.in/contact.aspx">email</a> me or message me on <a href="http://twitter.com/#!/avranju">twitter</a> and I'll be happy to answer them. I also have a plan to make a post talking about some of the interesting bits of the "FilterMe" demo that I showed on the session (also available for download at the link given above) today, but whether that actually transpires or not remains to be seen! <img src="http://blogorama.nerdworks.in/images/_img8.png" alt="Smile with tongue out" title="" /></p>]]>
      </content:encoded>
      <wp:comment>
        <wp:comment_id>137</wp:comment_id>
        <wp:comment_author>Vijayant</wp:comment_author>
        <wp:comment_author_email></wp:comment_author_email>
        <wp:comment_date_gmt>2011-06-21 06:04:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Thanks for Sharing.]]>
        </wp:comment_content>
      </wp:comment>
    </item>
    <item>
      <title>Add a &quot;Web Server Here&quot; Explorer shell extension command</title>
      <link>http://ghost-nerd.azurewebsites.net/addawebserverhereexplorershell</link>
      <dsq:thread_identifier>71</dsq:thread_identifier>
      <wp:post_date_gmt>2013-08-29 00:55:16</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>Sometimes I just want to spin up a web server on a folder in explorer.  Often its because browsers get nervous about running HTML pages directly off the file system and seem to feel more comfortable when its served from a web server.  I figured I'd had enough of writing little scripts or using IIS to create virtual folders every time and wanted a context menu option in Windows Explorer that'll just launch a web server pretty much anywhere I wanted.  Here's what it'll look like:</p>

<blockquote>
  <p><a href="http://blogorama.nerdworks.in/images/_img45.png"><img src="http://blogorama.nerdworks.in/images/_img46.png" alt="image" title="image" /></a></p>
</blockquote>

<p>Turns out, this is fairly straightforward to accomplish using <a href="http://www.iis.net/learn/extensions/introduction-to-iis-express/iis-express-overview">IIS Express</a> and some registry tweaks.  For those of you who don't know, IIS Express is this light weight, self-contained version of IIS meant to be used for developing, debugging and testing web apps.  When you use Visual Studio, the web apps themselves run inside IIS Express when you hit F5.  Being self-contained, we are able to run a web server pretty much anywhere from a command prompt.  Documentation on how to do this is available <a href="http://www.iis.net/learn/extensions/using-iis-express/running-iis-express-from-the-command-line">here</a>.  You can download and install IIS Express either via the <a href="http://www.microsoft.com/web/downloads/">Web Platform Installer</a> or from <a href="http://www.microsoft.com/en-in/download/details.aspx?id=34679">here</a> (IIS Express version 8.0 at the time of writing).   If your web app files are located in say, <strong>D:\Code\Web\Foo</strong> then you'd run a web server from that location like so:</p>

<pre><code>"C:\Program Files (x86)\IIS Express\iisexpress.exe" /path:"D:\Code\Web\Foo" /port:8080 /systray:true
</code></pre>

<p>The path to <em>iisexpress.exe</em> might be different if you're running on a 32-bit system.  It'll just be "Program Files" instead of "Program Files (x86)".  Once you've run the command, the web server starts up and you can load your web app in your favorite browser by navigating to <strong><em><a href='http://localhost:8080/'>http://localhost:8080/</a></em></strong>.  The next step is to integrate this into the Explorer shell so you can run this from wherever you want directly from Explorer.  <a href="http://haacked.com/articles/AboutHaacked.aspx">Phil Haack</a> has written up a <a href="http://haacked.com/archive/2008/06/24/vs2008-web-server-here-shell-extension.aspx">post</a> on how to do this with the web server that Visual Studio 2008 used to ship with way back in, well, 2008.  I adapted the basic steps described there to make it work with IIS Express.  Now, setting this up involves editing the Windows Registry, so please be careful with what you do.  This <a href="http://www.codinghorror.com/blog/2007/03/the-works-on-my-machine-certification-program.html">works on my machine</a> and that's about all I am willing to say!</p>

<blockquote>
  <p><a href="http://blogorama.nerdworks.in/images/_img47.png"><img src="http://blogorama.nerdworks.in/images/_img48.png" alt="works-on-my-machine-starburst_3" title="works-on-my-machine-starburst_3" /></a></p>
</blockquote>

<p>If you're on a <strong>64-bit</strong> installation of Windows, here're the changes you need to do to your registry:</p>

<pre><code>[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\shell\IISExpressWebServer]
@="Web Sever Here"

[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\shell\IISExpressWebServer\command]
@="C:\\Program Files (x86)\\IIS Express\\iisexpress.exe /path:\"%1\" /port:8080 /systray:true"
</code></pre>

<p>And if you're on a <strong>32-bit</strong> installation, then this is what you need to do:</p>

<pre><code>[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\shell\IISExpressWebServer]
@="Web Sever Here"

[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\shell\IISExpressWebServer\command]
@="C:\\Program Files\\IIS Express\\iisexpress.exe /path:\"%1\" /port:8080 /systray:true"
</code></pre>

<p>If you need .reg files so you can just double-click to import them into your registry then they are available <a href="/downloads/wsreg.zip">here</a>.  You might want to edit the .reg files in case your installation paths are different from what's given there.  That's pretty much it!</p>]]>
      </content:encoded>
    </item>
    <item>
      <title>Some notes on C++11 lambda functions</title>
      <link>http://ghost-nerd.azurewebsites.net/somenotesonc11lambdafunctions</link>
      <dsq:thread_identifier>72</dsq:thread_identifier>
      <wp:post_date_gmt>2013-06-29 12:55:11</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>Lambda functions are a new capability introduced in C++ that offers a terse compact syntax for defining functions at the point of their use.  <a href="http://en.wikipedia.org/wiki/Bjarne_Stroustrup">Bjarne Stroustrup</a> says that C++11, which is the latest ratified revision of the C++ standard, "<a href="http://herbsutter.com/elements-of-modern-c-style/">feels like a new language</a>".  I think lambda functions are a big part of what makes the language feel so very different from C++03.  Lambda functions basically allow you to do things like this:</p>

<pre><code>vector&lt;int&gt; nums { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
auto evens = count_if(begin(nums), end(nums), [](int num) {
    return (num % 2) == 0;
});
</code></pre>

<p>The third parameter passed to the standard <a href="http://msdn.microsoft.com/en-us/library/464xhzk3(v=vs.120).aspx">count_if</a> function is a predicate that is expected to return <strong>true</strong> if the value passed to it satisfies the condition and <strong>false</strong> otherwise.  In the snippet above we simply count the number of instances of even numbers in the collection.  Search for "C++ lambdas" on your favorite search engine and you should get plenty of material out there talking about this feature.  What follows in this post are some notes on certain aspects of C++ lambdas that I happened to notice as I was learning about them listed in no particular order.</p>

<ol>
<li><p>You can pass a lambda object around as you would pretty much anything else. Here's a made up example showing how you can pass a lambda as an argument to another function.</p>

<pre><code>#include &lt;iostream&gt;

using namespace std;

template &lt;typename T&gt;
void call(T);

int main() {
  auto fn = []() { cout&lt;&lt;"Lambda"&lt;&lt;endl; };
  call(fn);
  return 0;
}

template &lt;typename T&gt;
void call(T fn) {
  fn();
}
</code></pre></li>
<li><p>You can return lambdas from functions like any another object which makes for some interesting possibilities such as the following:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;functional&gt;

using namespace std;

template&lt;typename T&gt;
function&lt;T()&gt; makeAccumulator(T&amp; val, T by) {
    return [=,&amp;val]() {
        return (val += by);
    };
}

int main() {
    int val = 10;
    auto add5 = makeAccumulator(val, 5);
    cout&lt;&lt;add5()&lt;&lt;endl;
    cout&lt;&lt;add5()&lt;&lt;endl;
    cout&lt;&lt;add5()&lt;&lt;endl;
    cout&lt;&lt;endl;

    val = 100;
    auto add10 = makeAccumulator(val, 10);
    cout&lt;&lt;add10()&lt;&lt;endl;
    cout&lt;&lt;add10()&lt;&lt;endl;
    cout&lt;&lt;add10()&lt;&lt;endl;

    return 0;
}
</code></pre>

<p>Which produces the following output:</p>

<pre><code>15
20
25

110
120
130
</code></pre>

<p>The key thing to remember here is that it is your responsibility to make sure that the values you capture in a lambda remain in memory for the lifetime of the lambda itself. The compiler will not for instance, prevent you from capturing local variables by reference in a lambda and if you continue to access a variable that is no longer available, well, then the behavior is undefined.</p></li>
<li><p>Simply defining a lambda causes all variables captured by value by the lambda to be copy constructed. You don't really have to have any code that invokes the lambda in order for the variables to be copied. This is consistent with the idea that creating a lambda function essentially creates a function object which has as instance members the variables that have been captured in the lambda. Here's an example:</p>

<pre><code>#include &lt;iostream&gt;

using namespace std;

class Foo {
public:
  Foo() {
    cout&lt;&lt;"Foo::Foo()"&lt;&lt;endl;
  }

  Foo(const Foo&amp; f) {
    cout&lt;&lt;"Foo::Foo(const Foo&amp;)"&lt;&lt;endl;
  }

  ~Foo() {
    cout&lt;&lt;"Foo~Foo()"&lt;&lt;endl;
  }
};

int main() {
  Foo f;
  auto fn = [f]() { cout&lt;&lt;"lambda"&lt;&lt;endl; };
  cout&lt;&lt;"Quitting."&lt;&lt;endl;
  return 0;
}
</code></pre>

<p>Here's the output this produces:</p>

<pre><code>Foo::Foo()
Foo::Foo(const Foo&amp;)
Quitting.
Foo~Foo()
Foo~Foo()
</code></pre>

<p>As you can tell, the copy constructor gets invoked even though the lambda itself never gets invoked.</p></li>
<li><p>As an extension of the previous point, if you capture objects by value in a lambda and then proceed to pass that lambda around to other functions by value, then the variables in the closure will also get copy constructed.</p></li>
<li><p>If you reference capture a const local variable, it becomes a const reference in the lambda.</p>

<pre><code>#include &lt;iostream&gt;

using namespace std;

int main() {
    const int val = 10;
    auto f1 = [&amp;val]() {
        val = 20;  // won't compile
        cout&lt;&lt;"val = "&lt;&lt;val&lt;&lt;endl;
    };
    f1();

    return 0;
}
</code></pre></li>
<li><p>In general, when you wish to declare a variable that can hold a reference to a lambda in contexts where <em>auto</em> is not permissible (for e.g. function return types or arguments) use <strong>std::function</strong>. An example:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;functional&gt;

using namespace std;

function&lt;bool(int)&gt; makeLEPredicate(int max) {
    return [max](int val) -&gt; bool {
        return val &lt;= max;
    };
}

int main() {
    auto le10 = makeLEPredicate(10);
    cout&lt;&lt;le10(8)&lt;&lt;endl;

    return 0;
}
</code></pre>

<p>You could alternatively use function templates to achieve the same thing if the semantics of using templates makes sense to your use case.</p></li>
</ol>

<p>That's all for now. This list might get expanded as I explore lambdas further. As you might have noticed, the ability to use lambdas really does make a significant difference to productivity without sacrificing performance.</p>]]>
      </content:encoded>
      <wp:comment>
        <wp:comment_id>215</wp:comment_id>
        <wp:comment_author>Sakthipriyan Vairamani</wp:comment_author>
        <wp:comment_author_email></wp:comment_author_email>
        <wp:comment_date_gmt>2013-06-30 01:23:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[You might want to indicate that the second example is called &quot;closure&quot;.]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>216</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2013-06-30 02:14:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Ya, I thought about that. Thing is, there are plenty of tutorials out there about lambdas in general and about C++ lambdas in particular. So didn&#39;t want this to be yet another tutorial. Just wanted to jot down some interesting (in my view) learnings. But ya, let me see if I can put in a bit about closures in there. Thanks for your comment Sakthi! :)]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>217</wp:comment_id>
        <wp:comment_author>Casey</wp:comment_author>
        <wp:comment_author_email>Casey@Carter.net</wp:comment_author_email>
        <wp:comment_date_gmt>2013-06-30 14:28:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Example #2 has undefined behavior: the lambda that is returned from the function captures the function parameter &quot;by&quot; by reference. When the lambda is later called, &quot;by&quot; will have been destroyed and the reference left dangling.]]>
        </wp:comment_content>
      </wp:comment>
      <wp:comment>
        <wp:comment_id>218</wp:comment_id>
        <wp:comment_author>Ranju V</wp:comment_author>
        <wp:comment_author_email>avranju@gmail.com</wp:comment_author_email>
        <wp:comment_date_gmt>2013-06-30 21:47:00</wp:comment_date_gmt>
        <wp:comment_approved>1</wp:comment_approved>
        <wp:comment_content>
          <![CDATA[Doh! Thanks Casey. You&#39;re right of course. There was a little voice in my head telling me to pay attention to the fact that I was setting up a default capture by ref for that lambda which I didn&#39;t pay attention to. Sigh! Have fixed it up now. Moral: listen to voices in your head.]]>
        </wp:comment_content>
      </wp:comment>
    </item>
    <item>
      <title>Google launches free 3D modelling software</title>
      <link>http://ghost-nerd.azurewebsites.net/googlelaunchesfree3dmodellings</link>
      <dsq:thread_identifier>73</dsq:thread_identifier>
      <wp:post_date_gmt>2006-03-30 18:26:44</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>Google has launched a free 3D modelling software called <em><a href="http://sketchup.google.com/">SketchUp</a></em> that lets you quickly create 3D models - a la dummies version of <em>3D Studio Max</em>. As with most software coming out of Google stables <em>SketchUp</em> is also delightfully simple to use. There's a free and a pro version (that comes for a price) with one major difference being that only the pro version lets you export models into different file formats. The free version lets you save either in the native <em>SketchUp</em> format or in a format that's suitable for use with <em><a href="http://earth.google.com/">Google Earth</a></em>. While the download is a tad heavy at 19MB it is certainly worth it. The downside is of course that they don't let you save the models in any <em>real</em> format that you can use (in an OpenGL program for instance). <em>SketchUp</em> is another Google acquisition incidentally.</p>]]>
      </content:encoded>
    </item>
    <item>
      <title>Playing in-memory audio streams on Windows 8</title>
      <link>http://ghost-nerd.azurewebsites.net/playinginmemoryaudiostreamsonw</link>
      <dsq:thread_identifier>74</dsq:thread_identifier>
      <wp:post_date_gmt>2013-11-29 02:16:09</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>A customer I'd been working with recently came up with a support request for a <a href="http://dev.windows.com/">Windows 8 Store app</a> they'd been working on. They were building the app using the HTML/CSS/JS stack and wanted the ability to play audio streams completely from memory instead of loading it up from a file on the file system or a network stream. They needed this because their service implemented a custom Digital Rights Management (DRM) system where the audio content was encrypted and this needed to be decrypted before playback (duh!). They wanted however, to perform this decryption on the fly during playback instead of creating a decrypted version of the content on the file system. In this post I talk about a little sample I put together for them showing how you can achieve this on Windows 8. If you prefer to directly jump into the code and take a look at things on your own, then here's where its at:</p>

<blockquote>
  <p><a href="https://github.com/avranju/AudioPlayerWithCustomStream" title="https://github.com/avranju/AudioPlayerWithCustomStream">https://github.com/avranju/AudioPlayerWithCustomStream</a></p>
</blockquote>

<h3 id="playingmediastreamsfrommemory">Playing media streams from memory</h3>

<p>The primary requirement proved to be fairly straightforward to accomplish. Turns out, there already exists an <a href="http://code.msdn.microsoft.com/windowsapps/MediaStreamSource-media-dfd55dff">SDK sample</a> showing exactly this. The sample shows how to achieve media playback from memory streams using the <a href="http://msdn.microsoft.com/en-us/library/windows/apps/windows.media.core.mediastreamsource.aspx">Windows.Media.Core.MediaStreamSource</a> object. Briefly, here are the steps:</p>

<ol>
<li><p>First you go fetch some metadata from the media stream. In case of audio content, this turns out to be the sample rate, encoding bit rate, duration and number of channels. For file based audio sources, the <a href="http://msdn.microsoft.com/en-us/library/windows/apps/windows.storage.storagefile.aspx">Windows.Storage.StorageFile</a> object has the ability to extract this information from the file directly via <a href="http://msdn.microsoft.com/en-us/library/windows/apps/hh770652.aspx">Windows.Storage.StorageFile.Properties.RetrievePropertiesAsync</a>. Here's an example function that accepts a <code>StorageFile</code> object as input and then extracts and returns the said metadata from it.</p>

<pre><code>function loadProps(file) {
    var props = {
        fileName: "",
        sampleRate: 0,
        bitRate: 0,
        channelCount: 0,
        duration: 0
    };


    // save file name
    props.fileName = file.name;
    return file.properties.getMusicPropertiesAsync().then(
     function (musicProps) {
        // save duration
        props.duration = musicProps.duration;


        var encProps = [
            "System.Audio.SampleRate",
            "System.Audio.ChannelCount",
            "System.Audio.EncodingBitrate"
        ];


        return file.properties.
            retrievePropertiesAsync(encProps);
    }).then(function (encProps) {
        // save encoding properties
        props.sampleRate =
           encProps["System.Audio.SampleRate"];
        props.bitRate =
           encProps["System.Audio.EncodingBitrate"];
        props.channelCount =
           encProps["System.Audio.ChannelCount"];


        return props;
    });
}
</code></pre></li>
<li><p>Wrap the metadata gathered in step 1 in a <a href="http://msdn.microsoft.com/en-us/library/windows/apps/windows.media.mediaproperties.audioencodingproperties.aspx">Windows.Media.MediaProperties.AudioEncodingProperties</a> object which in turn is then wrapped in a <a href="http://msdn.microsoft.com/en-us/library/windows/apps/windows.media.core.audiostreamdescriptor.aspx">Windows.Media.Core.AudioStreamDescriptor</a> object.  </p></li>
<li>Use the <code>AudioStreamDescriptor</code> object to initialize a <code>MediaStreamSource</code> instance and setup event handlers for the <code>MediaStreamSource</code>'s <code>Starting</code>, <code>SampleRequested</code> and <code>Closed</code> events. As you might imagine, the idea is to respond to these events by handing out audio data to the <code>MediaStreamSource</code>which then proceeds to play that content.</li>
</ol>

<p>This is all fine and dandy, but how do we get this to work when the audio content is stored in memory in an <a href="http://msdn.microsoft.com/en-us/library/windows/apps/windows.storage.streams.inmemoryrandomaccessstream.aspx">Windows.Storage.Streams.InMemoryRandomAccessStream</a> object? The challenge of course is in extracting the metadata we need to setup a <code>MediaStreamSource</code> object.</p>

<h3 id="storagefilecanreadfromarbitrarystreams">StorageFile can read from arbitrary streams?</h3>

<p>As it happens, the <code>StorageFile</code> object has direct support for having it powered by an arbitrary stream (or pretty much anything really). I figured I'll hook up a <code>StorageFile</code> with an <code>InMemoryRandomAccessStream</code> object and have it extract the metadata that I needed. Here's how you connect a <code>StorageFile</code> with data fetched from any arbitrary source - in this case, just a string constant. You create a <code>StorageFile</code> object by calling <a href="http://msdn.microsoft.com/en-us/library/windows/apps/windows.storage.storagefile.createstreamedfileasync.aspx">StorageFile.CreateStreamedFileAsync</a>. <code>CreateStreamedFileAsync</code> requires that you pass a reference to a callback routine which is expected to supply the data the <code>StorageFile</code> object needs when it is first accessed. Here's a brief example:</p>

<pre><code>function init() {
    var reader;
    var size = 0;

    Windows.Storage.StorageFile.createStreamedFileAsync(
           "foo.txt", generateData, null).then(
       function (file) {
        // open a stream on the file and read the data;
        // this will cause the StorageFile object to
        // invoke the "generateData" function
        return file.openReadAsync();
    }).then(function (stream) {
        var inputStream = stream.getInputStreamAt(0);
        reader = new Windows.Storage.Streams.DataReader(inputStream);
        size = stream.size;
        return reader.loadAsync(size);
    }).then(function () {
        var str = reader.readString(size);
        console.log(str);
    });
}

function generateData(stream) {
    var writer = new Windows.Storage.Streams.DataWriter();
    writer.writeString("Some arbit random data.");

    var buffer = writer.detachBuffer();
    writer.close();

    stream.writeAsync(buffer).then(function () {
        return stream.flushAsync();
    }).done(function () {
        stream.close();
    });
}
</code></pre>

<p>The problem however, as I ended up discovering, is that <code>StorageFile</code> objects that work off of a stream created in this fashion do not support retrieval of file properties via <code>StorageFile.Properties.RetrievePropertiesAsync</code> or for that matter <code>StorageFile.Properties.GetMusicPropertiesAsync</code>. So clearly, this approach is not going to work. Having said that its useful to know that this technique is possible at all with <code>StorageFile</code> objects as it allows you to defer performing the actual work of producing the data represented by the <code>StorageFile</code> object till it is actually needed. And being a bona fide Windows Runtime object you can confidently pass this around wherever a <code>StorageFile</code> object is accepted - for instance when implementing a share source contract you might hand out a <code>StorageFile</code> object created in this manner via <a href="http://msdn.microsoft.com/en-us/library/windows/apps/windows.applicationmodel.datatransfer.datapackage.setstorageitems.aspx">Windows.ApplicationModel.DataTransfer.DataPackage.SetStorageItems</a>.</p>

<h3 id="readingmusicmetadatausingthemicrosoftmediafoundation">Reading music metadata using the Microsoft Media Foundation</h3>

<p>After a bit of research I discovered that there is another API that can be used for fetching metadata from media streams (among other things) called the <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms694197(v=vs.85).aspx">Microsoft Media Foundation</a>. In particular, the API features an object called the <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd374655(v=vs.85).aspx">source reader</a> that can be used to get the data we are after. The trouble though is that this is a COM based API and cannot therefore be directly invoked from JavaScript. I decided to write a little wrapper Windows Runtime component in C++ and then use that from the JS app. After non-trivial help from my colleague <a href="https://github.com/ChrisGuzak">Chris Guzak</a> and others directly from the Media Foundation team at Microsoft (perks of working for Microsoft I guess!) we managed to put together a small component that allows us to read the required meta data from an <code>InMemoryRandomAccessStream</code> object. Here's relevant snippet that does the main job (stripped out all the error handling code to de-clutter the code):</p>

<pre><code>MFAttributesHelper(InMemoryRandomAccessStream^ stream, String^ mimeType)
{
    MFStartup(MF_VERSION);

    // create an IMFByteStream from "stream"
    ComPtr&lt;IMFByteStream&gt; byteStream;
    MFCreateMFByteStreamOnStreamEx(
           reinterpret_cast&lt;IUnknown*&gt;(stream),
           &amp;byteStream);

    // assign mime type to the attributes on this byte stream
    ComPtr&lt;IMFAttributes&gt; attributes;
    byteStream.As(&amp;attributes);
    attributes-&gt;SetString(
           MF_BYTESTREAM_CONTENT_TYPE,
           mimeType-&gt;Data());

    // create a source reader from the byte stream
    ComPtr&lt;IMFSourceReader&gt; sourceReader;
    MFCreateSourceReaderFromByteStream(
           byteStream.Get(),
           nullptr,
           &amp;sourceReader);

    // get current media type
    ComPtr&lt;IMFMediaType&gt; mediaType;
    sourceReader-&gt;GetCurrentMediaType(
           MF_SOURCE_READER_FIRST_AUDIO_STREAM,
           &amp;mediaType);

    // get all the data we're looking for
    PROPVARIANT prop;
    sourceReader-&gt;GetPresentationAttribute(
           MF_SOURCE_READER_MEDIASOURCE,
           MF_PD_DURATION,
           &amp;prop);
    Duration = prop.uhVal.QuadPart;

    UINT32 data;
    sourceReader-&gt;GetPresentationAttribute(
           MF_SOURCE_READER_MEDIASOURCE,
           MF_PD_AUDIO_ENCODING_BITRATE,
           &amp;prop);
    BitRate = prop.ulVal;

    mediaType-&gt;GetUINT32(
           MF_MT_AUDIO_SAMPLES_PER_SECOND,
           &amp;data);
    SampleRate = data;

    mediaType-&gt;GetUINT32(
           MF_MT_AUDIO_NUM_CHANNELS,
           &amp;data);
    ChannelCount = data;
}
</code></pre>

<p>This is the implementation of the constructor on the <code>MFAttributesHelper</code> ref class. As you can tell, the constructor accepts a reference to an instance of an <code>InMemoryRandomAccessStream</code> object and the MIME type of the content in question and proceeds to extract the duration, encoding bitrate, sample rate and channel count from it. It does this by first creating an <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms698720(v=vs.85).aspx">IMFByteStream</a> object via the convenient <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh162754(v=vs.85).aspx">MFCreateMFByteStreamOnStreamEx</a> function which basically wraps an <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/windows.storage.streams.irandomaccessstream.aspx">IRandomAccessStream</a> object (which <code>InMemoryRandomAccessStream</code> implements) and returns an <code>IMFByteStream</code> instance. The object returned by <code>MFCreateMFByteStreamOnStreamEx</code> also implements <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms704598(v=vs.85).aspx">IMFAttributes</a> which we then <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms682521(v=vs.85).aspx">QueryInterface</a> for (via <a href="http://msdn.microsoft.com/en-us/library/br230426.aspx">ComPtr::As</a>) and assign the MIME type value to it. Next we instantiate an object that implements <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd374655(v=vs.85).aspx">IMFSourceReader</a> via <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd388106(v=vs.85).aspx">MFCreateSourceReaderFromByteStream</a> and use that instance to fetch the duration and encoding bitrate values via the <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd374662(v=vs.85).aspx">GetPresentationAttribute</a> method. And finally, we retrieve an object that implements the <a href="http://msdn.microsoft.com/en-us/library/ms704850(v=vs.85).aspx">IMFMediaType</a> interface via <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd374660(v=vs.85).aspx">IMFSourceReader::GetCurrentMediaType</a> and use that object to fetch the sample rate and the channel count values. Once you know how to do all this, it seems quite trivial of course but getting here, believe me, took some doing!</p>

<p>Now that we have this component, reading the metadata from JavaScript proves to be fairly straightforward. Here's an example. In the code below, <code>memoryStream</code> is an <code>InMemoryRandomAccessStream</code> instance and <code>mimeType</code> is a string with the MIME type of the content:</p>

<pre><code>var helper = MFUtils.MFAttributesHelper.create(memoryStream, mimeType);

// now, helper's sampleRate, bitRate, duration and channelCount
// properties contain the data we are looking for
</code></pre>

<p>Now with the metadata handy, we simply follow the steps as outlined earlier in this post to commence playback. As mentioned before the sample is hosted up on Github here:</p>

<blockquote>
  <p><a href="https://github.com/avranju/AudioPlayerWithCustomStream" title="https://github.com/avranju/AudioPlayerWithCustomStream">https://github.com/avranju/AudioPlayerWithCustomStream</a></p>
</blockquote>

<p>For the sake of the sample, I took a plain <a href="http://testdriveie9.wise.glbdns.microsoft.com/ietestdrivecontent/Musopen.Com%20Symphony%20No.%205%20in%20C%20Minor,%20Op.%2067%20-%20I.%20Allegro%20con%20brio.mp3">MP3 file</a> and applied a <a href="http://en.wikipedia.org/wiki/XOR_cipher">XOR cipher</a> on it and then loaded it up and played back from memory applying another XOR transform on the bits before playback. It all works rather well together and again, hat-tip to <a href="https://twitter.com/Guz100">Chris Guzak</a> for all his help in whittling down the WinRT component down to its essence and really cleaning up its interface!</p>]]>
      </content:encoded>
    </item>
    <item>
      <title>Iterating over a std::tuple</title>
      <link>http://ghost-nerd.azurewebsites.net/iteratingoverastdtuple</link>
      <dsq:thread_identifier>75</dsq:thread_identifier>
      <wp:post_date_gmt>2014-03-27 06:01:18</wp:post_date_gmt>
      <wp:comment_status>open</wp:comment_status>
      <content:encoded>
        <![CDATA[<p>Iâve been trying to wrap my brain around the new <a href="http://en.wikipedia.org/wiki/Variadic_Templates">variadic templates</a> capability in C++11 lately and wondered if it would be possible to write a generic routine to iterate over the members of a <a href="http://msdn.microsoft.com/en-us/library/bb982837.aspx"><code>std::tuple</code></a>. I decided to start with the simple case of printing out the members of a tuple to the console via <code>std::cout.</code> First, I came up with a compile time recursive definition of a variadic template struct that overloads the function call operator like so. You might wonder why I didnât stick with a plain variadic template function instead. That will become evident in a moment.</p>

<pre><code> template&lt;int index, typename... Ts&gt;
 struct print_tuple {
     void operator() (tuple&lt;Ts...&gt;&amp; t) {
         cout &lt;&lt; get&lt;index&gt;(t) &lt;&lt; " ";
         print_tuple&lt;index - 1, Ts...&gt;{}(t);
     }
 };
</code></pre>

<p>Clearly, weâll need to define a base case to break out of the compile time recursion for the <code>print_tuple</code> call in the function call operator overload â which in this case would be when the non-type template parameter <code>index</code> is equal to zero. So I went ahead and defined the following partial specialization of <code>print_tuple</code> specializing on the value zero for the non-type template parameter <code>index</code>.</p>

<pre><code> template&lt;typename... Ts&gt;
 struct print_tuple&lt;0, Ts...&gt; {
     void operator() (tuple&lt;Ts...&gt;&amp; t) {
         cout &lt;&lt; get&lt;0&gt;(t) &lt;&lt; " ";
     }
 };
</code></pre>

<p>The reason I had to use a variadic template struct instead of a regular variadic template function is that it is <a href="http://www.gotw.ca/publications/mill17.htm">not possible to partially specialize a template function in C++</a>. Using a struct/class allows us to do so. Now that we have this setup, we can write a utility <code>print</code> routine to wrap calls to <code>print_tuple</code> and we should be done. Hereâs a complete example:</p>

<pre><code> #include &lt;iostream&gt;
 #include &lt;tuple&gt;

 using namespace std;

 template&lt;int index, typename... Ts&gt;
 struct print_tuple {
     void operator() (tuple&lt;Ts...&gt;&amp; t) {
         cout &lt;&lt; get&lt;index&gt;(t) &lt;&lt; " ";
         print_tuple&lt;index - 1, Ts...&gt;{}(t);
     }
 };

 template&lt;typename... Ts&gt;
 struct print_tuple&lt;0, Ts...&gt; {
     void operator() (tuple&lt;Ts...&gt;&amp; t) {
         cout &lt;&lt; get&lt;0&gt;(t) &lt;&lt; " ";
     }
 };

 template&lt;typename... Ts&gt;
 void print(tuple&lt;Ts...&gt;&amp; t) {
     const auto size = tuple_size&lt;tuple&lt;Ts...&gt;&gt;::value;
     print_tuple&lt;size - 1, Ts...&gt;{}(t);
 }

 int main() {
     auto t = make_tuple(1, 2, "abc", "def", 4.0f);
     print(t);

     return 0;
 }
</code></pre>

<p>All that <code>print</code> does is to first determine the size of the tuple via <a href="http://msdn.microsoft.com/en-us/library/bb982495.aspx"><code>tuple_size</code></a> and then instantiates <code>print_tuple</code> and invokes the function call operator passing the tuple object in question. As you might have noticed we are essentially working our way backwards till we hit the base case where <code>index</code> is zero â i.e. itâll print the tuple members in the reverse order. Hereâs the output this produces:</p>

<pre><code> 4 def abc 2 1
</code></pre>

<h3 id="iterateinorder">Iterate in order?</h3>

<p>I figured, implementing a version that iterates over the tuple members in the order that they are specified should be fairly straightforward. We should just need to define a different base case (for the last item in the tuple instead of the first) and the recursive implementation should simply increment the index instead of decrementing it. Hereâs what I came up with:</p>

<pre><code> template&lt;int index, typename... Ts&gt;
 struct print_tuple {
     void operator() (tuple&lt;Ts...&gt;&amp; t) {
         cout &lt;&lt; get&lt;index&gt;(t) &lt;&lt; " ";
         print_tuple&lt;index + 1, Ts...&gt;{}(t);
     }
 };

 template&lt;typename... Ts&gt;
 struct print_tuple&lt;tuple_size&lt;tuple&lt;Ts...&gt;&gt;::value - 1, Ts...&gt; {
     void operator() (tuple&lt;Ts...&gt;&amp; t) {
         cout &lt;&lt; get&lt;tuple_size&lt;tuple&lt;Ts...&gt;&gt;::value - 1&gt;(t) &lt;&lt; " ";
     }
 };
</code></pre>

<p>The code shown in bold above are the changes of interest. In particular, turns out, the base case definition which handles the situation when <code>print_tuple</code> is being instantiated with an <code>index</code> that is equal to the size of the tuple minus one, is not really valid C++. Non-type template specialization in C++ can only be done using âsimple identifiersâ. The expression <code>tuple_size&lt;tuple&lt;Ts...&gt;&gt;::value - 1</code> is a compile time constant for sure and ideally the compiler <em>should</em> be able to compute that value (which in fact it does for the code in the body of that method definition) but, well, it doesnât! So, weâre kind of out of luck there.</p>

<h3 id="generalizediteration">Generalized iteration?</h3>

<p>One might imagine that it should be possible to generalize this iteration (even if it can be done in reverse order only) so that we are able to supply arbitrary callbacks for processing tuple members. Turns out this again, is not possible which I think is reasonable. Because at that point one really needs to question whether using a tuple is the correct choice â a <code>std::vector</code> or <code>std::list</code> or some of the other containers maybe a more appropriate option. Having said that, you might be thinking that we should still be able to generalize this by adding another template parameter for a callback routine and passing in a template function for that parameter. Maybe something like this?</p>

<pre><code> #include &lt;iostream&gt;
 #include &lt;tuple&gt;

 using namespace std;

 template&lt;int index, typename TCallback, typename... Ts&gt;
 struct iterate_tuple {
     void operator() (tuple&lt;Ts...&gt;&amp; t, TCallback callback) {
         callback(get&lt;index&gt;(t));
         iterate_tuple&lt;index - 1, TCallback, Ts...&gt;{}(t, callback);
     }
 };

 template&lt;typename TCallback, typename... Ts&gt;
 struct iterate_tuple&lt;0, TCallback, Ts...&gt; {
     void operator() (tuple&lt;Ts...&gt;&amp; t, TCallback callback) {
         callback(get&lt;0&gt;(t));
     }
 };

 template&lt;typename TCallback, typename... Ts&gt;
 void for_each(tuple&lt;Ts...&gt;&amp; t, TCallback callback) {
     iterate_tuple&lt;tuple_size&lt;tuple&lt;Ts...&gt;&gt;::value - 1, TCallback, Ts...&gt; it;
     it(t, callback);
 }

 template&lt;typename T&gt;
 void print(T v) {
     cout &lt;&lt; v &lt;&lt; " ";
 }

 int main() {
     auto t = make_tuple(1, 2, "abc", "def", 4.0f);
     for_each(t, print);

     return 0;
 }
</code></pre>

<p>This wonât work because the compiler needs to know the type of <code>TCallback</code> when it is instantiating the <code>for_each</code> template function which in this case it doesnât and neither do we know the type because we want a different version of print to be used for each unique type in the tuple. If there is some way of telling the compiler to postpone resolution of <code>TCallback</code> till it is actually used then this might have worked. As far as I know, that isnât possible. But then I might be wrong. If you know a way of doing that, itâll be great if you could please let me know in the comments.</p>]]>
      </content:encoded>
    </item>
  </channel>
</rss>
